	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 10
	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init:                 ## @__cxx_global_var_init
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp0:
	.cfi_def_cfa_offset 16
Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2:
	.cfi_def_cfa_register %rbp
	leaq	__ZN5boost6fusionL6unusedE(%rip), %rdi
	callq	__ZN5boost6fusion11unused_typeC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost6fusion11unused_typeC1Ev
	.weak_def_can_be_hidden	__ZN5boost6fusion11unused_typeC1Ev
	.align	4, 0x90
__ZN5boost6fusion11unused_typeC1Ev:     ## @_ZN5boost6fusion11unused_typeC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp3:
	.cfi_def_cfa_offset 16
Ltmp4:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp5:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion11unused_typeC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init1:                ## @__cxx_global_var_init1
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp6:
	.cfi_def_cfa_offset 16
Ltmp7:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp8:
	.cfi_def_cfa_register %rbp
	leaq	__ZN5boost12_GLOBAL__N_17extentsE(%rip), %rdi
	callq	__ZN5boost6detail11multi_array10extent_genILm0EEC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost6detail11multi_array10extent_genILm0EEC1Ev
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array10extent_genILm0EEC1Ev
	.align	4, 0x90
__ZN5boost6detail11multi_array10extent_genILm0EEC1Ev: ## @_ZN5boost6detail11multi_array10extent_genILm0EEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp9:
	.cfi_def_cfa_offset 16
Ltmp10:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp11:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6detail11multi_array10extent_genILm0EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init2:                ## @__cxx_global_var_init2
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp12:
	.cfi_def_cfa_offset 16
Ltmp13:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp14:
	.cfi_def_cfa_register %rbp
	leaq	__ZN5boost12_GLOBAL__N_17indicesE(%rip), %rdi
	callq	__ZN5boost6detail11multi_array9index_genILi0ELi0EEC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost6detail11multi_array9index_genILi0ELi0EEC1Ev
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array9index_genILi0ELi0EEC1Ev
	.align	4, 0x90
__ZN5boost6detail11multi_array9index_genILi0ELi0EEC1Ev: ## @_ZN5boost6detail11multi_array9index_genILi0ELi0EEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp15:
	.cfi_def_cfa_offset 16
Ltmp16:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp17:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6detail11multi_array9index_genILi0ELi0EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init3:                ## @__cxx_global_var_init3
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp18:
	.cfi_def_cfa_offset 16
Ltmp19:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp20:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4arma4fillL4noneE(%rip), %rdi
	callq	__ZN4arma4fill10fill_classINS0_9fill_noneEEC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma4fill10fill_classINS0_9fill_noneEEC1Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_9fill_noneEEC1Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_9fill_noneEEC1Ev: ## @_ZN4arma4fill10fill_classINS0_9fill_noneEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp21:
	.cfi_def_cfa_offset 16
Ltmp22:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp23:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init4:                ## @__cxx_global_var_init4
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp24:
	.cfi_def_cfa_offset 16
Ltmp25:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp26:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4arma4fillL5zerosE(%rip), %rdi
	callq	__ZN4arma4fill10fill_classINS0_10fill_zerosEEC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma4fill10fill_classINS0_10fill_zerosEEC1Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_10fill_zerosEEC1Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_10fill_zerosEEC1Ev: ## @_ZN4arma4fill10fill_classINS0_10fill_zerosEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp27:
	.cfi_def_cfa_offset 16
Ltmp28:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp29:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init5:                ## @__cxx_global_var_init5
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp30:
	.cfi_def_cfa_offset 16
Ltmp31:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp32:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4arma4fillL4onesE(%rip), %rdi
	callq	__ZN4arma4fill10fill_classINS0_9fill_onesEEC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma4fill10fill_classINS0_9fill_onesEEC1Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_9fill_onesEEC1Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_9fill_onesEEC1Ev: ## @_ZN4arma4fill10fill_classINS0_9fill_onesEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp33:
	.cfi_def_cfa_offset 16
Ltmp34:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp35:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init6:                ## @__cxx_global_var_init6
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp36:
	.cfi_def_cfa_offset 16
Ltmp37:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp38:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4arma4fillL3eyeE(%rip), %rdi
	callq	__ZN4arma4fill10fill_classINS0_8fill_eyeEEC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma4fill10fill_classINS0_8fill_eyeEEC1Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_8fill_eyeEEC1Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_8fill_eyeEEC1Ev: ## @_ZN4arma4fill10fill_classINS0_8fill_eyeEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp39:
	.cfi_def_cfa_offset 16
Ltmp40:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp41:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init7:                ## @__cxx_global_var_init7
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp42:
	.cfi_def_cfa_offset 16
Ltmp43:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp44:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4arma4fillL5randuE(%rip), %rdi
	callq	__ZN4arma4fill10fill_classINS0_10fill_randuEEC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma4fill10fill_classINS0_10fill_randuEEC1Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_10fill_randuEEC1Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_10fill_randuEEC1Ev: ## @_ZN4arma4fill10fill_classINS0_10fill_randuEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp45:
	.cfi_def_cfa_offset 16
Ltmp46:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp47:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init8:                ## @__cxx_global_var_init8
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp48:
	.cfi_def_cfa_offset 16
Ltmp49:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp50:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4arma4fillL5randnE(%rip), %rdi
	callq	__ZN4arma4fill10fill_classINS0_10fill_randnEEC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma4fill10fill_classINS0_10fill_randnEEC1Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_10fill_randnEEC1Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_10fill_randnEEC1Ev: ## @_ZN4arma4fill10fill_classINS0_10fill_randnEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp51:
	.cfi_def_cfa_offset 16
Ltmp52:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp53:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init9:                ## @__cxx_global_var_init9
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp54:
	.cfi_def_cfa_offset 16
Ltmp55:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp56:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4armaL9eucl_distE(%rip), %rdi
	callq	__ZN4arma13gmm_dist_euclC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma13gmm_dist_euclC1Ev
	.weak_def_can_be_hidden	__ZN4arma13gmm_dist_euclC1Ev
	.align	4, 0x90
__ZN4arma13gmm_dist_euclC1Ev:           ## @_ZN4arma13gmm_dist_euclC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp57:
	.cfi_def_cfa_offset 16
Ltmp58:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp59:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_dist_euclC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init10:               ## @__cxx_global_var_init10
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp60:
	.cfi_def_cfa_offset 16
Ltmp61:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp62:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4armaL9maha_distE(%rip), %rdi
	callq	__ZN4arma13gmm_dist_mahaC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma13gmm_dist_mahaC1Ev
	.weak_def_can_be_hidden	__ZN4arma13gmm_dist_mahaC1Ev
	.align	4, 0x90
__ZN4arma13gmm_dist_mahaC1Ev:           ## @_ZN4arma13gmm_dist_mahaC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp63:
	.cfi_def_cfa_offset 16
Ltmp64:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp65:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_dist_mahaC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init11:               ## @__cxx_global_var_init11
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp66:
	.cfi_def_cfa_offset 16
Ltmp67:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp68:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4armaL9prob_distE(%rip), %rdi
	callq	__ZN4arma13gmm_dist_probC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma13gmm_dist_probC1Ev
	.weak_def_can_be_hidden	__ZN4arma13gmm_dist_probC1Ev
	.align	4, 0x90
__ZN4arma13gmm_dist_probC1Ev:           ## @_ZN4arma13gmm_dist_probC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp69:
	.cfi_def_cfa_offset 16
Ltmp70:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp71:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_dist_probC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init12:               ## @__cxx_global_var_init12
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp72:
	.cfi_def_cfa_offset 16
Ltmp73:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp74:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4armaL13keep_existingE(%rip), %rdi
	callq	__ZN4arma22gmm_seed_keep_existingC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma22gmm_seed_keep_existingC1Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_keep_existingC1Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_keep_existingC1Ev:  ## @_ZN4arma22gmm_seed_keep_existingC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp75:
	.cfi_def_cfa_offset 16
Ltmp76:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp77:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma22gmm_seed_keep_existingC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init13:               ## @__cxx_global_var_init13
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp78:
	.cfi_def_cfa_offset 16
Ltmp79:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp80:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4armaL13static_subsetE(%rip), %rdi
	callq	__ZN4arma22gmm_seed_static_subsetC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma22gmm_seed_static_subsetC1Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_static_subsetC1Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_static_subsetC1Ev:  ## @_ZN4arma22gmm_seed_static_subsetC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp81:
	.cfi_def_cfa_offset 16
Ltmp82:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp83:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma22gmm_seed_static_subsetC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init14:               ## @__cxx_global_var_init14
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp84:
	.cfi_def_cfa_offset 16
Ltmp85:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp86:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4armaL13static_spreadE(%rip), %rdi
	callq	__ZN4arma22gmm_seed_static_spreadC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma22gmm_seed_static_spreadC1Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_static_spreadC1Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_static_spreadC1Ev:  ## @_ZN4arma22gmm_seed_static_spreadC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp87:
	.cfi_def_cfa_offset 16
Ltmp88:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp89:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma22gmm_seed_static_spreadC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init15:               ## @__cxx_global_var_init15
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp90:
	.cfi_def_cfa_offset 16
Ltmp91:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp92:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4armaL13random_subsetE(%rip), %rdi
	callq	__ZN4arma22gmm_seed_random_subsetC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma22gmm_seed_random_subsetC1Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_random_subsetC1Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_random_subsetC1Ev:  ## @_ZN4arma22gmm_seed_random_subsetC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp93:
	.cfi_def_cfa_offset 16
Ltmp94:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp95:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma22gmm_seed_random_subsetC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init16:               ## @__cxx_global_var_init16
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp96:
	.cfi_def_cfa_offset 16
Ltmp97:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp98:
	.cfi_def_cfa_register %rbp
	leaq	__ZN4armaL13random_spreadE(%rip), %rdi
	callq	__ZN4arma22gmm_seed_random_spreadC1Ev
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma22gmm_seed_random_spreadC1Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_random_spreadC1Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_random_spreadC1Ev:  ## @_ZN4arma22gmm_seed_random_spreadC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp99:
	.cfi_def_cfa_offset 16
Ltmp100:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp101:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma22gmm_seed_random_spreadC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init17:               ## @__cxx_global_var_init17
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp102:
	.cfi_def_cfa_offset 16
Ltmp103:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp104:
	.cfi_def_cfa_register %rbp
	leaq	__ZL13gVersionCheck(%rip), %rdi
	movl	$393986, %esi           ## imm = 0x60302
	callq	__ZN13TVersionCheckC1Ei
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI35_0:
	.quad	4602678819172646912     ## double 0.5
LCPI35_1:
	.quad	-4616189618054758400    ## double -1
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactoryC2Ev
	.align	4, 0x90
__ZN3fid10FidFactoryC2Ev:               ## @_ZN3fid10FidFactoryC2Ev
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin35:
	.cfi_lsda 16, Lexception35
## BB#0:
	pushq	%rbp
Ltmp153:
	.cfi_def_cfa_offset 16
Ltmp154:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp155:
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1392, %rsp             ## imm = 0x570
Ltmp156:
	.cfi_offset %rbx, -32
Ltmp157:
	.cfi_offset %r14, -24
	movq	%rdi, -1072(%rbp)
	movq	%rdi, %rax
	movq	%rdi, %rcx
	addq	$40, %rcx
	movq	%rcx, -1064(%rbp)
	movq	%rcx, -1056(%rbp)
	movq	%rcx, -1048(%rbp)
	movq	%rcx, -1040(%rbp)
	movq	$0, 40(%rdi)
	movq	$0, 48(%rdi)
	movq	%rdi, %rdx
	addq	$56, %rdx
	movq	%rdx, -1024(%rbp)
	movq	$0, -1032(%rbp)
	movq	-1024(%rbp), %rdx
	movq	%rdx, -1008(%rbp)
	movq	$0, -1016(%rbp)
	movq	-1008(%rbp), %rdx
	leaq	-1016(%rbp), %rsi
	movq	%rsi, -1000(%rbp)
	movq	-1016(%rbp), %rsi
	movq	%rdx, -984(%rbp)
	movq	%rsi, -992(%rbp)
	movq	-984(%rbp), %rdx
	movq	%rdx, -976(%rbp)
	leaq	-992(%rbp), %rsi
	movq	%rsi, -968(%rbp)
	movq	-992(%rbp), %rsi
	movq	%rsi, (%rdx)
	movq	%rdi, %rdx
	addq	$64, %rdx
	movq	%rdx, -960(%rbp)
	movq	%rdx, -952(%rbp)
	movq	%rdx, -944(%rbp)
	movq	%rdx, -936(%rbp)
	movq	$0, 64(%rdi)
	movq	$0, 72(%rdi)
	movq	%rdi, %rsi
	addq	$80, %rsi
	movq	%rsi, -920(%rbp)
	movq	$0, -928(%rbp)
	movq	-920(%rbp), %rsi
	movq	%rsi, -904(%rbp)
	movq	$0, -912(%rbp)
	movq	-904(%rbp), %rsi
	leaq	-912(%rbp), %r8
	movq	%r8, -896(%rbp)
	movq	-912(%rbp), %r8
	movq	%rsi, -880(%rbp)
	movq	%r8, -888(%rbp)
	movq	-880(%rbp), %rsi
	movq	%rsi, -872(%rbp)
	leaq	-888(%rbp), %r8
	movq	%r8, -864(%rbp)
	movq	-888(%rbp), %r8
	movq	%r8, (%rsi)
	movq	%rdi, %rsi
	addq	$88, %rsi
	movq	%rsi, -856(%rbp)
	movq	%rsi, -848(%rbp)
	movq	%rsi, -840(%rbp)
	movq	%rsi, -832(%rbp)
	movq	$0, 88(%rdi)
	movq	$0, 96(%rdi)
	movq	%rdi, %r8
	addq	$104, %r8
	movq	%r8, -816(%rbp)
	movq	$0, -824(%rbp)
	movq	-816(%rbp), %r8
	movq	%r8, -800(%rbp)
	movq	$0, -808(%rbp)
	movq	-800(%rbp), %r8
	leaq	-808(%rbp), %r9
	movq	%r9, -792(%rbp)
	movq	-808(%rbp), %r9
	movq	%r8, -776(%rbp)
	movq	%r9, -784(%rbp)
	movq	-776(%rbp), %r8
	movq	%r8, -768(%rbp)
	leaq	-784(%rbp), %r9
	movq	%r9, -760(%rbp)
	movq	-784(%rbp), %r9
	movq	%r9, (%r8)
	movq	%rdi, %r8
	addq	$112, %r8
	movq	%r8, -752(%rbp)
	movq	%r8, -744(%rbp)
	movq	%r8, -736(%rbp)
	movq	%r8, -728(%rbp)
	movq	$0, 112(%rdi)
	movq	$0, 120(%rdi)
	movq	%rdi, %r9
	subq	$-128, %r9
	movq	%r9, -712(%rbp)
	movq	$0, -720(%rbp)
	movq	-712(%rbp), %r9
	movq	%r9, -696(%rbp)
	movq	$0, -704(%rbp)
	movq	-696(%rbp), %r9
	leaq	-704(%rbp), %r10
	movq	%r10, -688(%rbp)
	movq	-704(%rbp), %r10
	movq	%r9, -672(%rbp)
	movq	%r10, -680(%rbp)
	movq	-672(%rbp), %r9
	movq	%r9, -664(%rbp)
	leaq	-680(%rbp), %r10
	movq	%r10, -656(%rbp)
	movq	-680(%rbp), %r10
	movq	%r10, (%r9)
	movq	%rdi, %r9
	addq	$136, %r9
	movq	%r9, -648(%rbp)
	movq	%r9, -640(%rbp)
	movq	%r9, -632(%rbp)
	movq	%r9, -624(%rbp)
	movq	$0, 136(%rdi)
	movq	$0, 144(%rdi)
	movq	%rdi, %r10
	addq	$152, %r10
	movq	%r10, -608(%rbp)
	movq	$0, -616(%rbp)
	movq	-608(%rbp), %r10
	movq	%r10, -592(%rbp)
	movq	$0, -600(%rbp)
	movq	-592(%rbp), %r10
	leaq	-600(%rbp), %r11
	movq	%r11, -584(%rbp)
	movq	-600(%rbp), %r11
	movq	%r10, -568(%rbp)
	movq	%r11, -576(%rbp)
	movq	-568(%rbp), %r10
	movq	%r10, -560(%rbp)
	leaq	-576(%rbp), %r11
	movq	%r11, -552(%rbp)
	movq	-576(%rbp), %r11
	movq	%r11, (%r10)
	movq	%rdi, %r10
	addq	$160, %r10
	movq	%r10, -544(%rbp)
	movq	%r10, -536(%rbp)
	movq	%r10, -528(%rbp)
	movq	%r10, -520(%rbp)
	movq	$0, 160(%rdi)
	movq	$0, 168(%rdi)
	movq	%rdi, %r11
	addq	$176, %r11
	movq	%r11, -504(%rbp)
	movq	$0, -512(%rbp)
	movq	-504(%rbp), %r11
	movq	%r11, -488(%rbp)
	movq	$0, -496(%rbp)
	movq	-488(%rbp), %r11
	leaq	-496(%rbp), %rbx
	movq	%rbx, -480(%rbp)
	movq	-496(%rbp), %rbx
	movq	%r11, -464(%rbp)
	movq	%rbx, -472(%rbp)
	movq	-464(%rbp), %r11
	movq	%r11, -456(%rbp)
	leaq	-472(%rbp), %rbx
	movq	%rbx, -448(%rbp)
	movq	-472(%rbp), %rbx
	movq	%rbx, (%r11)
	movq	%rdi, %r11
	addq	$216, %r11
	movq	%r11, -440(%rbp)
	movq	%r11, -432(%rbp)
	movq	%r11, -424(%rbp)
	movq	%r11, -416(%rbp)
	movq	$0, 216(%rdi)
	movq	$0, 224(%rdi)
	movq	%rdi, %rbx
	addq	$232, %rbx
	movq	%rbx, -400(%rbp)
	movq	$0, -408(%rbp)
	movq	-400(%rbp), %rbx
	movq	%rbx, -384(%rbp)
	movq	$0, -392(%rbp)
	movq	-384(%rbp), %rbx
	leaq	-392(%rbp), %r14
	movq	%r14, -376(%rbp)
	movq	-392(%rbp), %r14
	movq	%rbx, -360(%rbp)
	movq	%r14, -368(%rbp)
	movq	-360(%rbp), %rbx
	movq	%rbx, -352(%rbp)
	leaq	-368(%rbp), %r14
	movq	%r14, -344(%rbp)
	movq	-368(%rbp), %r14
	movq	%r14, (%rbx)
	movq	__ZN3fid3sim10start_timeE@GOTPCREL(%rip), %rbx
	movsd	(%rbx), %xmm0
	movsd	%xmm0, (%rdi)
	movq	__ZN3fid3sim10delta_timeE@GOTPCREL(%rip), %rbx
	movsd	(%rbx), %xmm1
	movq	__ZN3fid3sim11num_samplesE@GOTPCREL(%rip), %rbx
	cvtsi2sdl	(%rbx), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, 8(%rdi)
Ltmp105:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str(%rip), %rbx
	movq	%rsi, -1096(%rbp)       ## 8-byte Spill
	movq	%rbx, %rsi
	movq	%r11, -1104(%rbp)       ## 8-byte Spill
	movq	%rax, -1112(%rbp)       ## 8-byte Spill
	movq	%rcx, -1120(%rbp)       ## 8-byte Spill
	movq	%rdx, -1128(%rbp)       ## 8-byte Spill
	movq	%r10, -1136(%rbp)       ## 8-byte Spill
	movq	%r8, -1144(%rbp)        ## 8-byte Spill
	movq	%r9, -1152(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp106:
	movq	%rax, -1160(%rbp)       ## 8-byte Spill
	jmp	LBB35_1
LBB35_1:
	movq	__ZN3fid3sim14dt_integrationE@GOTPCREL(%rip), %rax
	movsd	(%rax), %xmm0
Ltmp107:
	movq	-1160(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd
Ltmp108:
	movq	%rax, -1168(%rbp)       ## 8-byte Spill
	jmp	LBB35_2
LBB35_2:
	movq	-1168(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -328(%rbp)
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rcx
	movq	%rcx, -336(%rbp)
	movq	-328(%rbp), %rdi
Ltmp109:
	callq	*%rcx
Ltmp110:
	movq	%rax, -1176(%rbp)       ## 8-byte Spill
	jmp	LBB35_3
LBB35_3:                                ## %_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPFRS3_S4_E.exit
	jmp	LBB35_4
LBB35_4:
Ltmp111:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str18(%rip), %rsi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp112:
	movq	%rax, -1184(%rbp)       ## 8-byte Spill
	jmp	LBB35_5
LBB35_5:
Ltmp113:
	movq	__ZN3fid3sim14dt_integrationE@GOTPCREL(%rip), %rsi
	movq	-1184(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv
Ltmp114:
	movq	%rax, -1192(%rbp)       ## 8-byte Spill
	jmp	LBB35_6
LBB35_6:
	movq	-1192(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -312(%rbp)
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rcx
	movq	%rcx, -320(%rbp)
	movq	-312(%rbp), %rdi
Ltmp115:
	callq	*%rcx
Ltmp116:
	movq	%rax, -1200(%rbp)       ## 8-byte Spill
	jmp	LBB35_7
LBB35_7:                                ## %_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPFRS3_S4_E.exit1
	jmp	LBB35_8
LBB35_8:
	movsd	LCPI35_0(%rip), %xmm0
	movq	__ZN3fid3sim11num_samplesE@GOTPCREL(%rip), %rax
	movq	__ZN3fid3sim14dt_integrationE@GOTPCREL(%rip), %rcx
	movq	-1112(%rbp), %rdx       ## 8-byte Reload
	movsd	8(%rdx), %xmm1
	subsd	(%rdx), %xmm1
	movsd	(%rcx), %xmm2
	cvtsi2sdl	(%rax), %xmm3
	mulsd	%xmm3, %xmm2
	divsd	%xmm2, %xmm1
	addsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %esi
	movl	%esi, 24(%rdx)
	cmpl	$0, 24(%rdx)
	jne	LBB35_17
## BB#9:
Ltmp125:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str19(%rip), %rsi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp126:
	movq	%rax, -1208(%rbp)       ## 8-byte Spill
	jmp	LBB35_10
LBB35_10:
Ltmp127:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str20(%rip), %rsi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp128:
	movq	%rax, -1216(%rbp)       ## 8-byte Spill
	jmp	LBB35_11
LBB35_11:
	movq	__ZN3fid3sim10delta_timeE@GOTPCREL(%rip), %rax
	movsd	(%rax), %xmm0
Ltmp129:
	movq	-1216(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd
Ltmp130:
	movq	%rax, -1224(%rbp)       ## 8-byte Spill
	jmp	LBB35_12
LBB35_12:
Ltmp131:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str21(%rip), %rsi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp132:
	movq	%rax, -1232(%rbp)       ## 8-byte Spill
	jmp	LBB35_13
LBB35_13:
	movq	-1232(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -296(%rbp)
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rcx
	movq	%rcx, -304(%rbp)
	movq	-296(%rbp), %rdi
Ltmp133:
	callq	*%rcx
Ltmp134:
	movq	%rax, -1240(%rbp)       ## 8-byte Spill
	jmp	LBB35_14
LBB35_14:                               ## %_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPFRS3_S4_E.exit2
	jmp	LBB35_15
LBB35_15:
	movq	__ZN3fid3sim10delta_timeE@GOTPCREL(%rip), %rax
	movq	-1112(%rbp), %rcx       ## 8-byte Reload
	movl	$1, 24(%rcx)
	movsd	(%rax), %xmm0
	movsd	%xmm0, 16(%rcx)
	jmp	LBB35_25
LBB35_16:
Ltmp152:
	movl	%edx, %ecx
	movq	%rax, -1080(%rbp)
	movl	%ecx, -1084(%rbp)
	jmp	LBB35_44
LBB35_17:
	movq	__ZN3fid3sim14dt_integrationE@GOTPCREL(%rip), %rax
	movq	__ZN3fid3sim10delta_timeE@GOTPCREL(%rip), %rcx
	movsd	(%rcx), %xmm0
	movq	-1112(%rbp), %rcx       ## 8-byte Reload
	cvtsi2sdl	24(%rcx), %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, 16(%rcx)
	movsd	16(%rcx), %xmm0
	ucomisd	(%rax), %xmm0
	jne	LBB35_18
	jp	LBB35_18
	jmp	LBB35_24
LBB35_18:
Ltmp117:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str22(%rip), %rsi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp118:
	movq	%rax, -1248(%rbp)       ## 8-byte Spill
	jmp	LBB35_19
LBB35_19:
Ltmp119:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str23(%rip), %rsi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp120:
	movq	%rax, -1256(%rbp)       ## 8-byte Spill
	jmp	LBB35_20
LBB35_20:
	movq	-1112(%rbp), %rax       ## 8-byte Reload
	movsd	16(%rax), %xmm0
Ltmp121:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd
Ltmp122:
	movq	%rax, -1264(%rbp)       ## 8-byte Spill
	jmp	LBB35_21
LBB35_21:
	movq	-1264(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -280(%rbp)
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rcx
	movq	%rcx, -288(%rbp)
	movq	-280(%rbp), %rdi
Ltmp123:
	callq	*%rcx
Ltmp124:
	movq	%rax, -1272(%rbp)       ## 8-byte Spill
	jmp	LBB35_22
LBB35_22:                               ## %_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPFRS3_S4_E.exit3
	jmp	LBB35_23
LBB35_23:
	jmp	LBB35_24
LBB35_24:
	jmp	LBB35_25
LBB35_25:
	movq	-1112(%rbp), %rax       ## 8-byte Reload
	movl	24(%rax), %ecx
	movq	__ZN3fid3sim11num_samplesE@GOTPCREL(%rip), %rdx
	movl	(%rdx), %esi
	imull	%esi, %ecx
	movl	%ecx, 28(%rax)
	movl	$0, 32(%rax)
Ltmp135:
	movl	$784, %ecx              ## imm = 0x310
	movl	%ecx, %edi
	callq	__ZN7TObjectnwEm
Ltmp136:
	movq	%rax, -1280(%rbp)       ## 8-byte Spill
	jmp	LBB35_26
LBB35_26:
	movq	__ZN3fid4grad9root_fileE@GOTPCREL(%rip), %rax
	movq	-1280(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rdx
	movq	%rdx, -240(%rbp)
	movq	-240(%rbp), %rdx
	movq	%rdx, -232(%rbp)
	movq	-232(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rcx, -1288(%rbp)       ## 8-byte Spill
	movq	%rax, -1296(%rbp)       ## 8-byte Spill
	je	LBB35_28
## BB#27:
	movq	-1296(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	movq	-176(%rbp), %rcx
	movq	%rcx, -168(%rbp)
	movq	-168(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -1304(%rbp)       ## 8-byte Spill
	jmp	LBB35_29
LBB35_28:
	movq	-1296(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rcx
	movq	%rcx, -216(%rbp)
	movq	-216(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	-208(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -200(%rbp)
	movq	-200(%rbp), %rcx
	movq	%rcx, -192(%rbp)
	movq	-192(%rbp), %rcx
	movq	%rcx, -1304(%rbp)       ## 8-byte Spill
LBB35_29:                               ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv.exit
	movq	-1304(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -160(%rbp)
Ltmp137:
	leaq	L_.str24(%rip), %rcx
	movl	$1, %r8d
	movq	-1288(%rbp), %rdi       ## 8-byte Reload
	movq	%rax, %rsi
	movq	%rcx, %rdx
	callq	__ZN5TFileC1EPKcS1_S1_i
Ltmp138:
	jmp	LBB35_30
LBB35_30:
	movq	-1112(%rbp), %rax       ## 8-byte Reload
	movq	-1288(%rbp), %rcx       ## 8-byte Reload
	movq	%rcx, 200(%rax)
	movq	(%rcx), %rdx
	movq	1272(%rdx), %rdx
Ltmp140:
	movq	%rcx, %rdi
	callq	*%rdx
Ltmp141:
	movb	%al, -1305(%rbp)        ## 1-byte Spill
	jmp	LBB35_31
LBB35_31:
	movb	-1305(%rbp), %al        ## 1-byte Reload
	testb	$1, %al
	jne	LBB35_32
	jmp	LBB35_43
LBB35_32:
	movq	-1112(%rbp), %rax       ## 8-byte Reload
	movq	200(%rax), %rcx
	movq	(%rcx), %rdx
	movq	608(%rdx), %rdx
Ltmp142:
	leaq	L_.str25(%rip), %rsi
	movq	%rcx, %rdi
	callq	*%rdx
Ltmp143:
	movq	%rax, -1320(%rbp)       ## 8-byte Spill
	jmp	LBB35_33
LBB35_33:
	movq	-1112(%rbp), %rax       ## 8-byte Reload
	movq	-1320(%rbp), %rcx       ## 8-byte Reload
	movq	%rcx, 208(%rax)
	addq	$216, %rax
	movq	__ZN3fid3sim11num_samplesE@GOTPCREL(%rip), %rdx
	movslq	(%rdx), %rsi
Ltmp144:
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm
Ltmp145:
	jmp	LBB35_34
LBB35_34:
	movq	__ZN3fid4grad10fid_branchE@GOTPCREL(%rip), %rax
	movq	-1112(%rbp), %rcx       ## 8-byte Reload
	movq	208(%rcx), %rdi
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rdx
	movq	%rdx, -120(%rbp)
	movq	-120(%rbp), %rdx
	movq	%rdx, -112(%rbp)
	movq	-112(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rdi, -1328(%rbp)       ## 8-byte Spill
	movq	%rax, -1336(%rbp)       ## 8-byte Spill
	je	LBB35_36
## BB#35:
	movq	-1336(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -1344(%rbp)       ## 8-byte Spill
	jmp	LBB35_37
LBB35_36:
	movq	-1336(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rcx
	movq	%rcx, -88(%rbp)
	movq	-88(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rcx
	movq	%rcx, -72(%rbp)
	movq	-72(%rbp), %rcx
	movq	%rcx, -1344(%rbp)       ## 8-byte Spill
LBB35_37:                               ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5c_strEv.exit4
	movq	-1344(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rsi
	movq	-1112(%rbp), %rax       ## 8-byte Reload
	addq	$216, %rax
	movq	%rax, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	(%rax), %rax
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	%rsi, -1352(%rbp)       ## 8-byte Spill
	movq	%rax, -1360(%rbp)       ## 8-byte Spill
## BB#38:
Ltmp146:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	-1328(%rbp), %rdi       ## 8-byte Reload
	movq	-1352(%rbp), %rsi       ## 8-byte Reload
	movq	-1360(%rbp), %rdx       ## 8-byte Reload
	callq	__ZN5TTree16SetBranchAddressIdEEiPKcPT_PP7TBranch
Ltmp147:
	movl	%eax, -1364(%rbp)       ## 4-byte Spill
	jmp	LBB35_39
LBB35_39:
	movq	-1112(%rbp), %rax       ## 8-byte Reload
	movq	208(%rax), %rcx
	movq	(%rcx), %rdx
	movq	968(%rdx), %rdx
Ltmp148:
	xorl	%esi, %esi
	movl	%esi, %edi
	movq	%rdi, -1376(%rbp)       ## 8-byte Spill
	movq	%rcx, %rdi
	movq	-1376(%rbp), %rcx       ## 8-byte Reload
	movl	%esi, -1380(%rbp)       ## 4-byte Spill
	movq	%rcx, %rsi
	movl	-1380(%rbp), %r8d       ## 4-byte Reload
	movq	%rdx, -1392(%rbp)       ## 8-byte Spill
	movl	%r8d, %edx
	movq	-1392(%rbp), %r9        ## 8-byte Reload
	callq	*%r9
Ltmp149:
	movl	%eax, -1396(%rbp)       ## 4-byte Spill
	jmp	LBB35_40
LBB35_40:
	movq	-1112(%rbp), %rax       ## 8-byte Reload
	movq	208(%rax), %rcx
	movq	(%rcx), %rdx
	movq	928(%rdx), %rdx
Ltmp150:
	movq	%rcx, %rdi
	callq	*%rdx
Ltmp151:
	movq	%rax, -1408(%rbp)       ## 8-byte Spill
	jmp	LBB35_41
LBB35_41:
	movsd	LCPI35_0(%rip), %xmm0
	movsd	LCPI35_1(%rip), %xmm1
	movq	__ZN3fid4grad3minE@GOTPCREL(%rip), %rax
	movq	__ZN3fid4grad3maxE@GOTPCREL(%rip), %rcx
	movq	-1408(%rbp), %rdx       ## 8-byte Reload
	movl	%edx, %esi
	movq	-1112(%rbp), %rdi       ## 8-byte Reload
	movl	%esi, 184(%rdi)
	movsd	(%rcx), %xmm2
	subsd	(%rax), %xmm2
	cvtsi2sdl	184(%rdi), %xmm3
	divsd	%xmm3, %xmm2
	movsd	%xmm2, 192(%rdi)
	mulsd	(%rax), %xmm1
	divsd	192(%rdi), %xmm1
	addsd	%xmm0, %xmm1
	cvttsd2si	%xmm1, %esi
	movl	%esi, 188(%rdi)
	jmp	LBB35_43
LBB35_42:
Ltmp139:
	movl	%edx, %ecx
	movq	%rax, -1080(%rbp)
	movl	%ecx, -1084(%rbp)
	movq	-1280(%rbp), %rdi       ## 8-byte Reload
	callq	__ZN7TObjectdlEPv
	jmp	LBB35_44
LBB35_43:
	addq	$1392, %rsp             ## imm = 0x570
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
LBB35_44:
	movq	-1104(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-1136(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-1152(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-1144(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-1096(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-1128(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-1120(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
## BB#45:
	movq	-1080(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end35:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table35:
Lexception35:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\266\200\200"          ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	52                      ## Call site table length
Lset0 = Ltmp105-Leh_func_begin35        ## >> Call Site 1 <<
	.long	Lset0
Lset1 = Ltmp136-Ltmp105                 ##   Call between Ltmp105 and Ltmp136
	.long	Lset1
Lset2 = Ltmp152-Leh_func_begin35        ##     jumps to Ltmp152
	.long	Lset2
	.byte	0                       ##   On action: cleanup
Lset3 = Ltmp137-Leh_func_begin35        ## >> Call Site 2 <<
	.long	Lset3
Lset4 = Ltmp138-Ltmp137                 ##   Call between Ltmp137 and Ltmp138
	.long	Lset4
Lset5 = Ltmp139-Leh_func_begin35        ##     jumps to Ltmp139
	.long	Lset5
	.byte	0                       ##   On action: cleanup
Lset6 = Ltmp140-Leh_func_begin35        ## >> Call Site 3 <<
	.long	Lset6
Lset7 = Ltmp151-Ltmp140                 ##   Call between Ltmp140 and Ltmp151
	.long	Lset7
Lset8 = Ltmp152-Leh_func_begin35        ##     jumps to Ltmp152
	.long	Lset8
	.byte	0                       ##   On action: cleanup
Lset9 = Ltmp151-Leh_func_begin35        ## >> Call Site 4 <<
	.long	Lset9
Lset10 = Leh_func_end35-Ltmp151         ##   Call between Ltmp151 and Leh_func_end35
	.long	Lset10
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	.weak_def_can_be_hidden	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	.align	4, 0x90
__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc: ## @_ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp158:
	.cfi_def_cfa_offset 16
Ltmp159:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp160:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rdi, -32(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -40(%rbp)         ## 8-byte Spill
	callq	_strlen
	movq	-32(%rbp), %rdi         ## 8-byte Reload
	movq	-40(%rbp), %rsi         ## 8-byte Reload
	movq	%rax, %rdx
	callq	__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.private_extern	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.globl	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.weak_definition	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.align	4, 0x90
__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_: ## @_ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin37:
	.cfi_lsda 16, Lexception37
## BB#0:
	pushq	%rbp
Ltmp166:
	.cfi_def_cfa_offset 16
Ltmp167:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp168:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rdi, %rax
	movq	(%rdi), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rdi
	movq	%rdi, -32(%rbp)
	movb	$10, -33(%rbp)
	movq	-32(%rbp), %rsi
	leaq	-48(%rbp), %rcx
	movq	%rcx, %rdi
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	movq	%rcx, -88(%rbp)         ## 8-byte Spill
	callq	__ZNKSt3__18ios_base6getlocEv
	movq	-88(%rbp), %rax         ## 8-byte Reload
	movq	%rax, -24(%rbp)
Ltmp161:
	movq	__ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi
	movq	%rax, %rdi
	callq	__ZNKSt3__16locale9use_facetERNS0_2idE
Ltmp162:
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	jmp	LBB37_1
LBB37_1:                                ## %_ZNSt3__19use_facetINS_5ctypeIcEEEERKT_RKNS_6localeE.exit.i
	movb	-33(%rbp), %al
	movq	-96(%rbp), %rcx         ## 8-byte Reload
	movq	%rcx, -8(%rbp)
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	56(%rsi), %rsi
	movsbl	-9(%rbp), %edi
Ltmp163:
	movl	%edi, -100(%rbp)        ## 4-byte Spill
	movq	%rdx, %rdi
	movl	-100(%rbp), %r8d        ## 4-byte Reload
	movq	%rsi, -112(%rbp)        ## 8-byte Spill
	movl	%r8d, %esi
	movq	-112(%rbp), %rdx        ## 8-byte Reload
	callq	*%rdx
Ltmp164:
	movb	%al, -113(%rbp)         ## 1-byte Spill
	jmp	LBB37_3
LBB37_2:
Ltmp165:
	leaq	-48(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -56(%rbp)
	movl	%ecx, -60(%rbp)
	callq	__ZNSt3__16localeD1Ev
	movq	-56(%rbp), %rdi
	callq	__Unwind_Resume
LBB37_3:                                ## %_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE5widenEc.exit
	leaq	-48(%rbp), %rdi
	callq	__ZNSt3__16localeD1Ev
	movq	-80(%rbp), %rdi         ## 8-byte Reload
	movb	-113(%rbp), %al         ## 1-byte Reload
	movsbl	%al, %esi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc
	movq	-72(%rbp), %rdi
	movq	%rax, -128(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv
	movq	-72(%rbp), %rdi
	movq	%rax, -136(%rbp)        ## 8-byte Spill
	movq	%rdi, %rax
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc
Leh_func_end37:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table37:
Lexception37:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset11 = Leh_func_begin37-Leh_func_begin37 ## >> Call Site 1 <<
	.long	Lset11
Lset12 = Ltmp161-Leh_func_begin37       ##   Call between Leh_func_begin37 and Ltmp161
	.long	Lset12
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset13 = Ltmp161-Leh_func_begin37       ## >> Call Site 2 <<
	.long	Lset13
Lset14 = Ltmp164-Ltmp161                ##   Call between Ltmp161 and Ltmp164
	.long	Lset14
Lset15 = Ltmp165-Leh_func_begin37       ##     jumps to Ltmp165
	.long	Lset15
	.byte	0                       ##   On action: cleanup
Lset16 = Ltmp164-Leh_func_begin37       ## >> Call Site 3 <<
	.long	Lset16
Lset17 = Leh_func_end37-Ltmp164         ##   Call between Ltmp164 and Leh_func_end37
	.long	Lset17
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN7TObjectnwEm
	.weak_def_can_be_hidden	__ZN7TObjectnwEm
	.align	4, 0x90
__ZN7TObjectnwEm:                       ## @_ZN7TObjectnwEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp169:
	.cfi_def_cfa_offset 16
Ltmp170:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp171:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN8TStorage11ObjectAllocEm
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin39:
	.cfi_lsda 16, Lexception39
## BB#0:
	pushq	%rbp
Ltmp175:
	.cfi_def_cfa_offset 16
Ltmp176:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp177:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	-168(%rbp), %rsi
	movq	%rsi, -160(%rbp)
	movq	-160(%rbp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	cmpq	-176(%rbp), %rax
	movq	%rsi, -192(%rbp)        ## 8-byte Spill
	jae	LBB39_2
## BB#1:
	movq	-176(%rbp), %rax
	subq	-184(%rbp), %rax
	movq	-192(%rbp), %rdi        ## 8-byte Reload
	movq	%rax, %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm
	jmp	LBB39_10
LBB39_2:
	movq	-184(%rbp), %rax
	cmpq	-176(%rbp), %rax
	jbe	LBB39_9
## BB#3:
	movq	-192(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-176(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movq	%rax, -136(%rbp)
	movq	%rcx, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	(%rdx), %rdx
	subq	%rdx, %rsi
	sarq	$3, %rsi
	movq	%rsi, -152(%rbp)
	movq	%rcx, %rdx
	movq	-144(%rbp), %rsi
	movq	%rdx, -112(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-112(%rbp), %rdx
	movq	%rcx, -200(%rbp)        ## 8-byte Spill
	movq	%rdx, -208(%rbp)        ## 8-byte Spill
LBB39_4:                                ## =>This Inner Loop Header: Depth=1
	movq	-120(%rbp), %rax
	movq	-208(%rbp), %rcx        ## 8-byte Reload
	cmpq	8(%rcx), %rax
	je	LBB39_6
## BB#5:                                ##   in Loop: Header=BB39_4 Depth=1
	movq	-208(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rcx
	movq	%rcx, -88(%rbp)
	movq	-88(%rbp), %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rdx, 8(%rax)
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	%rcx, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-48(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	%rcx, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rcx, -8(%rbp)
	movq	%rdx, -16(%rbp)
	jmp	LBB39_4
LBB39_6:                                ## %_ZNSt3__113__vector_baseIdNS_9allocatorIdEEE17__destruct_at_endEPd.exit.i
	movq	-152(%rbp), %rsi
Ltmp172:
	movq	-200(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEm
Ltmp173:
	jmp	LBB39_8
LBB39_7:
Ltmp174:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -212(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
LBB39_8:                                ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE17__destruct_at_endEPd.exit
	jmp	LBB39_9
LBB39_9:
	jmp	LBB39_10
LBB39_10:
	addq	$224, %rsp
	popq	%rbp
	retq
	.cfi_endproc
Leh_func_end39:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table39:
Lexception39:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\242\200\200"          ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	26                      ## Call site table length
Lset18 = Leh_func_begin39-Leh_func_begin39 ## >> Call Site 1 <<
	.long	Lset18
Lset19 = Ltmp172-Leh_func_begin39       ##   Call between Leh_func_begin39 and Ltmp172
	.long	Lset19
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset20 = Ltmp172-Leh_func_begin39       ## >> Call Site 2 <<
	.long	Lset20
Lset21 = Ltmp173-Ltmp172                ##   Call between Ltmp172 and Ltmp173
	.long	Lset21
Lset22 = Ltmp174-Leh_func_begin39       ##     jumps to Ltmp174
	.long	Lset22
	.byte	1                       ##   On action: 1
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5TTree16SetBranchAddressIdEEiPKcPT_PP7TBranch
	.weak_def_can_be_hidden	__ZN5TTree16SetBranchAddressIdEEiPKcPT_PP7TBranch
	.align	4, 0x90
__ZN5TTree16SetBranchAddressIdEEiPKcPT_PP7TBranch: ## @_ZN5TTree16SetBranchAddressIdEEiPKcPT_PP7TBranch
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp178:
	.cfi_def_cfa_offset 16
Ltmp179:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp180:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$88, %rsp
Ltmp181:
	.cfi_offset %rbx, -24
	movq	__ZTId@GOTPCREL(%rip), %rax
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rax, %rdi
	movl	%r8d, %esi
	movl	%r9d, %edx
	movq	%rcx, -64(%rbp)         ## 8-byte Spill
	callq	__ZN6TClass8GetClassERKSt9type_infobb
	movq	%rax, -48(%rbp)
	movl	$-1, -52(%rbp)
	cmpq	$0, -48(%rbp)
	jne	LBB40_2
## BB#1:
	movq	__ZTId@GOTPCREL(%rip), %rax
	movq	%rax, %rdi
	callq	__ZN9TDataType7GetTypeERKSt9type_info
	movl	%eax, -52(%rbp)
LBB40_2:
	xorl	%eax, %eax
	movq	-64(%rbp), %rcx         ## 8-byte Reload
	movq	(%rcx), %rdx
	movq	1576(%rdx), %rdx
	movq	-24(%rbp), %rsi
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rcx
	movq	-48(%rbp), %r8
	movl	-52(%rbp), %r9d
	movq	-64(%rbp), %r10         ## 8-byte Reload
	movq	%rdi, -72(%rbp)         ## 8-byte Spill
	movq	%r10, %rdi
	movq	-72(%rbp), %r11         ## 8-byte Reload
	movq	%rdx, -80(%rbp)         ## 8-byte Spill
	movq	%r11, %rdx
	movl	$0, (%rsp)
	movq	-80(%rbp), %rbx         ## 8-byte Reload
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	callq	*%rbx
	addq	$88, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp182:
	.cfi_def_cfa_offset 16
Ltmp183:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp184:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactoryC1Ev
	.align	4, 0x90
__ZN3fid10FidFactoryC1Ev:               ## @_ZN3fid10FidFactoryC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp185:
	.cfi_def_cfa_offset 16
Ltmp186:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp187:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN3fid10FidFactoryC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN3fid10FidFactoryD2Ev
	.align	4, 0x90
__ZN3fid10FidFactoryD2Ev:               ## @_ZN3fid10FidFactoryD2Ev
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin43:
	.cfi_lsda 16, Lexception43
## BB#0:
	pushq	%rbp
Ltmp191:
	.cfi_def_cfa_offset 16
Ltmp192:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp193:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
	movq	200(%rdi), %rdi
	movq	(%rdi), %rcx
	movq	552(%rcx), %rcx
Ltmp188:
	leaq	L_.str24(%rip), %rsi
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	callq	*%rcx
Ltmp189:
	jmp	LBB43_1
LBB43_1:
	movq	-32(%rbp), %rax         ## 8-byte Reload
	movq	200(%rax), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -40(%rbp)         ## 8-byte Spill
	je	LBB43_3
## BB#2:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	movq	(%rax), %rcx
	movq	%rax, %rdi
	callq	*16(%rcx)
LBB43_3:
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$216, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$160, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$136, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$112, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$88, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$64, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$40, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	addq	$48, %rsp
	popq	%rbp
	retq
LBB43_4:
Ltmp190:
	movl	%edx, %ecx
	movq	%rax, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$216, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$160, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$136, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$112, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$88, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$64, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$40, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
## BB#5:
	movq	-16(%rbp), %rdi
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end43:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table43:
Lexception43:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\242\200\200"          ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	26                      ## Call site table length
Lset23 = Ltmp188-Leh_func_begin43       ## >> Call Site 1 <<
	.long	Lset23
Lset24 = Ltmp189-Ltmp188                ##   Call between Ltmp188 and Ltmp189
	.long	Lset24
Lset25 = Ltmp190-Leh_func_begin43       ##     jumps to Ltmp190
	.long	Lset25
	.byte	1                       ##   On action: 1
Lset26 = Ltmp189-Leh_func_begin43       ## >> Call Site 2 <<
	.long	Lset26
Lset27 = Leh_func_end43-Ltmp189         ##   Call between Ltmp189 and Leh_func_end43
	.long	Lset27
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.private_extern	___clang_call_terminate
	.globl	___clang_call_terminate
	.weak_def_can_be_hidden	___clang_call_terminate
	.align	4, 0x90
___clang_call_terminate:                ## @__clang_call_terminate
## BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	callq	___cxa_begin_catch
	movq	%rax, -8(%rbp)          ## 8-byte Spill
	callq	__ZSt9terminatev

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactoryD1Ev
	.align	4, 0x90
__ZN3fid10FidFactoryD1Ev:               ## @_ZN3fid10FidFactoryD1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp194:
	.cfi_def_cfa_offset 16
Ltmp195:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp196:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN3fid10FidFactoryD2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI46_0:
	.quad	4607182418800017408     ## double 1
LCPI46_1:
	.quad	4618760256179416344     ## double 6.2831853071795862
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactory8IdealFidERNSt3__16vectorIdNS1_9allocatorIdEEEES6_bb
	.align	4, 0x90
__ZN3fid10FidFactory8IdealFidERNSt3__16vectorIdNS1_9allocatorIdEEEES6_bb: ## @_ZN3fid10FidFactory8IdealFidERNSt3__16vectorIdNS1_9allocatorIdEEEES6_bb
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp197:
	.cfi_def_cfa_offset 16
Ltmp198:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp199:
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$800, %rsp              ## imm = 0x320
Ltmp200:
	.cfi_offset %rbx, -32
Ltmp201:
	.cfi_offset %r14, -24
	movb	%r8b, %al
	movb	%cl, %r9b
	movq	%rdi, -656(%rbp)
	movq	%rsi, -664(%rbp)
	movq	%rdx, -672(%rbp)
	andb	$1, %r9b
	movb	%r9b, -673(%rbp)
	andb	$1, %al
	movb	%al, -674(%rbp)
	movq	-664(%rbp), %rdi
	movq	-672(%rbp), %rdx
	movq	%rdx, -648(%rbp)
	movq	-648(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	(%rdx), %rdx
	subq	%rdx, %rsi
	sarq	$3, %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE7reserveEm
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	-664(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm
	leaq	-608(%rbp), %rdx
	movq	__ZN3fid3sim8baselineE@GOTPCREL(%rip), %rsi
	movq	__ZN3fid3sim9amplitudeE@GOTPCREL(%rip), %rdi
	movsd	LCPI46_0(%rip), %xmm0
	movq	__ZN3fid3sim7gamma_1E@GOTPCREL(%rip), %r10
	movq	__ZN3fid3sim11mixdown_phiE@GOTPCREL(%rip), %r11
	movsd	LCPI46_1(%rip), %xmm1
	movq	__ZN3fid3sim8freq_refE@GOTPCREL(%rip), %rbx
	movq	__ZN3fid3sim11freq_larmorE@GOTPCREL(%rip), %r14
	movsd	(%r14), %xmm2
	subsd	(%rbx), %xmm2
	mulsd	%xmm2, %xmm1
	movsd	%xmm1, -696(%rbp)
	movsd	(%r11), %xmm1
	movsd	%xmm1, -704(%rbp)
	divsd	(%r10), %xmm0
	movsd	%xmm0, -712(%rbp)
	movsd	(%rdi), %xmm0
	movsd	%xmm0, -720(%rbp)
	movsd	(%rsi), %xmm0
	movsd	%xmm0, -728(%rbp)
	movq	-672(%rbp), %rsi
	movq	%rsi, -640(%rbp)
	movq	-640(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rsi, -616(%rbp)
	movq	%rdi, -624(%rbp)
	movq	-624(%rbp), %rsi
	movq	%rdx, -592(%rbp)
	movq	%rsi, -600(%rbp)
	movq	-592(%rbp), %rdx
	movq	-600(%rbp), %rsi
	movq	%rdx, -576(%rbp)
	movq	%rsi, -584(%rbp)
	movq	-576(%rbp), %rdx
	movq	-584(%rbp), %rsi
	movq	%rsi, (%rdx)
	movq	-608(%rbp), %rdx
	movq	%rdx, -632(%rbp)
	movq	-632(%rbp), %rdx
	movq	%rdx, -736(%rbp)
LBB46_1:                                ## =>This Inner Loop Header: Depth=1
	leaq	-744(%rbp), %rax
	leaq	-736(%rbp), %rcx
	leaq	-536(%rbp), %rdx
	movq	-672(%rbp), %rsi
	movq	%rsi, -568(%rbp)
	movq	-568(%rbp), %rsi
	movq	8(%rsi), %rdi
	movq	%rsi, -544(%rbp)
	movq	%rdi, -552(%rbp)
	movq	-552(%rbp), %rsi
	movq	%rdx, -520(%rbp)
	movq	%rsi, -528(%rbp)
	movq	-520(%rbp), %rdx
	movq	-528(%rbp), %rsi
	movq	%rdx, -504(%rbp)
	movq	%rsi, -512(%rbp)
	movq	-504(%rbp), %rdx
	movq	-512(%rbp), %rsi
	movq	%rsi, (%rdx)
	movq	-536(%rbp), %rdx
	movq	%rdx, -560(%rbp)
	movq	-560(%rbp), %rdx
	movq	%rdx, -744(%rbp)
	movq	%rcx, -288(%rbp)
	movq	%rax, -296(%rbp)
	movq	-288(%rbp), %rax
	movq	-296(%rbp), %rcx
	movq	%rax, -272(%rbp)
	movq	%rcx, -280(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	-280(%rbp), %rcx
	movq	%rcx, -256(%rbp)
	movq	-256(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%r8b
	xorb	$1, %r8b
	testb	$1, %r8b
	jne	LBB46_2
	jmp	LBB46_17
LBB46_2:                                ##   in Loop: Header=BB46_1 Depth=1
	movq	__ZN3fid3sim7t_pulseE@GOTPCREL(%rip), %rax
	leaq	-736(%rbp), %rcx
	movq	%rcx, -248(%rbp)
	movq	-248(%rbp), %rcx
	movq	(%rcx), %rcx
	movsd	(%rcx), %xmm0
	ucomisd	(%rax), %xmm0
	jb	LBB46_9
## BB#3:                                ##   in Loop: Header=BB46_1 Depth=1
	movq	__ZN3fid3sim7t_pulseE@GOTPCREL(%rip), %rax
	leaq	-736(%rbp), %rcx
	movsd	-720(%rbp), %xmm0
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	movsd	(%rcx), %xmm1
	subsd	(%rax), %xmm1
	movd	%xmm1, %rax
	movabsq	$-9223372036854775808, %rcx ## imm = 0x8000000000000000
	xorq	%rcx, %rax
	movd	%rax, %xmm1
	divsd	-712(%rbp), %xmm1
	movsd	%xmm0, -760(%rbp)       ## 8-byte Spill
	movaps	%xmm1, %xmm0
	callq	_exp
	leaq	-752(%rbp), %rax
	leaq	-736(%rbp), %rcx
	movsd	-760(%rbp), %xmm1       ## 8-byte Reload
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, -688(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	movsd	(%rcx), %xmm0
	mulsd	-696(%rbp), %xmm0
	addsd	-704(%rbp), %xmm0
	movq	%rax, -768(%rbp)        ## 8-byte Spill
	callq	_sin
	movsd	-688(%rbp), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, -688(%rbp)
	movq	-664(%rbp), %rax
	movsd	-688(%rbp), %xmm0
	addsd	-728(%rbp), %xmm0
	movsd	%xmm0, -752(%rbp)
	movq	%rax, -232(%rbp)
	movq	-768(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -240(%rbp)
	movq	-232(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	%rcx, %rsi
	movq	%rsi, -224(%rbp)
	movq	-224(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -216(%rbp)
	movq	-216(%rbp), %rsi
	movq	%rsi, -208(%rbp)
	movq	-208(%rbp), %rsi
	cmpq	(%rsi), %rdx
	movq	%rcx, -776(%rbp)        ## 8-byte Spill
	jae	LBB46_7
## BB#4:                                ##   in Loop: Header=BB46_1 Depth=1
	movl	$1, %eax
	movl	%eax, %esi
	movq	-776(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	movq	-776(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -200(%rbp)
	movq	-200(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -192(%rbp)
	movq	-192(%rbp), %rsi
	movq	%rsi, -184(%rbp)
	movq	-184(%rbp), %rsi
	movq	-776(%rbp), %rdi        ## 8-byte Reload
	movq	8(%rdi), %rcx
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	-240(%rbp), %rdx
	movq	%rdx, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rsi, -136(%rbp)
	movq	%rcx, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-136(%rbp), %rcx
	movq	-144(%rbp), %rdx
	movq	-152(%rbp), %rsi
	movq	%rsi, -128(%rbp)
	movq	-128(%rbp), %rsi
	movq	%rcx, -104(%rbp)
	movq	%rdx, -112(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-104(%rbp), %rcx
	movq	-112(%rbp), %rdx
	movq	-120(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	-88(%rbp), %rsi
	movq	%rcx, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-72(%rbp), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -784(%rbp)        ## 8-byte Spill
	je	LBB46_6
## BB#5:                                ##   in Loop: Header=BB46_1 Depth=1
	movq	-784(%rbp), %rax        ## 8-byte Reload
	movq	-80(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-784(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -792(%rbp)        ## 8-byte Spill
LBB46_6:                                ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJdEEEvRS2_PT_DpOT0_.exit.i
                                        ##   in Loop: Header=BB46_1 Depth=1
	movq	-776(%rbp), %rax        ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	LBB46_8
LBB46_7:                                ##   in Loop: Header=BB46_1 Depth=1
	movq	-240(%rbp), %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rsi
	movq	-776(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_
LBB46_8:                                ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE9push_backEOd.exit
                                        ##   in Loop: Header=BB46_1 Depth=1
	jmp	LBB46_15
LBB46_9:                                ##   in Loop: Header=BB46_1 Depth=1
	leaq	-728(%rbp), %rax
	movq	-664(%rbp), %rcx
	movq	%rcx, -480(%rbp)
	movq	%rax, -488(%rbp)
	movq	-480(%rbp), %rax
	movq	8(%rax), %rcx
	movq	%rax, %rdx
	movq	%rdx, -472(%rbp)
	movq	-472(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -464(%rbp)
	movq	-464(%rbp), %rdx
	movq	%rdx, -456(%rbp)
	movq	-456(%rbp), %rdx
	cmpq	(%rdx), %rcx
	movq	%rax, -800(%rbp)        ## 8-byte Spill
	je	LBB46_13
## BB#10:                               ##   in Loop: Header=BB46_1 Depth=1
	movl	$1, %eax
	movl	%eax, %esi
	movq	-800(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	movq	-800(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -448(%rbp)
	movq	-448(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -440(%rbp)
	movq	-440(%rbp), %rsi
	movq	%rsi, -432(%rbp)
	movq	-432(%rbp), %rsi
	movq	-800(%rbp), %rdi        ## 8-byte Reload
	movq	8(%rdi), %rcx
	movq	%rcx, -304(%rbp)
	movq	-304(%rbp), %rcx
	movq	-488(%rbp), %rdx
	movq	%rsi, -392(%rbp)
	movq	%rcx, -400(%rbp)
	movq	%rdx, -408(%rbp)
	movq	-392(%rbp), %rcx
	movq	-400(%rbp), %rdx
	movq	-408(%rbp), %rsi
	movq	%rsi, -384(%rbp)
	movq	-384(%rbp), %rsi
	movq	%rcx, -360(%rbp)
	movq	%rdx, -368(%rbp)
	movq	%rsi, -376(%rbp)
	movq	-360(%rbp), %rcx
	movq	-368(%rbp), %rdx
	movq	-376(%rbp), %rsi
	movq	%rsi, -344(%rbp)
	movq	-344(%rbp), %rsi
	movq	%rcx, -320(%rbp)
	movq	%rdx, -328(%rbp)
	movq	%rsi, -336(%rbp)
	movq	-328(%rbp), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -808(%rbp)        ## 8-byte Spill
	je	LBB46_12
## BB#11:                               ##   in Loop: Header=BB46_1 Depth=1
	movq	-808(%rbp), %rax        ## 8-byte Reload
	movq	-336(%rbp), %rcx
	movq	%rcx, -312(%rbp)
	movq	-312(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-808(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -816(%rbp)        ## 8-byte Spill
LBB46_12:                               ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJRKdEEEvRS2_PT_DpOT0_.exit.i
                                        ##   in Loop: Header=BB46_1 Depth=1
	movq	-800(%rbp), %rax        ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	LBB46_14
LBB46_13:                               ##   in Loop: Header=BB46_1 Depth=1
	movq	-488(%rbp), %rsi
	movq	-800(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_
LBB46_14:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE9push_backERKd.exit
                                        ##   in Loop: Header=BB46_1 Depth=1
	jmp	LBB46_15
LBB46_15:                               ##   in Loop: Header=BB46_1 Depth=1
	jmp	LBB46_16
LBB46_16:                               ##   in Loop: Header=BB46_1 Depth=1
	leaq	-736(%rbp), %rax
	movq	%rax, -496(%rbp)
	movq	-496(%rbp), %rax
	movq	(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, (%rax)
	jmp	LBB46_1
LBB46_17:
	testb	$1, -673(%rbp)
	je	LBB46_19
## BB#18:
	movq	__ZN3fid3sim3snrE@GOTPCREL(%rip), %rax
	movq	-664(%rbp), %rdi
	movsd	(%rax), %xmm0
	callq	__ZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_
LBB46_19:
	testb	$1, -674(%rbp)
	je	LBB46_21
## BB#20:
	movq	-664(%rbp), %rdi
	callq	__ZN3fid5floorIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEE
LBB46_21:
	addq	$800, %rsp              ## imm = 0x320
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE7reserveEm
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE7reserveEm
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE7reserveEm: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE7reserveEm
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin47:
	.cfi_lsda 16, Lexception47
## BB#0:
	pushq	%rbp
Ltmp205:
	.cfi_def_cfa_offset 16
Ltmp206:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp207:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -80(%rbp)
	movq	%rsi, -88(%rbp)
	movq	-80(%rbp), %rsi
	movq	-88(%rbp), %rdi
	movq	%rsi, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rax), %rax
	subq	%rax, %rcx
	sarq	$3, %rcx
	cmpq	%rcx, %rdi
	movq	%rsi, -160(%rbp)        ## 8-byte Spill
	jbe	LBB47_4
## BB#1:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -32(%rbp)
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	%rax, -16(%rbp)
	movq	%rax, -96(%rbp)
	movq	-88(%rbp), %rsi
	movq	-160(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -8(%rbp)
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	movq	-96(%rbp), %rcx
	leaq	-136(%rbp), %rdi
	movq	%rdi, -168(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EmmS3_
Ltmp202:
	movq	-160(%rbp), %rdi        ## 8-byte Reload
	movq	-168(%rbp), %rsi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE
Ltmp203:
	jmp	LBB47_2
LBB47_2:
	leaq	-136(%rbp), %rdi
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
	jmp	LBB47_4
LBB47_3:
Ltmp204:
	leaq	-136(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -144(%rbp)
	movl	%ecx, -148(%rbp)
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
	jmp	LBB47_5
LBB47_4:
	addq	$176, %rsp
	popq	%rbp
	retq
LBB47_5:
	movq	-144(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end47:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table47:
Lexception47:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset28 = Leh_func_begin47-Leh_func_begin47 ## >> Call Site 1 <<
	.long	Lset28
Lset29 = Ltmp202-Leh_func_begin47       ##   Call between Leh_func_begin47 and Ltmp202
	.long	Lset29
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset30 = Ltmp202-Leh_func_begin47       ## >> Call Site 2 <<
	.long	Lset30
Lset31 = Ltmp203-Ltmp202                ##   Call between Ltmp202 and Ltmp203
	.long	Lset31
Lset32 = Ltmp204-Leh_func_begin47       ##     jumps to Ltmp204
	.long	Lset32
	.byte	0                       ##   On action: cleanup
Lset33 = Ltmp203-Leh_func_begin47       ## >> Call Site 3 <<
	.long	Lset33
Lset34 = Leh_func_end47-Ltmp203         ##   Call between Ltmp203 and Leh_func_end47
	.long	Lset34
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI48_0:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__literal16,16byte_literals
	.align	4
LCPI48_1:
	.quad	9223372036854775807     ## double nan
	.quad	9223372036854775807     ## double nan
LCPI48_2:
	.long	1127219200              ## 0x43300000
	.long	1160773632              ## 0x45300000
	.long	0                       ## 0x0
	.long	0                       ## 0x0
LCPI48_3:
	.quad	4841369599423283200     ## double 4.503600e+15
	.quad	4985484787499139072     ## double 1.934281e+25
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_
	.weak_def_can_be_hidden	__ZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_
	.align	4, 0x90
__ZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_: ## @_ZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin48:
	.cfi_lsda 16, Lexception48
## BB#0:
	pushq	%rbp
Ltmp211:
	.cfi_def_cfa_offset 16
Ltmp212:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp213:
	.cfi_def_cfa_register %rbp
	subq	$832, %rsp              ## imm = 0x340
	movq	__ZGVZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen@GOTPCREL(%rip), %rax
	movq	%rdi, -648(%rbp)
	movsd	%xmm0, -656(%rbp)
	cmpb	$0, (%rax)
	jne	LBB48_8
## BB#1:
	movq	__ZGVZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen@GOTPCREL(%rip), %rdi
	callq	___cxa_guard_acquire
	cmpl	$0, %eax
	je	LBB48_8
## BB#2:
Ltmp208:
	callq	_clock
Ltmp209:
	movq	%rax, -800(%rbp)        ## 8-byte Spill
	jmp	LBB48_3
LBB48_3:
	movl	$2147483647, %eax       ## imm = 0x7FFFFFFF
	movq	__ZZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen@GOTPCREL(%rip), %rcx
	movq	-800(%rbp), %rdx        ## 8-byte Reload
	movl	%edx, %esi
	movq	%rcx, -632(%rbp)
	movl	%esi, -636(%rbp)
	movq	-632(%rbp), %rcx
	movl	-636(%rbp), %esi
	movq	%rcx, -616(%rbp)
	movl	%esi, -620(%rbp)
	movq	-616(%rbp), %rcx
	movl	-620(%rbp), %esi
	movq	%rcx, -592(%rbp)
	movl	%esi, -596(%rbp)
	movq	-592(%rbp), %rcx
	movl	-596(%rbp), %esi
	movq	%rcx, -576(%rbp)
	movl	%esi, -580(%rbp)
	movq	-576(%rbp), %rcx
	movl	-580(%rbp), %esi
	movl	%eax, -804(%rbp)        ## 4-byte Spill
	movl	%esi, %eax
	xorl	%edx, %edx
	movl	-804(%rbp), %esi        ## 4-byte Reload
	divl	%esi
	cmpl	$0, %edx
	movq	%rcx, -816(%rbp)        ## 8-byte Spill
	jne	LBB48_5
## BB#4:
	movl	$1, %eax
	movl	%eax, -820(%rbp)        ## 4-byte Spill
	jmp	LBB48_6
LBB48_5:
	movl	$2147483647, %eax       ## imm = 0x7FFFFFFF
	movl	-580(%rbp), %ecx
	movl	%eax, -824(%rbp)        ## 4-byte Spill
	movl	%ecx, %eax
	xorl	%edx, %edx
	movl	-824(%rbp), %ecx        ## 4-byte Reload
	divl	%ecx
	movl	%edx, -820(%rbp)        ## 4-byte Spill
LBB48_6:                                ## %_ZNSt3__126linear_congruential_engineIjLj48271ELj0ELj2147483647EEC1Ej.exit
	movl	-820(%rbp), %eax        ## 4-byte Reload
	movq	-816(%rbp), %rcx        ## 8-byte Reload
	movl	%eax, (%rcx)
## BB#7:
	movq	__ZGVZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen@GOTPCREL(%rip), %rdi
	callq	___cxa_guard_release
LBB48_8:
	leaq	-208(%rbp), %rax
	xorps	%xmm0, %xmm0
	movsd	LCPI48_0(%rip), %xmm1
	leaq	-704(%rbp), %rcx
	movq	%rcx, -528(%rbp)
	movsd	%xmm0, -536(%rbp)
	movsd	%xmm1, -544(%rbp)
	movq	-528(%rbp), %rcx
	movsd	-536(%rbp), %xmm1
	movsd	-544(%rbp), %xmm2
	movq	%rcx, -504(%rbp)
	movsd	%xmm1, -512(%rbp)
	movsd	%xmm2, -520(%rbp)
	movq	-504(%rbp), %rcx
	movsd	-512(%rbp), %xmm1
	movsd	-520(%rbp), %xmm2
	movq	%rcx, -480(%rbp)
	movsd	%xmm1, -488(%rbp)
	movsd	%xmm2, -496(%rbp)
	movq	-480(%rbp), %rdx
	movsd	-488(%rbp), %xmm1
	movsd	-496(%rbp), %xmm2
	movq	%rdx, -456(%rbp)
	movsd	%xmm1, -464(%rbp)
	movsd	%xmm2, -472(%rbp)
	movq	-456(%rbp), %rdx
	movsd	-464(%rbp), %xmm1
	movsd	%xmm1, (%rdx)
	movsd	-472(%rbp), %xmm1
	movsd	%xmm1, 8(%rdx)
	movb	$0, 24(%rcx)
	movsd	%xmm0, -712(%rbp)
	movsd	%xmm0, -720(%rbp)
	movsd	%xmm0, -728(%rbp)
	movq	-648(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	-240(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rcx, -216(%rbp)
	movq	%rdx, -224(%rbp)
	movq	-224(%rbp), %rcx
	movq	%rax, -192(%rbp)
	movq	%rcx, -200(%rbp)
	movq	-192(%rbp), %rax
	movq	-200(%rbp), %rcx
	movq	%rax, -176(%rbp)
	movq	%rcx, -184(%rbp)
	movq	-176(%rbp), %rax
	movq	-184(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-208(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movq	%rax, -736(%rbp)
LBB48_9:                                ## =>This Inner Loop Header: Depth=1
	leaq	-744(%rbp), %rax
	leaq	-736(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movq	-648(%rbp), %rsi
	movq	%rsi, -72(%rbp)
	movq	-72(%rbp), %rsi
	movq	8(%rsi), %rdi
	movq	%rsi, -48(%rbp)
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rsi
	movq	%rdx, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	%rdx, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	%rsi, (%rdx)
	movq	-40(%rbp), %rdx
	movq	%rdx, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	%rdx, -744(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%rax, -120(%rbp)
	movq	-112(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	%rax, -96(%rbp)
	movq	%rcx, -104(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%r8b
	xorb	$1, %r8b
	testb	$1, %r8b
	jne	LBB48_10
	jmp	LBB48_16
LBB48_10:                               ##   in Loop: Header=BB48_9 Depth=1
	leaq	-736(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movsd	(%rax), %xmm0
	ucomisd	-728(%rbp), %xmm0
	jbe	LBB48_13
## BB#11:                               ##   in Loop: Header=BB48_9 Depth=1
	leaq	-736(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movsd	(%rax), %xmm0
	movsd	%xmm0, -728(%rbp)
	jmp	LBB48_14
LBB48_12:
Ltmp210:
	movq	__ZGVZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen@GOTPCREL(%rip), %rdi
	movl	%edx, %ecx
	movq	%rax, -664(%rbp)
	movl	%ecx, -668(%rbp)
	callq	___cxa_guard_abort
	jmp	LBB48_24
LBB48_13:                               ##   in Loop: Header=BB48_9 Depth=1
	leaq	-736(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movsd	(%rax), %xmm0
	movsd	%xmm0, -720(%rbp)
LBB48_14:                               ##   in Loop: Header=BB48_9 Depth=1
	leaq	-736(%rbp), %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movsd	(%rax), %xmm0
	movsd	-712(%rbp), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, -712(%rbp)
## BB#15:                               ##   in Loop: Header=BB48_9 Depth=1
	leaq	-736(%rbp), %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movq	(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, (%rax)
	jmp	LBB48_9
LBB48_16:
	movq	-648(%rbp), %rax
	movq	%rax, -168(%rbp)
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	subq	%rcx, %rax
	sarq	$3, %rax
	movd	%rax, %xmm0
	movaps	LCPI48_2(%rip), %xmm1
	punpckldq	%xmm1, %xmm0    ## xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	movapd	LCPI48_3(%rip), %xmm1
	subpd	%xmm1, %xmm0
	haddpd	%xmm0, %xmm0
	movsd	-712(%rbp), %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, -712(%rbp)
	movsd	-712(%rbp), %xmm0
	movsd	-728(%rbp), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, -728(%rbp)
	movsd	-720(%rbp), %xmm0
	subsd	-712(%rbp), %xmm0
	movsd	%xmm0, -248(%rbp)
	movsd	-248(%rbp), %xmm0
	movsd	LCPI48_1(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -720(%rbp)
	movsd	-728(%rbp), %xmm0
	ucomisd	-720(%rbp), %xmm0
	jbe	LBB48_18
## BB#17:
	movsd	-728(%rbp), %xmm0
	movsd	%xmm0, -832(%rbp)       ## 8-byte Spill
	jmp	LBB48_19
LBB48_18:
	movsd	-720(%rbp), %xmm0
	movsd	%xmm0, -832(%rbp)       ## 8-byte Spill
LBB48_19:
	movsd	-832(%rbp), %xmm0       ## 8-byte Reload
	leaq	-360(%rbp), %rax
	leaq	-288(%rbp), %rcx
	movsd	%xmm0, -752(%rbp)
	movsd	-752(%rbp), %xmm0
	movsd	-656(%rbp), %xmm1
	sqrtsd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -760(%rbp)
	movq	-648(%rbp), %rdx
	movq	%rdx, -768(%rbp)
	movq	-768(%rbp), %rdx
	movq	%rdx, -320(%rbp)
	movq	-320(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	%rdx, -296(%rbp)
	movq	%rsi, -304(%rbp)
	movq	-304(%rbp), %rdx
	movq	%rcx, -272(%rbp)
	movq	%rdx, -280(%rbp)
	movq	-272(%rbp), %rcx
	movq	-280(%rbp), %rdx
	movq	%rcx, -256(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-256(%rbp), %rcx
	movq	-264(%rbp), %rdx
	movq	%rdx, (%rcx)
	movq	-288(%rbp), %rcx
	movq	%rcx, -312(%rbp)
	movq	-312(%rbp), %rcx
	movq	%rcx, -776(%rbp)
	movq	-768(%rbp), %rcx
	movq	%rcx, -392(%rbp)
	movq	-392(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	%rcx, -368(%rbp)
	movq	%rdx, -376(%rbp)
	movq	-376(%rbp), %rcx
	movq	%rax, -344(%rbp)
	movq	%rcx, -352(%rbp)
	movq	-344(%rbp), %rax
	movq	-352(%rbp), %rcx
	movq	%rax, -328(%rbp)
	movq	%rcx, -336(%rbp)
	movq	-328(%rbp), %rax
	movq	-336(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-360(%rbp), %rax
	movq	%rax, -384(%rbp)
	movq	-384(%rbp), %rax
	movq	%rax, -784(%rbp)
LBB48_20:                               ## =>This Inner Loop Header: Depth=1
	leaq	-784(%rbp), %rax
	leaq	-776(%rbp), %rcx
	movq	%rcx, -432(%rbp)
	movq	%rax, -440(%rbp)
	movq	-432(%rbp), %rax
	movq	-440(%rbp), %rcx
	movq	%rax, -416(%rbp)
	movq	%rcx, -424(%rbp)
	movq	-416(%rbp), %rax
	movq	%rax, -408(%rbp)
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	-424(%rbp), %rcx
	movq	%rcx, -400(%rbp)
	movq	-400(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%dl
	xorb	$1, %dl
	testb	$1, %dl
	jne	LBB48_21
	jmp	LBB48_23
LBB48_21:                               ##   in Loop: Header=BB48_20 Depth=1
	movq	__ZZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen@GOTPCREL(%rip), %rax
	leaq	-704(%rbp), %rcx
	leaq	-776(%rbp), %rdx
	movq	%rdx, -448(%rbp)
	movq	-448(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -792(%rbp)
	movq	%rcx, -552(%rbp)
	movq	%rax, -560(%rbp)
	movq	-552(%rbp), %rax
	movq	-560(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, %rdx
	callq	__ZNSt3__119normal_distributionIdEclINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEEdRT_RKNS1_10param_typeE
	mulsd	-760(%rbp), %xmm0
	movq	-792(%rbp), %rax
	movsd	(%rax), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rax)
## BB#22:                               ##   in Loop: Header=BB48_20 Depth=1
	leaq	-776(%rbp), %rax
	movq	%rax, -568(%rbp)
	movq	-568(%rbp), %rax
	movq	(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, (%rax)
	jmp	LBB48_20
LBB48_23:
	addq	$832, %rsp              ## imm = 0x340
	popq	%rbp
	retq
LBB48_24:
	movq	-664(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end48:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table48:
Lexception48:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\234"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	26                      ## Call site table length
Lset35 = Ltmp208-Leh_func_begin48       ## >> Call Site 1 <<
	.long	Lset35
Lset36 = Ltmp209-Ltmp208                ##   Call between Ltmp208 and Ltmp209
	.long	Lset36
Lset37 = Ltmp210-Leh_func_begin48       ##     jumps to Ltmp210
	.long	Lset37
	.byte	0                       ##   On action: cleanup
Lset38 = Ltmp209-Leh_func_begin48       ## >> Call Site 2 <<
	.long	Lset38
Lset39 = Leh_func_end48-Ltmp209         ##   Call between Ltmp209 and Leh_func_end48
	.long	Lset39
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN3fid5floorIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEE
	.weak_def_can_be_hidden	__ZN3fid5floorIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEE
	.align	4, 0x90
__ZN3fid5floorIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEE: ## @_ZN3fid5floorIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp214:
	.cfi_def_cfa_offset 16
Ltmp215:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp216:
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              ## imm = 0x100
	leaq	-184(%rbp), %rax
	movq	%rdi, -224(%rbp)
	movq	-224(%rbp), %rdi
	movq	%rdi, -216(%rbp)
	movq	-216(%rbp), %rdi
	movq	(%rdi), %rcx
	movq	%rdi, -192(%rbp)
	movq	%rcx, -200(%rbp)
	movq	-200(%rbp), %rcx
	movq	%rax, -168(%rbp)
	movq	%rcx, -176(%rbp)
	movq	-168(%rbp), %rax
	movq	-176(%rbp), %rcx
	movq	%rax, -152(%rbp)
	movq	%rcx, -160(%rbp)
	movq	-152(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-184(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movq	%rax, -232(%rbp)
LBB49_1:                                ## =>This Inner Loop Header: Depth=1
	leaq	-240(%rbp), %rax
	leaq	-232(%rbp), %rcx
	leaq	-40(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	%rsi, -72(%rbp)
	movq	-72(%rbp), %rsi
	movq	8(%rsi), %rdi
	movq	%rsi, -48(%rbp)
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rsi
	movq	%rdx, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	%rdx, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	%rsi, (%rdx)
	movq	-40(%rbp), %rdx
	movq	%rdx, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	%rdx, -240(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%rax, -120(%rbp)
	movq	-112(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	%rax, -96(%rbp)
	movq	%rcx, -104(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%r8b
	xorb	$1, %r8b
	testb	$1, %r8b
	jne	LBB49_2
	jmp	LBB49_4
LBB49_2:                                ##   in Loop: Header=BB49_1 Depth=1
	leaq	-232(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rcx
	movq	(%rcx), %rcx
	movsd	(%rcx), %xmm0
	movq	%rax, -248(%rbp)        ## 8-byte Spill
	callq	_floor
	movq	-248(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rcx
	movq	(%rcx), %rcx
	movsd	%xmm0, (%rcx)
## BB#3:                                ##   in Loop: Header=BB49_1 Depth=1
	leaq	-232(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, (%rax)
	jmp	LBB49_1
LBB49_4:
	addq	$256, %rsp              ## imm = 0x100
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactory11SimulateFidERNSt3__16vectorIdNS1_9allocatorIdEEEES6_bb
	.align	4, 0x90
__ZN3fid10FidFactory11SimulateFidERNSt3__16vectorIdNS1_9allocatorIdEEEES6_bb: ## @_ZN3fid10FidFactory11SimulateFidERNSt3__16vectorIdNS1_9allocatorIdEEEES6_bb
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin50:
	.cfi_lsda 16, Lexception50
## BB#0:
	pushq	%rbp
Ltmp220:
	.cfi_def_cfa_offset 16
Ltmp221:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp222:
	.cfi_def_cfa_register %rbp
	subq	$2320, %rsp             ## imm = 0x910
	movb	%r8b, %al
	movb	%cl, %r9b
	movq	__ZN3fid3sim11num_samplesE@GOTPCREL(%rip), %r10
	movq	%rdi, -1760(%rbp)
	movq	%rsi, -1768(%rbp)
	movq	%rdx, -1776(%rbp)
	andb	$1, %r9b
	movb	%r9b, -1777(%rbp)
	andb	$1, %al
	movb	%al, -1778(%rbp)
	movq	-1760(%rbp), %rdx
	movq	-1776(%rbp), %rdi
	movslq	(%r10), %rsi
	movq	%rdx, -2176(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE7reserveEm
	movq	__ZN3fid3sim11num_samplesE@GOTPCREL(%rip), %rdx
	movq	-1768(%rbp), %rdi
	movslq	(%rdx), %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE7reserveEm
	movq	__ZN3fid3sim6spin_0E@GOTPCREL(%rip), %rdx
	movq	-2176(%rbp), %rsi       ## 8-byte Reload
	addq	$40, %rsi
	movq	%rsi, -1744(%rbp)
	movq	%rdx, -1752(%rbp)
	movq	-1744(%rbp), %rdx
	cmpq	-1752(%rbp), %rdx
	movq	%rdx, -2184(%rbp)       ## 8-byte Spill
	je	LBB50_2
## BB#1:
	movq	-2184(%rbp), %rax       ## 8-byte Reload
	movq	-1752(%rbp), %rcx
	movq	%rax, -1720(%rbp)
	movq	%rcx, -1728(%rbp)
	movq	-1720(%rbp), %rax
	movq	-1728(%rbp), %rcx
	movq	%rax, -1704(%rbp)
	movq	%rcx, -1712(%rbp)
	movq	-1752(%rbp), %rax
	movq	(%rax), %rsi
	movq	-1752(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-2184(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_
LBB50_2:                                ## %_ZNSt3__16vectorIdNS_9allocatorIdEEEaSERKS3_.exit
	leaq	-2032(%rbp), %rdi
	leaq	-2040(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKS8_
	leaq	__ZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_d(%rip), %rsi
	movq	%rsi, -2080(%rbp)
	movq	$0, -2072(%rbp)
	movq	-2176(%rbp), %rsi       ## 8-byte Reload
	movq	%rsi, -1696(%rbp)
	leaq	-1688(%rbp), %rdi
	movq	%rdi, -1672(%rbp)
	movq	%rsi, -1680(%rbp)
	movq	-1672(%rbp), %rdi
	movq	%rdi, -1656(%rbp)
	movq	%rsi, -1664(%rbp)
	movq	-1656(%rbp), %rdi
	movq	%rsi, -1648(%rbp)
	movq	%rsi, (%rdi)
	movq	-1688(%rbp), %rdi
	movq	%rdi, -2088(%rbp)
	leaq	-2080(%rbp), %rdi
	movq	%rdi, -1608(%rbp)
	leaq	-2088(%rbp), %rdi
	movq	%rdi, -1616(%rbp)
	movq	__ZNSt3__112placeholders2_1E@GOTPCREL(%rip), %rdi
	movq	%rdi, -1624(%rbp)
	movq	__ZNSt3__112placeholders2_2E@GOTPCREL(%rip), %rdi
	movq	%rdi, -1632(%rbp)
	movq	__ZNSt3__112placeholders2_3E@GOTPCREL(%rip), %rdi
	movq	%rdi, -1640(%rbp)
	movq	-1608(%rbp), %rdi
	movq	%rdi, -1600(%rbp)
	movq	-1616(%rbp), %rax
	movq	%rax, -1016(%rbp)
	movq	-1624(%rbp), %rcx
	movq	%rcx, -1024(%rbp)
	movq	-1632(%rbp), %rdx
	movq	%rdx, -1032(%rbp)
	movq	-1640(%rbp), %r8
	movq	%r8, -1040(%rbp)
	leaq	-2064(%rbp), %r9
	movq	%r9, -1552(%rbp)
	movq	%rdi, -1560(%rbp)
	movq	%rax, -1568(%rbp)
	movq	%rcx, -1576(%rbp)
	movq	%rdx, -1584(%rbp)
	movq	%r8, -1592(%rbp)
	movq	-1552(%rbp), %rax
	movq	-1560(%rbp), %rcx
	movq	-1568(%rbp), %rdx
	movq	-1576(%rbp), %rdi
	movq	-1584(%rbp), %r9
	movq	%rax, -1504(%rbp)
	movq	%rcx, -1512(%rbp)
	movq	%rdx, -1520(%rbp)
	movq	%rdi, -1528(%rbp)
	movq	%r9, -1536(%rbp)
	movq	%r8, -1544(%rbp)
	movq	-1504(%rbp), %rax
	movq	-1512(%rbp), %rcx
	movq	%rcx, -1496(%rbp)
	movq	(%rcx), %rdx
	movq	8(%rcx), %rcx
	movq	%rcx, 8(%rax)
	movq	%rdx, (%rax)
	addq	$16, %rax
	movq	-1520(%rbp), %rcx
	movq	%rcx, -1048(%rbp)
	movq	-1048(%rbp), %rcx
	movq	-1528(%rbp), %rdx
	movq	%rdx, -1056(%rbp)
	movq	-1056(%rbp), %rdx
	movq	-1536(%rbp), %rdi
	movq	%rdi, -1064(%rbp)
	movq	-1064(%rbp), %rdi
	movq	-1544(%rbp), %r8
	movq	%r8, -1072(%rbp)
	movq	-1072(%rbp), %r8
	movq	%rax, -1456(%rbp)
	movq	%rcx, -1464(%rbp)
	movq	%rdx, -1472(%rbp)
	movq	%rdi, -1480(%rbp)
	movq	%r8, -1488(%rbp)
	movq	-1456(%rbp), %rax
	movq	-1464(%rbp), %rcx
	movq	-1472(%rbp), %rdx
	movq	-1480(%rbp), %rdi
	movq	-1488(%rbp), %r8
	movq	%rax, -1384(%rbp)
	movq	%rcx, -1392(%rbp)
	movq	%rdx, -1400(%rbp)
	movq	%rdi, -1408(%rbp)
	movq	%r8, -1416(%rbp)
	movq	-1384(%rbp), %rax
	movq	-1392(%rbp), %rcx
	movq	%rcx, -1376(%rbp)
	movq	-1376(%rbp), %rcx
	movq	-1400(%rbp), %rdx
	movq	%rdx, -1080(%rbp)
	movq	-1080(%rbp), %rdx
	movq	-1408(%rbp), %rdi
	movq	%rdi, -1088(%rbp)
	movq	-1088(%rbp), %rdi
	movq	-1416(%rbp), %r8
	movq	%r8, -1096(%rbp)
	movq	-1096(%rbp), %r8
	movq	%rax, -1336(%rbp)
	movq	%rcx, -1344(%rbp)
	movq	%rdx, -1352(%rbp)
	movq	%rdi, -1360(%rbp)
	movq	%r8, -1368(%rbp)
	movq	-1336(%rbp), %rax
	movq	-1344(%rbp), %rcx
	movq	-1352(%rbp), %rdx
	movq	-1360(%rbp), %rdi
	movq	-1368(%rbp), %r8
	movq	%rax, -1264(%rbp)
	movq	%rcx, -1272(%rbp)
	movq	%rdx, -1280(%rbp)
	movq	%rdi, -1288(%rbp)
	movq	%r8, -1296(%rbp)
	movq	-1264(%rbp), %rax
	movq	%rax, %rcx
	movq	-1272(%rbp), %rdx
	movq	%rdx, -1224(%rbp)
	movq	-1224(%rbp), %rdx
	movq	%rcx, -1112(%rbp)
	movq	%rdx, -1120(%rbp)
	movq	-1112(%rbp), %rcx
	movq	-1120(%rbp), %rdx
	movq	%rdx, -1104(%rbp)
	movq	-1104(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, (%rcx)
	movq	%rax, %rcx
	movq	-1280(%rbp), %rdx
	movq	%rdx, -1128(%rbp)
	movq	-1128(%rbp), %rdx
	movq	%rcx, -1144(%rbp)
	movq	%rdx, -1152(%rbp)
	movq	-1152(%rbp), %rcx
	movq	%rcx, -1136(%rbp)
	movq	%rax, %rcx
	movq	-1288(%rbp), %rdx
	movq	%rdx, -1160(%rbp)
	movq	-1160(%rbp), %rdx
	movq	%rcx, -1176(%rbp)
	movq	%rdx, -1184(%rbp)
	movq	-1184(%rbp), %rcx
	movq	%rcx, -1168(%rbp)
	movq	-1296(%rbp), %rcx
	movq	%rcx, -1192(%rbp)
	movq	-1192(%rbp), %rcx
	movq	%rax, -1208(%rbp)
	movq	%rcx, -1216(%rbp)
	movq	-1216(%rbp), %rax
	movq	%rax, -1200(%rbp)
## BB#3:
	movq	-2176(%rbp), %rax       ## 8-byte Reload
	addq	$40, %rax
	movq	-2176(%rbp), %rcx       ## 8-byte Reload
	movsd	(%rcx), %xmm0
	movsd	8(%rcx), %xmm1
	movsd	16(%rcx), %xmm2
	leaq	__ZN3fid10FidFactory7PrinterERKNSt3__16vectorIdNS1_9allocatorIdEEEEd(%rip), %rdx
	movq	%rdx, -2144(%rbp)
	movq	$0, -2136(%rbp)
	movq	%rcx, -1008(%rbp)
	leaq	-1000(%rbp), %rdx
	movq	%rdx, -984(%rbp)
	movq	%rcx, -992(%rbp)
	movq	-984(%rbp), %rdx
	movq	%rdx, -968(%rbp)
	movq	%rcx, -976(%rbp)
	movq	-968(%rbp), %rdx
	movq	%rcx, -960(%rbp)
	movq	%rcx, (%rdx)
	movq	-1000(%rbp), %rdx
	movq	%rdx, -2152(%rbp)
	leaq	-2144(%rbp), %rdx
	movq	%rdx, -928(%rbp)
	leaq	-2152(%rbp), %rdx
	movq	%rdx, -936(%rbp)
	movq	__ZNSt3__112placeholders2_1E@GOTPCREL(%rip), %rdx
	movq	%rdx, -944(%rbp)
	movq	__ZNSt3__112placeholders2_2E@GOTPCREL(%rip), %rdx
	movq	%rdx, -952(%rbp)
	movq	-928(%rbp), %rdx
	movq	%rdx, -920(%rbp)
	movq	-936(%rbp), %rsi
	movq	%rsi, -440(%rbp)
	movq	-944(%rbp), %rdi
	movq	%rdi, -448(%rbp)
	movq	-952(%rbp), %r8
	movq	%r8, -456(%rbp)
	leaq	-2128(%rbp), %r9
	movq	%r9, -880(%rbp)
	movq	%rdx, -888(%rbp)
	movq	%rsi, -896(%rbp)
	movq	%rdi, -904(%rbp)
	movq	%r8, -912(%rbp)
	movq	-880(%rbp), %rdx
	movq	-888(%rbp), %rsi
	movq	-896(%rbp), %rdi
	movq	-904(%rbp), %r9
	movq	%rdx, -840(%rbp)
	movq	%rsi, -848(%rbp)
	movq	%rdi, -856(%rbp)
	movq	%r9, -864(%rbp)
	movq	%r8, -872(%rbp)
	movq	-840(%rbp), %rdx
	movq	-848(%rbp), %rsi
	movq	%rsi, -832(%rbp)
	movq	(%rsi), %rdi
	movq	8(%rsi), %rsi
	movq	%rsi, 8(%rdx)
	movq	%rdi, (%rdx)
	addq	$16, %rdx
	movq	-856(%rbp), %rsi
	movq	%rsi, -464(%rbp)
	movq	-464(%rbp), %rsi
	movq	-864(%rbp), %rdi
	movq	%rdi, -472(%rbp)
	movq	-472(%rbp), %rdi
	movq	-872(%rbp), %r8
	movq	%r8, -480(%rbp)
	movq	-480(%rbp), %r8
	movq	%rdx, -800(%rbp)
	movq	%rsi, -808(%rbp)
	movq	%rdi, -816(%rbp)
	movq	%r8, -824(%rbp)
	movq	-800(%rbp), %rdx
	movq	-808(%rbp), %rsi
	movq	-816(%rbp), %rdi
	movq	-824(%rbp), %r8
	movq	%rdx, -736(%rbp)
	movq	%rsi, -744(%rbp)
	movq	%rdi, -752(%rbp)
	movq	%r8, -760(%rbp)
	movq	-736(%rbp), %rdx
	movq	-744(%rbp), %rsi
	movq	%rsi, -728(%rbp)
	movq	-728(%rbp), %rsi
	movq	-752(%rbp), %rdi
	movq	%rdi, -488(%rbp)
	movq	-488(%rbp), %rdi
	movq	-760(%rbp), %r8
	movq	%r8, -496(%rbp)
	movq	-496(%rbp), %r8
	movq	%rdx, -696(%rbp)
	movq	%rsi, -704(%rbp)
	movq	%rdi, -712(%rbp)
	movq	%r8, -720(%rbp)
	movq	-696(%rbp), %rdx
	movq	-704(%rbp), %rsi
	movq	-712(%rbp), %rdi
	movq	-720(%rbp), %r8
	movq	%rdx, -632(%rbp)
	movq	%rsi, -640(%rbp)
	movq	%rdi, -648(%rbp)
	movq	%r8, -656(%rbp)
	movq	-632(%rbp), %rdx
	movq	%rdx, %rsi
	movq	-640(%rbp), %rdi
	movq	%rdi, -592(%rbp)
	movq	-592(%rbp), %rdi
	movq	%rsi, -512(%rbp)
	movq	%rdi, -520(%rbp)
	movq	-512(%rbp), %rsi
	movq	-520(%rbp), %rdi
	movq	%rdi, -504(%rbp)
	movq	-504(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, (%rsi)
	movq	%rdx, %rsi
	movq	-648(%rbp), %rdi
	movq	%rdi, -528(%rbp)
	movq	-528(%rbp), %rdi
	movq	%rsi, -544(%rbp)
	movq	%rdi, -552(%rbp)
	movq	-552(%rbp), %rsi
	movq	%rsi, -536(%rbp)
	movq	-656(%rbp), %rsi
	movq	%rsi, -560(%rbp)
	movq	-560(%rbp), %rsi
	movq	%rdx, -576(%rbp)
	movq	%rsi, -584(%rbp)
	movq	-584(%rbp), %rdx
	movq	%rdx, -568(%rbp)
	movq	%rax, -2192(%rbp)       ## 8-byte Spill
	movsd	%xmm0, -2200(%rbp)      ## 8-byte Spill
	movsd	%xmm1, -2208(%rbp)      ## 8-byte Spill
	movsd	%xmm2, -2216(%rbp)      ## 8-byte Spill
## BB#4:
Ltmp217:
	movq	-2112(%rbp), %rax
	movq	%rsp, %rcx
	movq	%rax, 40(%rcx)
	movq	-2128(%rbp), %rax
	movq	-2120(%rbp), %rdx
	movq	%rdx, 32(%rcx)
	movq	%rax, 24(%rcx)
	movq	-2048(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	-2064(%rbp), %rax
	movq	-2056(%rbp), %rdx
	movq	%rdx, 8(%rcx)
	movq	%rax, (%rcx)
	leaq	-2032(%rbp), %rdi
	movq	-2192(%rbp), %rsi       ## 8-byte Reload
	movsd	-2200(%rbp), %xmm0      ## 8-byte Reload
	movsd	-2208(%rbp), %xmm1      ## 8-byte Reload
	movsd	-2216(%rbp), %xmm2      ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES8_dNSD_IMSF_FvSH_dEJSM_SQ_SS_EEEEEmT_T0_RT1_T2_S13_S13_T3_
Ltmp218:
	movq	%rax, -2224(%rbp)       ## 8-byte Spill
	jmp	LBB50_5
LBB50_5:
	leaq	-2032(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED1Ev
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-1776(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-1768(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm
	movl	$0, -2156(%rbp)
LBB50_6:                                ## =>This Inner Loop Header: Depth=1
	movq	__ZN3fid3sim11num_samplesE@GOTPCREL(%rip), %rax
	movl	-2156(%rbp), %ecx
	cmpl	(%rax), %ecx
	jge	LBB50_20
## BB#7:                                ##   in Loop: Header=BB50_6 Depth=1
	movq	-1776(%rbp), %rax
	movq	-2176(%rbp), %rcx       ## 8-byte Reload
	addq	$88, %rcx
	movl	-2156(%rbp), %edx
	movq	-2176(%rbp), %rsi       ## 8-byte Reload
	imull	24(%rsi), %edx
	movslq	%edx, %rdi
	movq	%rcx, -216(%rbp)
	movq	%rdi, -224(%rbp)
	movq	-216(%rbp), %rcx
	movq	-224(%rbp), %rdi
	movq	(%rcx), %rcx
	shlq	$3, %rdi
	addq	%rdi, %rcx
	movq	%rax, -200(%rbp)
	movq	%rcx, -208(%rbp)
	movq	-200(%rbp), %rax
	movq	8(%rax), %rcx
	movq	%rax, %rdi
	movq	%rdi, -192(%rbp)
	movq	-192(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -184(%rbp)
	movq	-184(%rbp), %rdi
	movq	%rdi, -176(%rbp)
	movq	-176(%rbp), %rdi
	cmpq	(%rdi), %rcx
	movq	%rax, -2232(%rbp)       ## 8-byte Spill
	je	LBB50_11
## BB#8:                                ##   in Loop: Header=BB50_6 Depth=1
	movl	$1, %eax
	movl	%eax, %esi
	movq	-2232(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	movq	-2232(%rbp), %rsi       ## 8-byte Reload
	movq	%rsi, -168(%rbp)
	movq	-168(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -160(%rbp)
	movq	-160(%rbp), %rsi
	movq	%rsi, -152(%rbp)
	movq	-152(%rbp), %rsi
	movq	-2232(%rbp), %rdi       ## 8-byte Reload
	movq	8(%rdi), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	%rsi, -112(%rbp)
	movq	%rcx, -120(%rbp)
	movq	%rdx, -128(%rbp)
	movq	-112(%rbp), %rcx
	movq	-120(%rbp), %rdx
	movq	-128(%rbp), %rsi
	movq	%rsi, -104(%rbp)
	movq	-104(%rbp), %rsi
	movq	%rcx, -80(%rbp)
	movq	%rdx, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	-80(%rbp), %rcx
	movq	-88(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rsi
	movq	%rcx, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-48(%rbp), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -2240(%rbp)       ## 8-byte Spill
	je	LBB50_10
## BB#9:                                ##   in Loop: Header=BB50_6 Depth=1
	movq	-2240(%rbp), %rax       ## 8-byte Reload
	movq	-56(%rbp), %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-2240(%rbp), %rcx       ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -2248(%rbp)       ## 8-byte Spill
LBB50_10:                               ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJRKdEEEvRS2_PT_DpOT0_.exit.i
                                        ##   in Loop: Header=BB50_6 Depth=1
	movq	-2232(%rbp), %rax       ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	LBB50_12
LBB50_11:                               ##   in Loop: Header=BB50_6 Depth=1
	movq	-208(%rbp), %rsi
	movq	-2232(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_
LBB50_12:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE9push_backERKd.exit
                                        ##   in Loop: Header=BB50_6 Depth=1
	leaq	-2168(%rbp), %rax
	movq	__ZN3fid3sim8baselineE@GOTPCREL(%rip), %rcx
	movq	-1768(%rbp), %rdx
	movq	-2176(%rbp), %rsi       ## 8-byte Reload
	addq	$64, %rsi
	movl	-2156(%rbp), %edi
	movq	-2176(%rbp), %r8        ## 8-byte Reload
	imull	24(%r8), %edi
	movslq	%edi, %r9
	movq	%rsi, -8(%rbp)
	movq	%r9, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %r9
	movq	(%rsi), %rsi
	movsd	(%rsi,%r9,8), %xmm0
	addsd	(%rcx), %xmm0
	movsd	%xmm0, -2168(%rbp)
	movq	%rdx, -424(%rbp)
	movq	%rax, -432(%rbp)
	movq	-424(%rbp), %rax
	movq	8(%rax), %rcx
	movq	%rax, %rdx
	movq	%rdx, -416(%rbp)
	movq	-416(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -408(%rbp)
	movq	-408(%rbp), %rdx
	movq	%rdx, -400(%rbp)
	movq	-400(%rbp), %rdx
	cmpq	(%rdx), %rcx
	movq	%rax, -2256(%rbp)       ## 8-byte Spill
	jae	LBB50_16
## BB#13:                               ##   in Loop: Header=BB50_6 Depth=1
	movl	$1, %eax
	movl	%eax, %esi
	movq	-2256(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	movq	-2256(%rbp), %rsi       ## 8-byte Reload
	movq	%rsi, -392(%rbp)
	movq	-392(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -384(%rbp)
	movq	-384(%rbp), %rsi
	movq	%rsi, -376(%rbp)
	movq	-376(%rbp), %rsi
	movq	-2256(%rbp), %rdi       ## 8-byte Reload
	movq	8(%rdi), %rcx
	movq	%rcx, -232(%rbp)
	movq	-232(%rbp), %rcx
	movq	-432(%rbp), %rdx
	movq	%rdx, -240(%rbp)
	movq	-240(%rbp), %rdx
	movq	%rsi, -328(%rbp)
	movq	%rcx, -336(%rbp)
	movq	%rdx, -344(%rbp)
	movq	-328(%rbp), %rcx
	movq	-336(%rbp), %rdx
	movq	-344(%rbp), %rsi
	movq	%rsi, -320(%rbp)
	movq	-320(%rbp), %rsi
	movq	%rcx, -296(%rbp)
	movq	%rdx, -304(%rbp)
	movq	%rsi, -312(%rbp)
	movq	-296(%rbp), %rcx
	movq	-304(%rbp), %rdx
	movq	-312(%rbp), %rsi
	movq	%rsi, -280(%rbp)
	movq	-280(%rbp), %rsi
	movq	%rcx, -256(%rbp)
	movq	%rdx, -264(%rbp)
	movq	%rsi, -272(%rbp)
	movq	-264(%rbp), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -2264(%rbp)       ## 8-byte Spill
	je	LBB50_15
## BB#14:                               ##   in Loop: Header=BB50_6 Depth=1
	movq	-2264(%rbp), %rax       ## 8-byte Reload
	movq	-272(%rbp), %rcx
	movq	%rcx, -248(%rbp)
	movq	-248(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-2264(%rbp), %rcx       ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -2272(%rbp)       ## 8-byte Spill
LBB50_15:                               ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJdEEEvRS2_PT_DpOT0_.exit.i
                                        ##   in Loop: Header=BB50_6 Depth=1
	movq	-2256(%rbp), %rax       ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	LBB50_17
LBB50_16:                               ##   in Loop: Header=BB50_6 Depth=1
	movq	-432(%rbp), %rax
	movq	%rax, -368(%rbp)
	movq	-368(%rbp), %rsi
	movq	-2256(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_
LBB50_17:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE9push_backEOd.exit
                                        ##   in Loop: Header=BB50_6 Depth=1
	jmp	LBB50_18
LBB50_18:                               ##   in Loop: Header=BB50_6 Depth=1
	movl	-2156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2156(%rbp)
	jmp	LBB50_6
LBB50_19:
Ltmp219:
	leaq	-2032(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -2096(%rbp)
	movl	%ecx, -2100(%rbp)
	callq	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED1Ev
	jmp	LBB50_25
LBB50_20:
	testb	$1, -1777(%rbp)
	je	LBB50_22
## BB#21:
	movq	__ZN3fid3sim3snrE@GOTPCREL(%rip), %rax
	movq	-1768(%rbp), %rdi
	movsd	(%rax), %xmm0
	callq	__ZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_
LBB50_22:
	testb	$1, -1778(%rbp)
	je	LBB50_24
## BB#23:
	movq	-1768(%rbp), %rdi
	callq	__ZN3fid5floorIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEE
LBB50_24:
	addq	$2320, %rsp             ## imm = 0x910
	popq	%rbp
	retq
LBB50_25:
	movq	-2096(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end50:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table50:
Lexception50:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset40 = Leh_func_begin50-Leh_func_begin50 ## >> Call Site 1 <<
	.long	Lset40
Lset41 = Ltmp217-Leh_func_begin50       ##   Call between Leh_func_begin50 and Ltmp217
	.long	Lset41
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset42 = Ltmp217-Leh_func_begin50       ## >> Call Site 2 <<
	.long	Lset42
Lset43 = Ltmp218-Ltmp217                ##   Call between Ltmp217 and Ltmp218
	.long	Lset43
Lset44 = Ltmp219-Leh_func_begin50       ##     jumps to Ltmp219
	.long	Lset44
	.byte	0                       ##   On action: cleanup
Lset45 = Ltmp218-Leh_func_begin50       ## >> Call Site 3 <<
	.long	Lset45
Lset46 = Leh_func_end50-Ltmp218         ##   Call between Ltmp218 and Leh_func_end50
	.long	Lset46
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES8_dNSD_IMSF_FvSH_dEJSM_SQ_SS_EEEEEmT_T0_RT1_T2_S13_S13_T3_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES8_dNSD_IMSF_FvSH_dEJSM_SQ_SS_EEEEEmT_T0_RT1_T2_S13_S13_T3_
	.align	4, 0x90
__ZN5boost7numeric6odeint15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES8_dNSD_IMSF_FvSH_dEJSM_SQ_SS_EEEEEmT_T0_RT1_T2_S13_S13_T3_: ## @_ZN5boost7numeric6odeint15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES8_dNSD_IMSF_FvSH_dEJSM_SQ_SS_EEEEEmT_T0_RT1_T2_S13_S13_T3_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin51:
	.cfi_lsda 16, Lexception51
## BB#0:
	pushq	%rbp
Ltmp226:
	.cfi_def_cfa_offset 16
Ltmp227:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp228:
	.cfi_def_cfa_register %rbp
	subq	$448, %rsp              ## imm = 0x1C0
	leaq	40(%rbp), %rax
	leaq	16(%rbp), %rcx
	movq	%rsi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movsd	%xmm2, -32(%rbp)
	leaq	-280(%rbp), %rsi
	movq	%rdi, -360(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-360(%rbp), %rdx        ## 8-byte Reload
	movq	%rsi, -368(%rbp)        ## 8-byte Spill
	movq	%rdx, %rsi
	movq	%rax, -376(%rbp)        ## 8-byte Spill
	movq	%rcx, -384(%rbp)        ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKSB_
	movq	-384(%rbp), %rax        ## 8-byte Reload
	movq	16(%rax), %rcx
	movq	%rcx, -288(%rbp)
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	movq	%rdx, -296(%rbp)
	movq	%rcx, -304(%rbp)
	movq	-8(%rbp), %rsi
	movsd	-16(%rbp), %xmm0
	movsd	-24(%rbp), %xmm1
	movsd	-32(%rbp), %xmm2
	movq	-376(%rbp), %rcx        ## 8-byte Reload
	movq	16(%rcx), %rdx
	movq	%rdx, -312(%rbp)
	movq	(%rcx), %rdx
	movq	8(%rcx), %rdi
	movq	%rdi, -320(%rbp)
	movq	%rdx, -328(%rbp)
Ltmp223:
	movq	-312(%rbp), %rdx
	movq	%rsp, %rdi
	movq	%rdx, 40(%rdi)
	movq	-328(%rbp), %rdx
	movq	-320(%rbp), %r8
	movq	%r8, 32(%rdi)
	movq	%rdx, 24(%rdi)
	movq	-288(%rbp), %rdx
	movq	%rdx, 16(%rdi)
	movq	-304(%rbp), %rdx
	movq	-296(%rbp), %r8
	movq	%r8, 8(%rdi)
	movq	%rdx, (%rdi)
	movq	-368(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint6detail15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS5_9allocatorIdEEEEdS9_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS5_6__bindIMN3fid10FidFactoryEFvRKS9_RS9_dEJNS5_17reference_wrapperISG_EERNS5_12placeholders4__phILi1EEERNSP_ILi2EEERNSP_ILi3EEEEEES9_dNSE_IMSG_FvSI_dEJSN_SR_ST_EEEEEmT_T0_RT1_T2_S14_S14_T3_NS1_11stepper_tagE
Ltmp224:
	movq	%rax, -392(%rbp)        ## 8-byte Spill
	jmp	LBB51_1
LBB51_1:
	leaq	-280(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED1Ev
	movq	-392(%rbp), %rax        ## 8-byte Reload
	addq	$448, %rsp              ## imm = 0x1C0
	popq	%rbp
	retq
LBB51_2:
Ltmp225:
	leaq	-280(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -344(%rbp)
	movl	%ecx, -348(%rbp)
	callq	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED1Ev
## BB#3:
	movq	-344(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end51:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table51:
Lexception51:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset47 = Leh_func_begin51-Leh_func_begin51 ## >> Call Site 1 <<
	.long	Lset47
Lset48 = Ltmp223-Leh_func_begin51       ##   Call between Leh_func_begin51 and Ltmp223
	.long	Lset48
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset49 = Ltmp223-Leh_func_begin51       ## >> Call Site 2 <<
	.long	Lset49
Lset50 = Ltmp224-Ltmp223                ##   Call between Ltmp223 and Ltmp224
	.long	Lset50
Lset51 = Ltmp225-Leh_func_begin51       ##     jumps to Ltmp225
	.long	Lset51
	.byte	0                       ##   On action: cleanup
Lset52 = Ltmp224-Leh_func_begin51       ## >> Call Site 3 <<
	.long	Lset52
Lset53 = Leh_func_end51-Ltmp224         ##   Call between Ltmp224 and Leh_func_end51
	.long	Lset53
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKS8_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKS8_
	.align	4, 0x90
__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKS8_: ## @_ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp229:
	.cfi_def_cfa_offset 16
Ltmp230:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp231:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI53_0:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_d
	.align	4, 0x90
__ZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_d: ## @_ZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_d
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin53:
	.cfi_lsda 16, Lexception53
## BB#0:
	pushq	%rbp
Ltmp247:
	.cfi_def_cfa_offset 16
Ltmp248:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp249:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1144, %rsp             ## imm = 0x478
Ltmp250:
	.cfi_offset %rbx, -24
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	%rdi, -824(%rbp)
	movq	%rsi, -832(%rbp)
	movq	%rdx, -840(%rbp)
	movsd	%xmm0, -848(%rbp)
	movq	-824(%rbp), %rsi
	cmpb	$0, __ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b(%rip)
	movq	%rsi, -944(%rbp)        ## 8-byte Spill
	jne	LBB53_9
## BB#1:
	leaq	__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b(%rip), %rdi
	callq	___cxa_guard_acquire
	cmpl	$0, %eax
	je	LBB53_9
## BB#2:
	leaq	-768(%rbp), %rax
	leaq	-696(%rbp), %rcx
	leaq	-720(%rbp), %rdx
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b(%rip), %rsi
	leaq	-40(%rbp), %rdi
	xorl	%r8d, %r8d
	movl	$24, %r9d
	movl	%r9d, %r10d
	movq	%rdi, %r11
	movq	%rdi, -952(%rbp)        ## 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -960(%rbp)        ## 8-byte Spill
	movl	%r8d, %esi
	movq	%rdx, -968(%rbp)        ## 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, -976(%rbp)        ## 8-byte Spill
	movq	%rcx, -984(%rbp)        ## 8-byte Spill
	callq	_memset
	movq	-952(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -864(%rbp)
	movq	$3, -856(%rbp)
	movq	-864(%rbp), %rcx
	movq	-856(%rbp), %rdx
	movq	%rcx, -808(%rbp)
	movq	%rdx, -800(%rbp)
	movq	-960(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -816(%rbp)
	movq	-816(%rbp), %rdx
	movq	-808(%rbp), %rdi
	movq	-800(%rbp), %r10
	movq	%rdi, -768(%rbp)
	movq	%r10, -760(%rbp)
	movq	%rdx, -776(%rbp)
	movq	-776(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdi, -752(%rbp)
	movq	-752(%rbp), %rdi
	movq	%rdi, %r10
	movq	%r10, -744(%rbp)
	movq	$0, (%rdi)
	movq	$0, 8(%rdi)
	addq	$16, %rdi
	movq	%rdi, -728(%rbp)
	movq	$0, -736(%rbp)
	movq	-728(%rbp), %rdi
	movq	-736(%rbp), %r10
	movq	%rdi, -712(%rbp)
	movq	%r10, -720(%rbp)
	movq	-712(%rbp), %rdi
	movq	-968(%rbp), %r10        ## 8-byte Reload
	movq	%r10, -704(%rbp)
	movq	-704(%rbp), %r11
	movq	(%r11), %r11
	movq	%rdi, -688(%rbp)
	movq	%r11, -696(%rbp)
	movq	-688(%rbp), %rdi
	movq	%rdi, %r11
	movq	%r11, -680(%rbp)
	movq	-984(%rbp), %r11        ## 8-byte Reload
	movq	%r11, -672(%rbp)
	movq	-672(%rbp), %rbx
	movq	(%rbx), %rbx
	movq	%rbx, (%rdi)
	movq	-976(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -664(%rbp)
	movq	-664(%rbp), %rbx
	cmpq	$0, 8(%rbx)
	movq	%rdx, -992(%rbp)        ## 8-byte Spill
	jbe	LBB53_7
## BB#3:
	leaq	-768(%rbp), %rax
	movq	%rax, -656(%rbp)
	movq	-760(%rbp), %rsi
Ltmp232:
	movq	-992(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
Ltmp233:
	jmp	LBB53_4
LBB53_4:
	leaq	-768(%rbp), %rax
	movq	%rax, -640(%rbp)
	movq	-768(%rbp), %rsi
	movq	%rax, -648(%rbp)
	movq	-768(%rbp), %rax
	movq	-760(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rdx
Ltmp234:
	movq	-992(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_
Ltmp235:
	jmp	LBB53_5
LBB53_5:
	jmp	LBB53_7
LBB53_6:
Ltmp236:
	movl	%edx, %ecx
	movq	%rax, -784(%rbp)
	movl	%ecx, -788(%rbp)
	movq	-992(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	movq	-784(%rbp), %rax
	movl	-788(%rbp), %ecx
	movq	%rax, -1000(%rbp)       ## 8-byte Spill
	movl	%ecx, -1004(%rbp)       ## 4-byte Spill
	jmp	LBB53_31
LBB53_7:                                ## %_ZNSt3__16vectorIdNS_9allocatorIdEEEC1ESt16initializer_listIdE.exit
	jmp	LBB53_8
LBB53_8:
	movq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev@GOTPCREL(%rip), %rax
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b(%rip), %rcx
	movq	___dso_handle@GOTPCREL(%rip), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	___cxa_atexit
	leaq	__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b(%rip), %rdi
	movl	%eax, -1008(%rbp)       ## 4-byte Spill
	callq	___cxa_guard_release
LBB53_9:
	cmpb	$0, __ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1(%rip)
	jne	LBB53_18
## BB#10:
	leaq	__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1(%rip), %rdi
	callq	___cxa_guard_acquire
	cmpl	$0, %eax
	je	LBB53_18
## BB#11:
	leaq	-584(%rbp), %rax
	leaq	-512(%rbp), %rcx
	leaq	-536(%rbp), %rdx
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1(%rip), %rsi
	leaq	-64(%rbp), %rdi
	xorl	%r8d, %r8d
	movl	$24, %r9d
	movl	%r9d, %r10d
	movq	%rdi, %r11
	movq	%rdi, -1016(%rbp)       ## 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -1024(%rbp)       ## 8-byte Spill
	movl	%r8d, %esi
	movq	%rdx, -1032(%rbp)       ## 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, -1040(%rbp)       ## 8-byte Spill
	movq	%rcx, -1048(%rbp)       ## 8-byte Spill
	callq	_memset
	movq	-1016(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -896(%rbp)
	movq	$3, -888(%rbp)
	movq	-896(%rbp), %rcx
	movq	-888(%rbp), %rdx
	movq	%rcx, -624(%rbp)
	movq	%rdx, -616(%rbp)
	movq	-1024(%rbp), %rcx       ## 8-byte Reload
	movq	%rcx, -632(%rbp)
	movq	-632(%rbp), %rdx
	movq	-624(%rbp), %rdi
	movq	-616(%rbp), %r10
	movq	%rdi, -584(%rbp)
	movq	%r10, -576(%rbp)
	movq	%rdx, -592(%rbp)
	movq	-592(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdi, -568(%rbp)
	movq	-568(%rbp), %rdi
	movq	%rdi, %r10
	movq	%r10, -560(%rbp)
	movq	$0, (%rdi)
	movq	$0, 8(%rdi)
	addq	$16, %rdi
	movq	%rdi, -544(%rbp)
	movq	$0, -552(%rbp)
	movq	-544(%rbp), %rdi
	movq	-552(%rbp), %r10
	movq	%rdi, -528(%rbp)
	movq	%r10, -536(%rbp)
	movq	-528(%rbp), %rdi
	movq	-1032(%rbp), %r10       ## 8-byte Reload
	movq	%r10, -520(%rbp)
	movq	-520(%rbp), %r11
	movq	(%r11), %r11
	movq	%rdi, -504(%rbp)
	movq	%r11, -512(%rbp)
	movq	-504(%rbp), %rdi
	movq	%rdi, %r11
	movq	%r11, -496(%rbp)
	movq	-1048(%rbp), %r11       ## 8-byte Reload
	movq	%r11, -488(%rbp)
	movq	-488(%rbp), %rbx
	movq	(%rbx), %rbx
	movq	%rbx, (%rdi)
	movq	-1040(%rbp), %rdi       ## 8-byte Reload
	movq	%rdi, -480(%rbp)
	movq	-480(%rbp), %rbx
	cmpq	$0, 8(%rbx)
	movq	%rdx, -1056(%rbp)       ## 8-byte Spill
	jbe	LBB53_16
## BB#12:
	leaq	-584(%rbp), %rax
	movq	%rax, -472(%rbp)
	movq	-576(%rbp), %rsi
Ltmp237:
	movq	-1056(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
Ltmp238:
	jmp	LBB53_13
LBB53_13:
	leaq	-584(%rbp), %rax
	movq	%rax, -456(%rbp)
	movq	-584(%rbp), %rsi
	movq	%rax, -464(%rbp)
	movq	-584(%rbp), %rax
	movq	-576(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rdx
Ltmp239:
	movq	-1056(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_
Ltmp240:
	jmp	LBB53_14
LBB53_14:
	jmp	LBB53_16
LBB53_15:
Ltmp241:
	movl	%edx, %ecx
	movq	%rax, -600(%rbp)
	movl	%ecx, -604(%rbp)
	movq	-1056(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	movq	-600(%rbp), %rax
	movl	-604(%rbp), %ecx
	movq	%rax, -1064(%rbp)       ## 8-byte Spill
	movl	%ecx, -1068(%rbp)       ## 4-byte Spill
	jmp	LBB53_32
LBB53_16:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEEC1ESt16initializer_listIdE.exit5
	jmp	LBB53_17
LBB53_17:
	movq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev@GOTPCREL(%rip), %rax
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1(%rip), %rcx
	movq	___dso_handle@GOTPCREL(%rip), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	___cxa_atexit
	leaq	__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1(%rip), %rdi
	movl	%eax, -1072(%rbp)       ## 4-byte Spill
	callq	___cxa_guard_release
LBB53_18:
	cmpb	$0, __ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2(%rip)
	jne	LBB53_27
## BB#19:
	leaq	__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2(%rip), %rdi
	callq	___cxa_guard_acquire
	cmpl	$0, %eax
	je	LBB53_27
## BB#20:
	leaq	-400(%rbp), %rax
	leaq	-328(%rbp), %rcx
	leaq	-352(%rbp), %rdx
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2(%rip), %rsi
	leaq	-88(%rbp), %rdi
	xorl	%r8d, %r8d
	movl	$24, %r9d
	movl	%r9d, %r10d
	movq	%rdi, %r11
	movq	%rdi, -1080(%rbp)       ## 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -1088(%rbp)       ## 8-byte Spill
	movl	%r8d, %esi
	movq	%rdx, -1096(%rbp)       ## 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, -1104(%rbp)       ## 8-byte Spill
	movq	%rcx, -1112(%rbp)       ## 8-byte Spill
	callq	_memset
	movq	-1080(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -912(%rbp)
	movq	$3, -904(%rbp)
	movq	-912(%rbp), %rcx
	movq	-904(%rbp), %rdx
	movq	%rcx, -440(%rbp)
	movq	%rdx, -432(%rbp)
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	movq	%rcx, -448(%rbp)
	movq	-448(%rbp), %rdx
	movq	-440(%rbp), %rdi
	movq	-432(%rbp), %r10
	movq	%rdi, -400(%rbp)
	movq	%r10, -392(%rbp)
	movq	%rdx, -408(%rbp)
	movq	-408(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdi, -384(%rbp)
	movq	-384(%rbp), %rdi
	movq	%rdi, %r10
	movq	%r10, -376(%rbp)
	movq	$0, (%rdi)
	movq	$0, 8(%rdi)
	addq	$16, %rdi
	movq	%rdi, -360(%rbp)
	movq	$0, -368(%rbp)
	movq	-360(%rbp), %rdi
	movq	-368(%rbp), %r10
	movq	%rdi, -344(%rbp)
	movq	%r10, -352(%rbp)
	movq	-344(%rbp), %rdi
	movq	-1096(%rbp), %r10       ## 8-byte Reload
	movq	%r10, -336(%rbp)
	movq	-336(%rbp), %r11
	movq	(%r11), %r11
	movq	%rdi, -320(%rbp)
	movq	%r11, -328(%rbp)
	movq	-320(%rbp), %rdi
	movq	%rdi, %r11
	movq	%r11, -312(%rbp)
	movq	-1112(%rbp), %r11       ## 8-byte Reload
	movq	%r11, -304(%rbp)
	movq	-304(%rbp), %rbx
	movq	(%rbx), %rbx
	movq	%rbx, (%rdi)
	movq	-1104(%rbp), %rdi       ## 8-byte Reload
	movq	%rdi, -296(%rbp)
	movq	-296(%rbp), %rbx
	cmpq	$0, 8(%rbx)
	movq	%rdx, -1120(%rbp)       ## 8-byte Spill
	jbe	LBB53_25
## BB#21:
	leaq	-400(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-392(%rbp), %rsi
Ltmp242:
	movq	-1120(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
Ltmp243:
	jmp	LBB53_22
LBB53_22:
	leaq	-400(%rbp), %rax
	movq	%rax, -272(%rbp)
	movq	-400(%rbp), %rsi
	movq	%rax, -280(%rbp)
	movq	-400(%rbp), %rax
	movq	-392(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rdx
Ltmp244:
	movq	-1120(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_
Ltmp245:
	jmp	LBB53_23
LBB53_23:
	jmp	LBB53_25
LBB53_24:
Ltmp246:
	movl	%edx, %ecx
	movq	%rax, -416(%rbp)
	movl	%ecx, -420(%rbp)
	movq	-1120(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	movq	-416(%rbp), %rax
	movl	-420(%rbp), %ecx
	movq	%rax, -1128(%rbp)       ## 8-byte Spill
	movl	%ecx, -1132(%rbp)       ## 4-byte Spill
	jmp	LBB53_33
LBB53_25:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEEC1ESt16initializer_listIdE.exit10
	jmp	LBB53_26
LBB53_26:
	movq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev@GOTPCREL(%rip), %rax
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2(%rip), %rcx
	movq	___dso_handle@GOTPCREL(%rip), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	___cxa_atexit
	leaq	__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2(%rip), %rdi
	movl	%eax, -1136(%rbp)       ## 4-byte Spill
	callq	___cxa_guard_release
LBB53_27:
	leaq	-936(%rbp), %rdi
	leaq	-848(%rbp), %rdx
	movq	-944(%rbp), %rsi        ## 8-byte Reload
	callq	__ZN3fid10FidFactory6BfieldERKd
	leaq	-936(%rbp), %rdx
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b(%rip), %rsi
	movq	%rsi, -248(%rbp)
	movq	%rdx, -256(%rbp)
	movq	-248(%rbp), %rdi
	movq	-256(%rbp), %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE
	leaq	-936(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b(%rip), %rdi
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1(%rip), %rdx
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2(%rip), %rsi
	movsd	LCPI53_0(%rip), %xmm0
	movq	__ZN3fid3sim7gamma_1E@GOTPCREL(%rip), %rax
	movq	__ZN3fid3sim7gamma_2E@GOTPCREL(%rip), %rcx
	movsd	(%rcx), %xmm1
	movq	-832(%rbp), %r8
	movq	%r8, -232(%rbp)
	movq	$0, -240(%rbp)
	movq	-232(%rbp), %r8
	movq	-240(%rbp), %r9
	movq	(%r8), %r8
	mulsd	(%r8,%r9,8), %xmm1
	movq	%rsi, -216(%rbp)
	movq	$0, -224(%rbp)
	movq	-216(%rbp), %r8
	movq	-224(%rbp), %r9
	movq	(%r8), %r8
	movsd	%xmm1, (%r8,%r9,8)
	movsd	(%rcx), %xmm1
	movq	-832(%rbp), %rcx
	movq	%rcx, -200(%rbp)
	movq	$1, -208(%rbp)
	movq	-200(%rbp), %rcx
	movq	-208(%rbp), %r8
	movq	(%rcx), %rcx
	mulsd	(%rcx,%r8,8), %xmm1
	movq	%rsi, -184(%rbp)
	movq	$1, -192(%rbp)
	movq	-184(%rbp), %rcx
	movq	-192(%rbp), %r8
	movq	(%rcx), %rcx
	movsd	%xmm1, (%rcx,%r8,8)
	movsd	(%rax), %xmm1
	movq	-832(%rbp), %rax
	movq	%rax, -168(%rbp)
	movq	$2, -176(%rbp)
	movq	-168(%rbp), %rax
	movq	-176(%rbp), %rcx
	movq	(%rax), %rax
	movsd	(%rax,%rcx,8), %xmm2
	subsd	%xmm0, %xmm2
	mulsd	%xmm2, %xmm1
	movq	%rsi, -152(%rbp)
	movq	$2, -160(%rbp)
	movq	-152(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	(%rax), %rax
	movsd	%xmm1, (%rax,%rcx,8)
	movq	-832(%rbp), %rsi
	callq	__ZN3fid5crossIdEEvRKNSt3__16vectorIT_NS1_9allocatorIS3_EEEES8_RS6_
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1(%rip), %rdi
	leaq	__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2(%rip), %rsi
	movq	-840(%rbp), %rax
	movq	%rax, -1144(%rbp)       ## 8-byte Spill
	callq	__ZN3fidmiIdEERNSt3__16vectorIT_NS1_9allocatorIS3_EEEES7_S7_
	movq	-1144(%rbp), %rcx       ## 8-byte Reload
	movq	%rcx, -136(%rbp)
	movq	%rax, -144(%rbp)
	movq	-136(%rbp), %rax
	cmpq	-144(%rbp), %rax
	movq	%rax, -1152(%rbp)       ## 8-byte Spill
	je	LBB53_29
## BB#28:
	movq	-1152(%rbp), %rax       ## 8-byte Reload
	movq	-144(%rbp), %rcx
	movq	%rax, -112(%rbp)
	movq	%rcx, -120(%rbp)
	movq	-112(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	%rax, -96(%rbp)
	movq	%rcx, -104(%rbp)
	movq	-144(%rbp), %rax
	movq	(%rax), %rsi
	movq	-144(%rbp), %rax
	movq	8(%rax), %rdx
	movq	-1152(%rbp), %rdi       ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_
LBB53_29:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEEaSERKS3_.exit
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	LBB53_35
## BB#30:                               ## %SP_return
	addq	$1144, %rsp             ## imm = 0x478
	popq	%rbx
	popq	%rbp
	retq
LBB53_31:                               ## %.body
	leaq	__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b(%rip), %rdi
	movq	-1000(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -872(%rbp)
	movl	-1004(%rbp), %ecx       ## 4-byte Reload
	movl	%ecx, -876(%rbp)
	callq	___cxa_guard_abort
	jmp	LBB53_34
LBB53_32:                               ## %.body3
	leaq	__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1(%rip), %rdi
	movq	-1064(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -872(%rbp)
	movl	-1068(%rbp), %ecx       ## 4-byte Reload
	movl	%ecx, -876(%rbp)
	callq	___cxa_guard_abort
	jmp	LBB53_34
LBB53_33:                               ## %.body8
	leaq	__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2(%rip), %rdi
	movq	-1128(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -872(%rbp)
	movl	-1132(%rbp), %ecx       ## 4-byte Reload
	movl	%ecx, -876(%rbp)
	callq	___cxa_guard_abort
LBB53_34:
	movq	-872(%rbp), %rdi
	callq	__Unwind_Resume
LBB53_35:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc
Leh_func_end53:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table53:
Lexception53:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	93                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	91                      ## Call site table length
Lset54 = Leh_func_begin53-Leh_func_begin53 ## >> Call Site 1 <<
	.long	Lset54
Lset55 = Ltmp232-Leh_func_begin53       ##   Call between Leh_func_begin53 and Ltmp232
	.long	Lset55
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset56 = Ltmp232-Leh_func_begin53       ## >> Call Site 2 <<
	.long	Lset56
Lset57 = Ltmp235-Ltmp232                ##   Call between Ltmp232 and Ltmp235
	.long	Lset57
Lset58 = Ltmp236-Leh_func_begin53       ##     jumps to Ltmp236
	.long	Lset58
	.byte	0                       ##   On action: cleanup
Lset59 = Ltmp235-Leh_func_begin53       ## >> Call Site 3 <<
	.long	Lset59
Lset60 = Ltmp237-Ltmp235                ##   Call between Ltmp235 and Ltmp237
	.long	Lset60
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset61 = Ltmp237-Leh_func_begin53       ## >> Call Site 4 <<
	.long	Lset61
Lset62 = Ltmp240-Ltmp237                ##   Call between Ltmp237 and Ltmp240
	.long	Lset62
Lset63 = Ltmp241-Leh_func_begin53       ##     jumps to Ltmp241
	.long	Lset63
	.byte	0                       ##   On action: cleanup
Lset64 = Ltmp240-Leh_func_begin53       ## >> Call Site 5 <<
	.long	Lset64
Lset65 = Ltmp242-Ltmp240                ##   Call between Ltmp240 and Ltmp242
	.long	Lset65
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset66 = Ltmp242-Leh_func_begin53       ## >> Call Site 6 <<
	.long	Lset66
Lset67 = Ltmp245-Ltmp242                ##   Call between Ltmp242 and Ltmp245
	.long	Lset67
Lset68 = Ltmp246-Leh_func_begin53       ##     jumps to Ltmp246
	.long	Lset68
	.byte	0                       ##   On action: cleanup
Lset69 = Ltmp245-Leh_func_begin53       ## >> Call Site 7 <<
	.long	Lset69
Lset70 = Leh_func_end53-Ltmp245         ##   Call between Ltmp245 and Leh_func_end53
	.long	Lset70
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI54_0:
	.quad	4618760256179416344     ## double 6.2831853071795862
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactory7PrinterERKNSt3__16vectorIdNS1_9allocatorIdEEEEd
	.align	4, 0x90
__ZN3fid10FidFactory7PrinterERKNSt3__16vectorIdNS1_9allocatorIdEEEEd: ## @_ZN3fid10FidFactory7PrinterERKNSt3__16vectorIdNS1_9allocatorIdEEEEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp251:
	.cfi_def_cfa_offset 16
Ltmp252:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp253:
	.cfi_def_cfa_register %rbp
	subq	$448, %rsp              ## imm = 0x1C0
	movq	%rdi, -312(%rbp)
	movq	%rsi, -320(%rbp)
	movsd	%xmm0, -328(%rbp)
	movq	-312(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$136, %rdi
	movq	%rdi, -304(%rbp)
	movq	-304(%rbp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	cmpq	$0, %rax
	movq	%rsi, -400(%rbp)        ## 8-byte Spill
	jne	LBB54_11
## BB#1:
	movq	-400(%rbp), %rax        ## 8-byte Reload
	addq	$136, %rax
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	movslq	28(%rcx), %rsi
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE7reserveEm
	movsd	-328(%rbp), %xmm0
	movsd	%xmm0, -336(%rbp)
	movl	$0, -340(%rbp)
LBB54_2:                                ## =>This Inner Loop Header: Depth=1
	movl	-340(%rbp), %eax
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	cmpl	28(%rcx), %eax
	jge	LBB54_10
## BB#3:                                ##   in Loop: Header=BB54_2 Depth=1
	leaq	-352(%rbp), %rax
	movq	__ZN3fid3sim11mixdown_phiE@GOTPCREL(%rip), %rcx
	movsd	LCPI54_0(%rip), %xmm0
	movq	__ZN3fid3sim8freq_refE@GOTPCREL(%rip), %rdx
	movq	-400(%rbp), %rsi        ## 8-byte Reload
	addq	$136, %rsi
	mulsd	(%rdx), %xmm0
	mulsd	-336(%rbp), %xmm0
	addsd	(%rcx), %xmm0
	movq	%rax, -408(%rbp)        ## 8-byte Spill
	movq	%rsi, -416(%rbp)        ## 8-byte Spill
	callq	_cos
	movsd	%xmm0, -352(%rbp)
	movq	-416(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -288(%rbp)
	movq	-408(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -296(%rbp)
	movq	-288(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	%rcx, %rsi
	movq	%rsi, -280(%rbp)
	movq	-280(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -272(%rbp)
	movq	-272(%rbp), %rsi
	movq	%rsi, -264(%rbp)
	movq	-264(%rbp), %rsi
	cmpq	(%rsi), %rdx
	movq	%rcx, -424(%rbp)        ## 8-byte Spill
	jae	LBB54_7
## BB#4:                                ##   in Loop: Header=BB54_2 Depth=1
	movl	$1, %eax
	movl	%eax, %esi
	movq	-424(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	movq	-424(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -256(%rbp)
	movq	-256(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -248(%rbp)
	movq	-248(%rbp), %rsi
	movq	%rsi, -240(%rbp)
	movq	-240(%rbp), %rsi
	movq	-424(%rbp), %rdi        ## 8-byte Reload
	movq	8(%rdi), %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rcx
	movq	-296(%rbp), %rdx
	movq	%rdx, -104(%rbp)
	movq	-104(%rbp), %rdx
	movq	%rsi, -192(%rbp)
	movq	%rcx, -200(%rbp)
	movq	%rdx, -208(%rbp)
	movq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	%rsi, -184(%rbp)
	movq	-184(%rbp), %rsi
	movq	%rcx, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	-160(%rbp), %rcx
	movq	-168(%rbp), %rdx
	movq	-176(%rbp), %rsi
	movq	%rsi, -144(%rbp)
	movq	-144(%rbp), %rsi
	movq	%rcx, -120(%rbp)
	movq	%rdx, -128(%rbp)
	movq	%rsi, -136(%rbp)
	movq	-128(%rbp), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -432(%rbp)        ## 8-byte Spill
	je	LBB54_6
## BB#5:                                ##   in Loop: Header=BB54_2 Depth=1
	movq	-432(%rbp), %rax        ## 8-byte Reload
	movq	-136(%rbp), %rcx
	movq	%rcx, -112(%rbp)
	movq	-112(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-432(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -440(%rbp)        ## 8-byte Spill
LBB54_6:                                ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJdEEEvRS2_PT_DpOT0_.exit.i
                                        ##   in Loop: Header=BB54_2 Depth=1
	movq	-424(%rbp), %rax        ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	jmp	LBB54_8
LBB54_7:                                ##   in Loop: Header=BB54_2 Depth=1
	movq	-296(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rsi
	movq	-424(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_
LBB54_8:                                ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE9push_backEOd.exit
                                        ##   in Loop: Header=BB54_2 Depth=1
	movq	-400(%rbp), %rax        ## 8-byte Reload
	movsd	16(%rax), %xmm0
	movsd	-336(%rbp), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, -336(%rbp)
## BB#9:                                ##   in Loop: Header=BB54_2 Depth=1
	movl	-340(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -340(%rbp)
	jmp	LBB54_2
LBB54_10:
	leaq	-360(%rbp), %rdx
	xorps	%xmm0, %xmm0
	movq	-400(%rbp), %rax        ## 8-byte Reload
	addq	$64, %rax
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	movslq	28(%rcx), %rsi
	movsd	%xmm0, -360(%rbp)
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd
	leaq	-368(%rbp), %rdx
	xorps	%xmm0, %xmm0
	movq	-400(%rbp), %rax        ## 8-byte Reload
	addq	$88, %rax
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	movslq	28(%rcx), %rsi
	movsd	%xmm0, -368(%rbp)
	movq	%rax, %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd
LBB54_11:
	movsd	-328(%rbp), %xmm0
	movq	-400(%rbp), %rax        ## 8-byte Reload
	movsd	(%rax), %xmm1
	addsd	16(%rax), %xmm1
	ucomisd	%xmm0, %xmm1
	jbe	LBB54_13
## BB#12:
	movq	-400(%rbp), %rax        ## 8-byte Reload
	movl	$0, 32(%rax)
LBB54_13:
	movq	__ZN3fid3sim9amplitudeE@GOTPCREL(%rip), %rax
	movsd	(%rax), %xmm0
	movq	-320(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	$1, -88(%rbp)
	movq	-80(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	(%rax), %rax
	mulsd	(%rax,%rcx,8), %xmm0
	movq	-400(%rbp), %rax        ## 8-byte Reload
	addq	$136, %rax
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	movslq	32(%rcx), %rdx
	movq	%rax, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-64(%rbp), %rax
	movq	-72(%rbp), %rdx
	movq	(%rax), %rax
	mulsd	(%rax,%rdx,8), %xmm0
	addq	$64, %rcx
	movq	-400(%rbp), %rax        ## 8-byte Reload
	movslq	32(%rax), %rdx
	movq	%rcx, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-24(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movq	(%rcx), %rcx
	movsd	%xmm0, (%rcx,%rdx,8)
	movsd	-328(%rbp), %xmm0
	addq	$88, %rax
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	movl	32(%rcx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, 32(%rcx)
	movslq	%esi, %rdx
	movq	%rax, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	(%rax), %rax
	movsd	%xmm0, (%rax,%rdx,8)
	movsd	-328(%rbp), %xmm0
	movsd	8(%rcx), %xmm1
	subsd	16(%rcx), %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	LBB54_15
## BB#14:
	leaq	-392(%rbp), %rdi
	movq	-400(%rbp), %rax        ## 8-byte Reload
	addq	$64, %rax
	movq	-400(%rbp), %rcx        ## 8-byte Reload
	addq	$64, %rcx
	movq	-400(%rbp), %rsi        ## 8-byte Reload
	movq	%rcx, %rdx
	movq	%rax, -448(%rbp)        ## 8-byte Spill
	callq	__ZN3fid10FidFactory13LowPassFilterERNSt3__16vectorIdNS1_9allocatorIdEEEE
	leaq	-392(%rbp), %rax
	movq	-448(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	-40(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE
	leaq	-392(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	-400(%rbp), %rax        ## 8-byte Reload
	movl	$0, 32(%rax)
LBB54_15:
	addq	$448, %rsp              ## imm = 0x1C0
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED1Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED1Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED1Ev: ## @_ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp254:
	.cfi_def_cfa_offset 16
Ltmp255:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp256:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal16,16byte_literals
	.align	4
LCPI56_0:
	.long	1127219200              ## 0x43300000
	.long	1160773632              ## 0x45300000
	.long	0                       ## 0x0
	.long	0                       ## 0x0
LCPI56_1:
	.quad	4841369599423283200     ## double 4.503600e+15
	.quad	4985484787499139072     ## double 1.934281e+25
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactory11GradientFidERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_bb
	.align	4, 0x90
__ZN3fid10FidFactory11GradientFidERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_bb: ## @_ZN3fid10FidFactory11GradientFidERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_bb
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp257:
	.cfi_def_cfa_offset 16
Ltmp258:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp259:
	.cfi_def_cfa_register %rbp
	subq	$656, %rsp              ## imm = 0x290
	movb	%r8b, %al
	movb	%cl, %r9b
	movq	%rdi, -488(%rbp)
	movq	%rsi, -496(%rbp)
	movq	%rdx, -504(%rbp)
	andb	$1, %r9b
	movb	%r9b, -505(%rbp)
	andb	$1, %al
	movb	%al, -506(%rbp)
	movq	-488(%rbp), %rdx
	movq	200(%rdx), %rsi
	movq	(%rsi), %rdi
	movq	%rdi, -608(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-608(%rbp), %rsi        ## 8-byte Reload
	movq	%rdx, -616(%rbp)        ## 8-byte Spill
	callq	*1272(%rsi)
	testb	$1, %al
	jne	LBB56_2
## BB#1:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str26(%rip), %rsi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rsi
	movq	%rax, -472(%rbp)
	movq	%rsi, -480(%rbp)
	movq	-472(%rbp), %rdi
	callq	*-480(%rbp)
	movq	%rax, -624(%rbp)        ## 8-byte Spill
	jmp	LBB56_18
LBB56_2:
	leaq	-520(%rbp), %rdx
	xorps	%xmm0, %xmm0
	movq	__ZN3fid3sim11num_samplesE@GOTPCREL(%rip), %rax
	movq	-504(%rbp), %rdi
	movslq	(%rax), %rsi
	movsd	%xmm0, -520(%rbp)
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd
	leaq	-360(%rbp), %rax
	leaq	-432(%rbp), %rdx
	movq	-496(%rbp), %rsi
	movq	%rsi, -528(%rbp)
	movq	-528(%rbp), %rsi
	movq	%rsi, -464(%rbp)
	movq	-464(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rsi, -440(%rbp)
	movq	%rdi, -448(%rbp)
	movq	-448(%rbp), %rsi
	movq	%rdx, -416(%rbp)
	movq	%rsi, -424(%rbp)
	movq	-416(%rbp), %rdx
	movq	-424(%rbp), %rsi
	movq	%rdx, -400(%rbp)
	movq	%rsi, -408(%rbp)
	movq	-400(%rbp), %rdx
	movq	-408(%rbp), %rsi
	movq	%rsi, (%rdx)
	movq	-432(%rbp), %rdx
	movq	%rdx, -456(%rbp)
	movq	-456(%rbp), %rdx
	movq	%rdx, -536(%rbp)
	movq	-528(%rbp), %rdx
	movq	%rdx, -392(%rbp)
	movq	-392(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	%rdx, -368(%rbp)
	movq	%rsi, -376(%rbp)
	movq	-376(%rbp), %rdx
	movq	%rax, -344(%rbp)
	movq	%rdx, -352(%rbp)
	movq	-344(%rbp), %rax
	movq	-352(%rbp), %rdx
	movq	%rax, -328(%rbp)
	movq	%rdx, -336(%rbp)
	movq	-328(%rbp), %rax
	movq	-336(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-360(%rbp), %rax
	movq	%rax, -384(%rbp)
	movq	-384(%rbp), %rax
	movq	%rax, -544(%rbp)
LBB56_3:                                ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB56_5 Depth 2
	leaq	-544(%rbp), %rax
	leaq	-536(%rbp), %rcx
	movq	%rcx, -312(%rbp)
	movq	%rax, -320(%rbp)
	movq	-312(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	%rax, -296(%rbp)
	movq	%rcx, -304(%rbp)
	movq	-296(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	-304(%rbp), %rcx
	movq	%rcx, -280(%rbp)
	movq	-280(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%dl
	xorb	$1, %dl
	testb	$1, %dl
	jne	LBB56_4
	jmp	LBB56_10
LBB56_4:                                ##   in Loop: Header=BB56_3 Depth=1
	leaq	-536(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -552(%rbp)
	movq	-616(%rbp), %rax        ## 8-byte Reload
	movq	208(%rax), %rcx
	movq	(%rcx), %rdx
	movq	968(%rdx), %rdx
	movq	-552(%rbp), %rsi
	movsd	(%rsi), %xmm0
	movq	%rax, %rdi
	movq	%rcx, -632(%rbp)        ## 8-byte Spill
	movq	%rdx, -640(%rbp)        ## 8-byte Spill
	callq	__ZN3fid10FidFactory12GetTreeIndexEd
	xorl	%edx, %edx
	movslq	%eax, %rsi
	movq	-632(%rbp), %rdi        ## 8-byte Reload
	movq	-640(%rbp), %rcx        ## 8-byte Reload
	callq	*%rcx
	movl	$0, -556(%rbp)
	movl	%eax, -644(%rbp)        ## 4-byte Spill
LBB56_5:                                ##   Parent Loop BB56_3 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-556(%rbp), %eax
	movl	%eax, %ecx
	movq	-504(%rbp), %rdx
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	(%rdx), %rdx
	subq	%rdx, %rsi
	sarq	$3, %rsi
	cmpq	%rsi, %rcx
	jae	LBB56_8
## BB#6:                                ##   in Loop: Header=BB56_5 Depth=2
	movq	-616(%rbp), %rax        ## 8-byte Reload
	addq	$216, %rax
	movl	-556(%rbp), %ecx
	movl	%ecx, %edx
	movq	%rax, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	(%rax), %rax
	movsd	(%rax,%rdx,8), %xmm0
	movq	-504(%rbp), %rax
	movl	-556(%rbp), %ecx
	movl	%ecx, %edx
	movq	%rax, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	(%rax), %rax
	movsd	(%rax,%rdx,8), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rax,%rdx,8)
## BB#7:                                ##   in Loop: Header=BB56_5 Depth=2
	movl	-556(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -556(%rbp)
	jmp	LBB56_5
LBB56_8:                                ##   in Loop: Header=BB56_3 Depth=1
	jmp	LBB56_9
LBB56_9:                                ##   in Loop: Header=BB56_3 Depth=1
	leaq	-536(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, (%rax)
	jmp	LBB56_3
LBB56_10:
	leaq	-176(%rbp), %rax
	leaq	-104(%rbp), %rcx
	movq	__ZN3fid3sim9amplitudeE@GOTPCREL(%rip), %rdx
	movsd	(%rdx), %xmm0
	movq	-496(%rbp), %rdx
	movq	%rdx, -64(%rbp)
	movq	(%rdx), %rsi
	movq	8(%rdx), %rdx
	subq	%rsi, %rdx
	sarq	$3, %rdx
	movd	%rdx, %xmm1
	movaps	LCPI56_0(%rip), %xmm2
	punpckldq	%xmm2, %xmm1    ## xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	movapd	LCPI56_1(%rip), %xmm2
	subpd	%xmm2, %xmm1
	haddpd	%xmm1, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -568(%rbp)
	movq	-504(%rbp), %rdx
	movq	%rdx, -576(%rbp)
	movq	-576(%rbp), %rdx
	movq	%rdx, -136(%rbp)
	movq	-136(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	%rdx, -112(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-120(%rbp), %rdx
	movq	%rcx, -88(%rbp)
	movq	%rdx, -96(%rbp)
	movq	-88(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	%rcx, -72(%rbp)
	movq	%rdx, -80(%rbp)
	movq	-72(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	%rdx, (%rcx)
	movq	-104(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, -584(%rbp)
	movq	-576(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	-208(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	%rcx, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	-192(%rbp), %rcx
	movq	%rax, -160(%rbp)
	movq	%rcx, -168(%rbp)
	movq	-160(%rbp), %rax
	movq	-168(%rbp), %rcx
	movq	%rax, -144(%rbp)
	movq	%rcx, -152(%rbp)
	movq	-144(%rbp), %rax
	movq	-152(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-176(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -592(%rbp)
LBB56_11:                               ## =>This Inner Loop Header: Depth=1
	leaq	-592(%rbp), %rax
	leaq	-584(%rbp), %rcx
	movq	%rcx, -248(%rbp)
	movq	%rax, -256(%rbp)
	movq	-248(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	%rax, -232(%rbp)
	movq	%rcx, -240(%rbp)
	movq	-232(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	-240(%rbp), %rcx
	movq	%rcx, -216(%rbp)
	movq	-216(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%dl
	xorb	$1, %dl
	testb	$1, %dl
	jne	LBB56_12
	jmp	LBB56_14
LBB56_12:                               ##   in Loop: Header=BB56_11 Depth=1
	movq	__ZN3fid3sim8baselineE@GOTPCREL(%rip), %rax
	leaq	-584(%rbp), %rcx
	movq	%rcx, -264(%rbp)
	movq	-264(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -600(%rbp)
	movq	-600(%rbp), %rcx
	movsd	(%rcx), %xmm0
	mulsd	-568(%rbp), %xmm0
	addsd	(%rax), %xmm0
	movq	-600(%rbp), %rax
	movsd	%xmm0, (%rax)
## BB#13:                               ##   in Loop: Header=BB56_11 Depth=1
	leaq	-584(%rbp), %rax
	movq	%rax, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, (%rax)
	jmp	LBB56_11
LBB56_14:
	testb	$1, -505(%rbp)
	je	LBB56_16
## BB#15:
	movq	__ZN3fid3sim3snrE@GOTPCREL(%rip), %rax
	movq	-504(%rbp), %rdi
	movsd	(%rax), %xmm0
	callq	__ZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_
LBB56_16:
	testb	$1, -506(%rbp)
	je	LBB56_18
## BB#17:
	movq	-504(%rbp), %rdi
	callq	__ZN3fid5floorIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEE
LBB56_18:
	addq	$656, %rsp              ## imm = 0x290
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE6assignEmRKd
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin57:
	.cfi_lsda 16, Lexception57
## BB#0:
	pushq	%rbp
Ltmp263:
	.cfi_def_cfa_offset 16
Ltmp264:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp265:
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             ## imm = 0x3F0
	movq	%rdi, -856(%rbp)
	movq	%rsi, -864(%rbp)
	movq	%rdx, -872(%rbp)
	movq	-856(%rbp), %rdx
	movq	-864(%rbp), %rsi
	movq	%rdx, -848(%rbp)
	movq	-848(%rbp), %rdi
	movq	%rdi, -840(%rbp)
	movq	-840(%rbp), %rdi
	movq	%rdi, -832(%rbp)
	movq	-832(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -824(%rbp)
	movq	-824(%rbp), %rax
	movq	%rax, -816(%rbp)
	movq	-816(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	cmpq	%rax, %rsi
	movq	%rdx, -888(%rbp)        ## 8-byte Spill
	ja	LBB57_20
## BB#1:
	leaq	-576(%rbp), %rax
	leaq	-880(%rbp), %rcx
	leaq	-864(%rbp), %rdx
	movq	-888(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -624(%rbp)
	movq	-624(%rbp), %rdi
	movq	8(%rdi), %r8
	movq	(%rdi), %rdi
	subq	%rdi, %r8
	sarq	$3, %r8
	movq	%r8, -880(%rbp)
	movq	(%rsi), %rdi
	movq	%rdx, -600(%rbp)
	movq	%rcx, -608(%rbp)
	movq	-600(%rbp), %rcx
	movq	-608(%rbp), %rdx
	movq	%rcx, -584(%rbp)
	movq	%rdx, -592(%rbp)
	movq	-592(%rbp), %rcx
	movq	-584(%rbp), %rdx
	movq	%rax, -552(%rbp)
	movq	%rcx, -560(%rbp)
	movq	%rdx, -568(%rbp)
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	-568(%rbp), %rcx
	cmpq	(%rcx), %rax
	movq	%rdi, -896(%rbp)        ## 8-byte Spill
	jae	LBB57_3
## BB#2:
	movq	-592(%rbp), %rax
	movq	%rax, -904(%rbp)        ## 8-byte Spill
	jmp	LBB57_4
LBB57_3:
	movq	-584(%rbp), %rax
	movq	%rax, -904(%rbp)        ## 8-byte Spill
LBB57_4:                                ## %_ZNSt3__13minImEERKT_S3_S3_.exit
	movq	-904(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rax
	movq	-872(%rbp), %rcx
	movq	-896(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -368(%rbp)
	movq	%rax, -376(%rbp)
	movq	%rcx, -384(%rbp)
	movq	-368(%rbp), %rax
	movq	-376(%rbp), %rcx
	movq	-384(%rbp), %rsi
	movq	%rax, -344(%rbp)
	movq	%rcx, -352(%rbp)
	movq	%rsi, -360(%rbp)
LBB57_5:                                ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -352(%rbp)
	jbe	LBB57_7
## BB#6:                                ##   in Loop: Header=BB57_5 Depth=1
	movq	-360(%rbp), %rax
	movsd	(%rax), %xmm0
	movq	-344(%rbp), %rax
	movsd	%xmm0, (%rax)
	movq	-344(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -344(%rbp)
	movq	-352(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -352(%rbp)
	jmp	LBB57_5
LBB57_7:                                ## %_ZNSt3__16fill_nIPdmdEET_S2_T0_RKT1_.exit
	movq	-864(%rbp), %rax
	cmpq	-880(%rbp), %rax
	jbe	LBB57_13
## BB#8:
	movq	-864(%rbp), %rax
	subq	-880(%rbp), %rax
	movq	-872(%rbp), %rcx
	movq	-888(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -312(%rbp)
	movq	%rax, -320(%rbp)
	movq	%rcx, -328(%rbp)
	movq	-312(%rbp), %rax
	movq	%rax, %rcx
	movq	%rcx, -304(%rbp)
	movq	-304(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -296(%rbp)
	movq	-296(%rbp), %rcx
	movq	%rcx, -288(%rbp)
	movq	-288(%rbp), %rcx
	movq	%rcx, -336(%rbp)
	movq	-320(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rax, -912(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
LBB57_9:                                ## =>This Inner Loop Header: Depth=1
	movq	-336(%rbp), %rax
	movq	-912(%rbp), %rcx        ## 8-byte Reload
	movq	8(%rcx), %rdx
	movq	%rdx, -160(%rbp)
	movq	-160(%rbp), %rdx
	movq	-328(%rbp), %rsi
	movq	%rax, -248(%rbp)
	movq	%rdx, -256(%rbp)
	movq	%rsi, -264(%rbp)
	movq	-248(%rbp), %rax
	movq	-256(%rbp), %rdx
	movq	-264(%rbp), %rsi
	movq	%rsi, -240(%rbp)
	movq	-240(%rbp), %rsi
	movq	%rax, -216(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rsi, -232(%rbp)
	movq	-216(%rbp), %rax
	movq	-224(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	%rsi, -200(%rbp)
	movq	-200(%rbp), %rsi
	movq	%rax, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	-184(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -920(%rbp)        ## 8-byte Spill
	je	LBB57_11
## BB#10:                               ##   in Loop: Header=BB57_9 Depth=1
	movq	-920(%rbp), %rax        ## 8-byte Reload
	movq	-192(%rbp), %rcx
	movq	%rcx, -168(%rbp)
	movq	-168(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-920(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -928(%rbp)        ## 8-byte Spill
LBB57_11:                               ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJRKdEEEvRS2_PT_DpOT0_.exit.i2
                                        ##   in Loop: Header=BB57_9 Depth=1
	movq	-912(%rbp), %rax        ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-320(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -320(%rbp)
	cmpq	$0, -320(%rbp)
	ja	LBB57_9
## BB#12:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEmRKd.exit3
	jmp	LBB57_19
LBB57_13:
	movq	-888(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-864(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movq	%rax, -136(%rbp)
	movq	%rcx, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	(%rdx), %rdx
	subq	%rdx, %rsi
	sarq	$3, %rsi
	movq	%rsi, -152(%rbp)
	movq	%rcx, %rdx
	movq	-144(%rbp), %rsi
	movq	%rdx, -112(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-112(%rbp), %rdx
	movq	%rcx, -936(%rbp)        ## 8-byte Spill
	movq	%rdx, -944(%rbp)        ## 8-byte Spill
LBB57_14:                               ## =>This Inner Loop Header: Depth=1
	movq	-120(%rbp), %rax
	movq	-944(%rbp), %rcx        ## 8-byte Reload
	cmpq	8(%rcx), %rax
	je	LBB57_16
## BB#15:                               ##   in Loop: Header=BB57_14 Depth=1
	movq	-944(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rcx
	movq	%rcx, -88(%rbp)
	movq	-88(%rbp), %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rdx, 8(%rax)
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	%rcx, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-48(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	%rcx, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rcx, -8(%rbp)
	movq	%rdx, -16(%rbp)
	jmp	LBB57_14
LBB57_16:                               ## %_ZNSt3__113__vector_baseIdNS_9allocatorIdEEE17__destruct_at_endEPd.exit.i
	movq	-152(%rbp), %rsi
Ltmp260:
	movq	-936(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEm
Ltmp261:
	jmp	LBB57_18
LBB57_17:
Ltmp262:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -948(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
LBB57_18:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE17__destruct_at_endEPd.exit
	jmp	LBB57_19
LBB57_19:
	jmp	LBB57_33
LBB57_20:
	movq	-888(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE10deallocateEv
	movq	-864(%rbp), %rdi
	movq	-888(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -512(%rbp)
	movq	%rdi, -520(%rbp)
	movq	-512(%rbp), %rdi
	movq	%rdi, -960(%rbp)        ## 8-byte Spill
	callq	__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv
	movq	%rax, -528(%rbp)
	movq	-520(%rbp), %rax
	cmpq	-528(%rbp), %rax
	jbe	LBB57_22
## BB#21:
	movq	-960(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
LBB57_22:
	movq	-960(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -496(%rbp)
	movq	-496(%rbp), %rcx
	movq	%rcx, -488(%rbp)
	movq	-488(%rbp), %rcx
	movq	%rcx, -480(%rbp)
	movq	-480(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -472(%rbp)
	movq	-472(%rbp), %rdx
	movq	%rdx, -464(%rbp)
	movq	-464(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	movq	%rdx, -536(%rbp)
	movq	-536(%rbp), %rcx
	movq	-528(%rbp), %rdx
	shrq	$1, %rdx
	cmpq	%rdx, %rcx
	jb	LBB57_24
## BB#23:
	movq	-528(%rbp), %rax
	movq	%rax, -504(%rbp)
	jmp	LBB57_28
LBB57_24:
	leaq	-416(%rbp), %rax
	leaq	-520(%rbp), %rcx
	leaq	-544(%rbp), %rdx
	movq	-536(%rbp), %rsi
	shlq	$1, %rsi
	movq	%rsi, -544(%rbp)
	movq	%rdx, -440(%rbp)
	movq	%rcx, -448(%rbp)
	movq	-440(%rbp), %rcx
	movq	-448(%rbp), %rdx
	movq	%rcx, -424(%rbp)
	movq	%rdx, -432(%rbp)
	movq	-424(%rbp), %rcx
	movq	-432(%rbp), %rdx
	movq	%rax, -392(%rbp)
	movq	%rcx, -400(%rbp)
	movq	%rdx, -408(%rbp)
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	-408(%rbp), %rcx
	cmpq	(%rcx), %rax
	jae	LBB57_26
## BB#25:
	movq	-432(%rbp), %rax
	movq	%rax, -968(%rbp)        ## 8-byte Spill
	jmp	LBB57_27
LBB57_26:
	movq	-424(%rbp), %rax
	movq	%rax, -968(%rbp)        ## 8-byte Spill
LBB57_27:                               ## %_ZNSt3__13maxImEERKT_S3_S3_.exit.i
	movq	-968(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, -504(%rbp)
LBB57_28:                               ## %_ZNKSt3__16vectorIdNS_9allocatorIdEEE11__recommendEm.exit
	movq	-504(%rbp), %rsi
	movq	-888(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
	movq	-864(%rbp), %rsi
	movq	-872(%rbp), %rdi
	movq	-888(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -784(%rbp)
	movq	%rsi, -792(%rbp)
	movq	%rdi, -800(%rbp)
	movq	-784(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rdi, -776(%rbp)
	movq	-776(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -768(%rbp)
	movq	-768(%rbp), %rdi
	movq	%rdi, -760(%rbp)
	movq	-760(%rbp), %rdi
	movq	%rdi, -808(%rbp)
	movq	-792(%rbp), %rdi
	movq	%rdi, -976(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-976(%rbp), %rcx        ## 8-byte Reload
	movq	%rsi, -984(%rbp)        ## 8-byte Spill
	movq	%rcx, %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
LBB57_29:                               ## =>This Inner Loop Header: Depth=1
	movq	-808(%rbp), %rax
	movq	-984(%rbp), %rcx        ## 8-byte Reload
	movq	8(%rcx), %rdx
	movq	%rdx, -632(%rbp)
	movq	-632(%rbp), %rdx
	movq	-800(%rbp), %rsi
	movq	%rax, -720(%rbp)
	movq	%rdx, -728(%rbp)
	movq	%rsi, -736(%rbp)
	movq	-720(%rbp), %rax
	movq	-728(%rbp), %rdx
	movq	-736(%rbp), %rsi
	movq	%rsi, -712(%rbp)
	movq	-712(%rbp), %rsi
	movq	%rax, -688(%rbp)
	movq	%rdx, -696(%rbp)
	movq	%rsi, -704(%rbp)
	movq	-688(%rbp), %rax
	movq	-696(%rbp), %rdx
	movq	-704(%rbp), %rsi
	movq	%rsi, -672(%rbp)
	movq	-672(%rbp), %rsi
	movq	%rax, -648(%rbp)
	movq	%rdx, -656(%rbp)
	movq	%rsi, -664(%rbp)
	movq	-656(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -992(%rbp)        ## 8-byte Spill
	je	LBB57_31
## BB#30:                               ##   in Loop: Header=BB57_29 Depth=1
	movq	-992(%rbp), %rax        ## 8-byte Reload
	movq	-664(%rbp), %rcx
	movq	%rcx, -640(%rbp)
	movq	-640(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-992(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -1000(%rbp)       ## 8-byte Spill
LBB57_31:                               ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJRKdEEEvRS2_PT_DpOT0_.exit.i
                                        ##   in Loop: Header=BB57_29 Depth=1
	movq	-984(%rbp), %rax        ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-792(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -792(%rbp)
	cmpq	$0, -792(%rbp)
	ja	LBB57_29
## BB#32:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEmRKd.exit
	jmp	LBB57_33
LBB57_33:
	addq	$1008, %rsp             ## imm = 0x3F0
	popq	%rbp
	retq
	.cfi_endproc
Leh_func_end57:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table57:
Lexception57:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\257\200"              ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset71 = Leh_func_begin57-Leh_func_begin57 ## >> Call Site 1 <<
	.long	Lset71
Lset72 = Ltmp260-Leh_func_begin57       ##   Call between Leh_func_begin57 and Ltmp260
	.long	Lset72
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset73 = Ltmp260-Leh_func_begin57       ## >> Call Site 2 <<
	.long	Lset73
Lset74 = Ltmp261-Ltmp260                ##   Call between Ltmp260 and Ltmp261
	.long	Lset74
Lset75 = Ltmp262-Leh_func_begin57       ##     jumps to Ltmp262
	.long	Lset75
	.byte	1                       ##   On action: 1
Lset76 = Ltmp261-Leh_func_begin57       ## >> Call Site 3 <<
	.long	Lset76
Lset77 = Leh_func_end57-Ltmp261         ##   Call between Ltmp261 and Leh_func_end57
	.long	Lset77
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI58_0:
	.quad	4602678819172646912     ## double 0.5
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactory12GetTreeIndexEd
	.align	4, 0x90
__ZN3fid10FidFactory12GetTreeIndexEd:   ## @_ZN3fid10FidFactory12GetTreeIndexEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp266:
	.cfi_def_cfa_offset 16
Ltmp267:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp268:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movsd	LCPI58_0(%rip), %xmm1
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	divsd	192(%rdi), %xmm0
	cvtsi2sdl	188(%rdi), %xmm2
	addsd	%xmm2, %xmm0
	movsd	%xmm1, -24(%rbp)        ## 8-byte Spill
	callq	_nearbyint
	movsd	-24(%rbp), %xmm1        ## 8-byte Reload
	addsd	%xmm1, %xmm0
	cvttsd2si	%xmm0, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN3fid10FidFactory19PrintDiagnosticInfoEv
	.align	4, 0x90
__ZN3fid10FidFactory19PrintDiagnosticInfoEv: ## @_ZN3fid10FidFactory19PrintDiagnosticInfoEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp269:
	.cfi_def_cfa_offset 16
Ltmp270:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp271:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rax
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rcx
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rdi
	movq	%rcx, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	%rdi, -80(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	*-64(%rbp)
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str27(%rip), %rsi
	movq	%rax, -88(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movq	-80(%rbp), %rcx         ## 8-byte Reload
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPKv
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rcx
	movq	%rax, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	-40(%rbp), %rdi
	callq	*-48(%rbp)
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str28(%rip), %rsi
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movq	-80(%rbp), %rcx         ## 8-byte Reload
	movsd	16(%rcx), %xmm0
	movq	%rax, %rdi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEd
	leaq	L_.str29(%rip), %rsi
	movq	%rax, %rdi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	movq	__ZN3fid3sim11num_samplesE@GOTPCREL(%rip), %rcx
	movl	(%rcx), %esi
	movq	%rax, -104(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rcx
	movq	%rax, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rdi
	callq	*-32(%rbp)
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	leaq	L_.str30(%rip), %rsi
	movq	%rax, -112(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movq	-80(%rbp), %rcx         ## 8-byte Reload
	movl	28(%rcx), %esi
	movq	%rax, %rdi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi
	leaq	L_.str29(%rip), %rsi
	movq	%rax, %rdi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	movq	-80(%rbp), %rcx         ## 8-byte Reload
	movl	24(%rcx), %esi
	movq	%rax, -120(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rcx
	movq	%rax, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	*-16(%rbp)
	movq	%rax, -128(%rbp)        ## 8-byte Spill
	addq	$128, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI60_0:
	.quad	4618760256179416344     ## double 6.2831853071795862
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactory6BfieldERKd
	.align	4, 0x90
__ZN3fid10FidFactory6BfieldERKd:        ## @_ZN3fid10FidFactory6BfieldERKd
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin60:
	.cfi_lsda 16, Lexception60
## BB#0:
	pushq	%rbp
Ltmp282:
	.cfi_def_cfa_offset 16
Ltmp283:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp284:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$760, %rsp              ## imm = 0x2F8
Ltmp285:
	.cfi_offset %rbx, -24
	movq	%rdi, %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -16(%rbp)
	movq	%rsi, -504(%rbp)
	movq	%rdx, -512(%rbp)
	movq	-504(%rbp), %rcx
	cmpb	$0, __ZGVZN3fid10FidFactory6BfieldERKdE1a(%rip)
	movq	%rax, -568(%rbp)        ## 8-byte Spill
	movq	%rdi, -576(%rbp)        ## 8-byte Spill
	movq	%rcx, -584(%rbp)        ## 8-byte Spill
	jne	LBB60_9
## BB#1:
	leaq	__ZGVZN3fid10FidFactory6BfieldERKdE1a(%rip), %rdi
	callq	___cxa_guard_acquire
	cmpl	$0, %eax
	je	LBB60_9
## BB#2:
	leaq	-448(%rbp), %rax
	leaq	-376(%rbp), %rcx
	leaq	-400(%rbp), %rdx
	leaq	__ZZN3fid10FidFactory6BfieldERKdE1a(%rip), %rsi
	leaq	-40(%rbp), %rdi
	xorl	%r8d, %r8d
	movl	$24, %r9d
	movl	%r9d, %r10d
	movq	%rdi, %r11
	movq	%rdi, -592(%rbp)        ## 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -600(%rbp)        ## 8-byte Spill
	movl	%r8d, %esi
	movq	%rdx, -608(%rbp)        ## 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, -616(%rbp)        ## 8-byte Spill
	movq	%rcx, -624(%rbp)        ## 8-byte Spill
	callq	_memset
	movq	-592(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -528(%rbp)
	movq	$3, -520(%rbp)
	movq	-528(%rbp), %rcx
	movq	-520(%rbp), %rdx
	movq	%rcx, -488(%rbp)
	movq	%rdx, -480(%rbp)
	movq	-600(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -496(%rbp)
	movq	-496(%rbp), %rdx
	movq	-488(%rbp), %rdi
	movq	-480(%rbp), %r10
	movq	%rdi, -448(%rbp)
	movq	%r10, -440(%rbp)
	movq	%rdx, -456(%rbp)
	movq	-456(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdi, -432(%rbp)
	movq	-432(%rbp), %rdi
	movq	%rdi, %r10
	movq	%r10, -424(%rbp)
	movq	$0, (%rdi)
	movq	$0, 8(%rdi)
	addq	$16, %rdi
	movq	%rdi, -408(%rbp)
	movq	$0, -416(%rbp)
	movq	-408(%rbp), %rdi
	movq	-416(%rbp), %r10
	movq	%rdi, -392(%rbp)
	movq	%r10, -400(%rbp)
	movq	-392(%rbp), %rdi
	movq	-608(%rbp), %r10        ## 8-byte Reload
	movq	%r10, -384(%rbp)
	movq	-384(%rbp), %r11
	movq	(%r11), %r11
	movq	%rdi, -368(%rbp)
	movq	%r11, -376(%rbp)
	movq	-368(%rbp), %rdi
	movq	%rdi, %r11
	movq	%r11, -360(%rbp)
	movq	-624(%rbp), %r11        ## 8-byte Reload
	movq	%r11, -352(%rbp)
	movq	-352(%rbp), %rbx
	movq	(%rbx), %rbx
	movq	%rbx, (%rdi)
	movq	-616(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -344(%rbp)
	movq	-344(%rbp), %rbx
	cmpq	$0, 8(%rbx)
	movq	%rdx, -632(%rbp)        ## 8-byte Spill
	jbe	LBB60_7
## BB#3:
	leaq	-448(%rbp), %rax
	movq	%rax, -336(%rbp)
	movq	-440(%rbp), %rsi
Ltmp272:
	movq	-632(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
Ltmp273:
	jmp	LBB60_4
LBB60_4:
	leaq	-448(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-448(%rbp), %rsi
	movq	%rax, -328(%rbp)
	movq	-448(%rbp), %rax
	movq	-440(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rdx
Ltmp274:
	movq	-632(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_
Ltmp275:
	jmp	LBB60_5
LBB60_5:
	jmp	LBB60_7
LBB60_6:
Ltmp276:
	movl	%edx, %ecx
	movq	%rax, -464(%rbp)
	movl	%ecx, -468(%rbp)
	movq	-632(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	movq	-464(%rbp), %rax
	movl	-468(%rbp), %ecx
	movq	%rax, -640(%rbp)        ## 8-byte Spill
	movl	%ecx, -644(%rbp)        ## 4-byte Spill
	jmp	LBB60_20
LBB60_7:                                ## %_ZNSt3__16vectorIdNS_9allocatorIdEEEC1ESt16initializer_listIdE.exit
	jmp	LBB60_8
LBB60_8:
	movq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev@GOTPCREL(%rip), %rax
	leaq	__ZZN3fid10FidFactory6BfieldERKdE1a(%rip), %rcx
	movq	___dso_handle@GOTPCREL(%rip), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	___cxa_atexit
	leaq	__ZGVZN3fid10FidFactory6BfieldERKdE1a(%rip), %rdi
	movl	%eax, -648(%rbp)        ## 4-byte Spill
	callq	___cxa_guard_release
LBB60_9:
	cmpb	$0, __ZGVZN3fid10FidFactory6BfieldERKdE1b(%rip)
	jne	LBB60_18
## BB#10:
	leaq	__ZGVZN3fid10FidFactory6BfieldERKdE1b(%rip), %rdi
	callq	___cxa_guard_acquire
	cmpl	$0, %eax
	je	LBB60_18
## BB#11:
	leaq	-264(%rbp), %rax
	leaq	-192(%rbp), %rcx
	leaq	-216(%rbp), %rdx
	leaq	__ZZN3fid10FidFactory6BfieldERKdE1b(%rip), %rsi
	leaq	-64(%rbp), %rdi
	xorl	%r8d, %r8d
	movl	$24, %r9d
	movl	%r9d, %r10d
	movq	%rdi, %r11
	movq	%rdi, -656(%rbp)        ## 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -664(%rbp)        ## 8-byte Spill
	movl	%r8d, %esi
	movq	%rdx, -672(%rbp)        ## 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, -680(%rbp)        ## 8-byte Spill
	movq	%rcx, -688(%rbp)        ## 8-byte Spill
	callq	_memset
	movq	-656(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movq	-560(%rbp), %rcx
	movq	-552(%rbp), %rdx
	movq	%rcx, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movq	-664(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -312(%rbp)
	movq	-312(%rbp), %rdx
	movq	-304(%rbp), %rdi
	movq	-296(%rbp), %r10
	movq	%rdi, -264(%rbp)
	movq	%r10, -256(%rbp)
	movq	%rdx, -272(%rbp)
	movq	-272(%rbp), %rdx
	movq	%rdx, %rdi
	movq	%rdi, -248(%rbp)
	movq	-248(%rbp), %rdi
	movq	%rdi, %r10
	movq	%r10, -240(%rbp)
	movq	$0, (%rdi)
	movq	$0, 8(%rdi)
	addq	$16, %rdi
	movq	%rdi, -224(%rbp)
	movq	$0, -232(%rbp)
	movq	-224(%rbp), %rdi
	movq	-232(%rbp), %r10
	movq	%rdi, -208(%rbp)
	movq	%r10, -216(%rbp)
	movq	-208(%rbp), %rdi
	movq	-672(%rbp), %r10        ## 8-byte Reload
	movq	%r10, -200(%rbp)
	movq	-200(%rbp), %r11
	movq	(%r11), %r11
	movq	%rdi, -184(%rbp)
	movq	%r11, -192(%rbp)
	movq	-184(%rbp), %rdi
	movq	%rdi, %r11
	movq	%r11, -176(%rbp)
	movq	-688(%rbp), %r11        ## 8-byte Reload
	movq	%r11, -168(%rbp)
	movq	-168(%rbp), %rbx
	movq	(%rbx), %rbx
	movq	%rbx, (%rdi)
	movq	-680(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -160(%rbp)
	movq	-160(%rbp), %rbx
	cmpq	$0, 8(%rbx)
	movq	%rdx, -696(%rbp)        ## 8-byte Spill
	jbe	LBB60_16
## BB#12:
	leaq	-264(%rbp), %rax
	movq	%rax, -152(%rbp)
	movq	-256(%rbp), %rsi
Ltmp277:
	movq	-696(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
Ltmp278:
	jmp	LBB60_13
LBB60_13:
	leaq	-264(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-264(%rbp), %rsi
	movq	%rax, -144(%rbp)
	movq	-264(%rbp), %rax
	movq	-256(%rbp), %rcx
	leaq	(%rax,%rcx,8), %rdx
Ltmp279:
	movq	-696(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_
Ltmp280:
	jmp	LBB60_14
LBB60_14:
	jmp	LBB60_16
LBB60_15:
Ltmp281:
	movl	%edx, %ecx
	movq	%rax, -280(%rbp)
	movl	%ecx, -284(%rbp)
	movq	-696(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	movq	-280(%rbp), %rax
	movl	-284(%rbp), %ecx
	movq	%rax, -704(%rbp)        ## 8-byte Spill
	movl	%ecx, -708(%rbp)        ## 4-byte Spill
	jmp	LBB60_21
LBB60_16:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEEC1ESt16initializer_listIdE.exit5
	jmp	LBB60_17
LBB60_17:
	movq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev@GOTPCREL(%rip), %rax
	leaq	__ZZN3fid10FidFactory6BfieldERKdE1b(%rip), %rcx
	movq	___dso_handle@GOTPCREL(%rip), %rdx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	___cxa_atexit
	leaq	__ZGVZN3fid10FidFactory6BfieldERKdE1b(%rip), %rdi
	movl	%eax, -712(%rbp)        ## 4-byte Spill
	callq	___cxa_guard_release
LBB60_18:
	movq	__ZN3fid3sim7t_pulseE@GOTPCREL(%rip), %rax
	movq	-512(%rbp), %rcx
	movsd	(%rcx), %xmm0
	ucomisd	(%rax), %xmm0
	jb	LBB60_22
## BB#19:
	leaq	__ZZN3fid10FidFactory6BfieldERKdE1a(%rip), %rsi
	movq	-576(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_
	jmp	LBB60_28
LBB60_20:                               ## %.body
	leaq	__ZGVZN3fid10FidFactory6BfieldERKdE1a(%rip), %rdi
	movq	-640(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -536(%rbp)
	movl	-644(%rbp), %ecx        ## 4-byte Reload
	movl	%ecx, -540(%rbp)
	callq	___cxa_guard_abort
	jmp	LBB60_30
LBB60_21:                               ## %.body3
	leaq	__ZGVZN3fid10FidFactory6BfieldERKdE1b(%rip), %rdi
	movq	-704(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -536(%rbp)
	movl	-708(%rbp), %ecx        ## 4-byte Reload
	movl	%ecx, -540(%rbp)
	callq	___cxa_guard_abort
	jmp	LBB60_30
LBB60_22:
	movq	-512(%rbp), %rax
	movsd	(%rax), %xmm0
	movq	-584(%rbp), %rax        ## 8-byte Reload
	movsd	(%rax), %xmm1
	addsd	16(%rax), %xmm1
	ucomisd	%xmm0, %xmm1
	jb	LBB60_24
## BB#23:
	leaq	__ZZN3fid10FidFactory6BfieldERKdE1b(%rip), %rax
	movsd	LCPI60_0(%rip), %xmm0
	movq	__ZN3fid3sim11freq_larmorE@GOTPCREL(%rip), %rcx
	leaq	__ZZN3fid10FidFactory6BfieldERKdE1a(%rip), %rdx
	movaps	%xmm0, %xmm1
	mulsd	(%rcx), %xmm1
	movq	%rdx, -120(%rbp)
	movq	$2, -128(%rbp)
	movq	-120(%rbp), %rdx
	movq	-128(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	%xmm1, (%rdx,%rsi,8)
	mulsd	(%rcx), %xmm0
	movq	%rax, -104(%rbp)
	movq	$2, -112(%rbp)
	movq	-104(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	(%rax), %rax
	movsd	%xmm0, (%rax,%rcx,8)
LBB60_24:
	jmp	LBB60_25
LBB60_25:
	xorps	%xmm0, %xmm0
	movq	-512(%rbp), %rax
	ucomisd	(%rax), %xmm0
	jbe	LBB60_27
## BB#26:
	leaq	__ZZN3fid10FidFactory6BfieldERKdE1a(%rip), %rsi
	movq	-576(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_
	jmp	LBB60_28
LBB60_27:
	leaq	__ZZN3fid10FidFactory6BfieldERKdE1b(%rip), %rax
	movsd	LCPI60_0(%rip), %xmm0
	movq	__ZN3fid3sim8freq_refE@GOTPCREL(%rip), %rcx
	movq	__ZN3fid3sim7omega_rE@GOTPCREL(%rip), %rdx
	movsd	(%rdx), %xmm1
	movaps	%xmm0, %xmm2
	mulsd	(%rcx), %xmm2
	movq	-512(%rbp), %rsi
	mulsd	(%rsi), %xmm2
	movsd	%xmm0, -720(%rbp)       ## 8-byte Spill
	movaps	%xmm2, %xmm0
	movq	%rax, -728(%rbp)        ## 8-byte Spill
	movsd	%xmm1, -736(%rbp)       ## 8-byte Spill
	movq	%rcx, -744(%rbp)        ## 8-byte Spill
	movq	%rdx, -752(%rbp)        ## 8-byte Spill
	callq	_cos
	movsd	-736(%rbp), %xmm1       ## 8-byte Reload
	mulsd	%xmm0, %xmm1
	movq	-728(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -88(%rbp)
	movq	$0, -96(%rbp)
	movq	-88(%rbp), %rcx
	movq	-96(%rbp), %rdx
	movq	(%rcx), %rcx
	movsd	%xmm1, (%rcx,%rdx,8)
	movq	-752(%rbp), %rcx        ## 8-byte Reload
	movsd	(%rcx), %xmm0
	movsd	-720(%rbp), %xmm1       ## 8-byte Reload
	movq	-744(%rbp), %rdx        ## 8-byte Reload
	mulsd	(%rdx), %xmm1
	movq	-512(%rbp), %rsi
	mulsd	(%rsi), %xmm1
	movsd	%xmm0, -760(%rbp)       ## 8-byte Spill
	movaps	%xmm1, %xmm0
	callq	_sin
	movsd	-760(%rbp), %xmm1       ## 8-byte Reload
	mulsd	%xmm0, %xmm1
	movq	-728(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	$1, -80(%rbp)
	movq	-72(%rbp), %rcx
	movq	-80(%rbp), %rdx
	movq	(%rcx), %rcx
	movsd	%xmm1, (%rcx,%rdx,8)
	movq	-576(%rbp), %rdi        ## 8-byte Reload
	movq	%rax, %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_
LBB60_28:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	LBB60_31
## BB#29:                               ## %SP_return
	movq	-568(%rbp), %rax        ## 8-byte Reload
	addq	$760, %rsp              ## imm = 0x2F8
	popq	%rbx
	popq	%rbp
	retq
LBB60_30:
	movq	-536(%rbp), %rdi
	callq	__Unwind_Resume
LBB60_31:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc
Leh_func_end60:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table60:
Lexception60:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\303\200"              ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	65                      ## Call site table length
Lset78 = Leh_func_begin60-Leh_func_begin60 ## >> Call Site 1 <<
	.long	Lset78
Lset79 = Ltmp272-Leh_func_begin60       ##   Call between Leh_func_begin60 and Ltmp272
	.long	Lset79
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset80 = Ltmp272-Leh_func_begin60       ## >> Call Site 2 <<
	.long	Lset80
Lset81 = Ltmp275-Ltmp272                ##   Call between Ltmp272 and Ltmp275
	.long	Lset81
Lset82 = Ltmp276-Leh_func_begin60       ##     jumps to Ltmp276
	.long	Lset82
	.byte	0                       ##   On action: cleanup
Lset83 = Ltmp275-Leh_func_begin60       ## >> Call Site 3 <<
	.long	Lset83
Lset84 = Ltmp277-Ltmp275                ##   Call between Ltmp275 and Ltmp277
	.long	Lset84
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset85 = Ltmp277-Leh_func_begin60       ## >> Call Site 4 <<
	.long	Lset85
Lset86 = Ltmp280-Ltmp277                ##   Call between Ltmp277 and Ltmp280
	.long	Lset86
Lset87 = Ltmp281-Leh_func_begin60       ##     jumps to Ltmp281
	.long	Lset87
	.byte	0                       ##   On action: cleanup
Lset88 = Ltmp280-Leh_func_begin60       ## >> Call Site 5 <<
	.long	Lset88
Lset89 = Leh_func_end60-Ltmp280         ##   Call between Ltmp280 and Leh_func_end60
	.long	Lset89
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN3fid5crossIdEEvRKNSt3__16vectorIT_NS1_9allocatorIS3_EEEES8_RS6_
	.weak_def_can_be_hidden	__ZN3fid5crossIdEEvRKNSt3__16vectorIT_NS1_9allocatorIS3_EEEES8_RS6_
	.align	4, 0x90
__ZN3fid5crossIdEEvRKNSt3__16vectorIT_NS1_9allocatorIS3_EEEES8_RS6_: ## @_ZN3fid5crossIdEEvRKNSt3__16vectorIT_NS1_9allocatorIS3_EEEES8_RS6_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp286:
	.cfi_def_cfa_offset 16
Ltmp287:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp288:
	.cfi_def_cfa_register %rbp
	subq	$136, %rsp
	movq	%rdi, -248(%rbp)
	movq	%rsi, -256(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-248(%rbp), %rdx
	movq	%rdx, -232(%rbp)
	movq	$1, -240(%rbp)
	movq	-232(%rbp), %rdx
	movq	-240(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	(%rdx,%rsi,8), %xmm0
	movq	-256(%rbp), %rdx
	movq	%rdx, -8(%rbp)
	movq	$2, -16(%rbp)
	movq	-8(%rbp), %rdx
	movq	-16(%rbp), %rsi
	movq	(%rdx), %rdx
	mulsd	(%rdx,%rsi,8), %xmm0
	movq	-248(%rbp), %rdx
	movq	%rdx, -24(%rbp)
	movq	$2, -32(%rbp)
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	(%rdx,%rsi,8), %xmm1
	movq	-256(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movq	$1, -48(%rbp)
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rsi
	movq	(%rdx), %rdx
	mulsd	(%rdx,%rsi,8), %xmm1
	subsd	%xmm1, %xmm0
	movq	-264(%rbp), %rdx
	movq	%rdx, -56(%rbp)
	movq	$0, -64(%rbp)
	movq	-56(%rbp), %rdx
	movq	-64(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	%xmm0, (%rdx,%rsi,8)
	movq	-248(%rbp), %rdx
	movq	%rdx, -72(%rbp)
	movq	$2, -80(%rbp)
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	(%rdx,%rsi,8), %xmm0
	movq	-256(%rbp), %rdx
	movq	%rdx, -88(%rbp)
	movq	$0, -96(%rbp)
	movq	-88(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	(%rdx), %rdx
	mulsd	(%rdx,%rsi,8), %xmm0
	movq	-248(%rbp), %rdx
	movq	%rdx, -104(%rbp)
	movq	$0, -112(%rbp)
	movq	-104(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	(%rdx,%rsi,8), %xmm1
	movq	-256(%rbp), %rdx
	movq	%rdx, -120(%rbp)
	movq	$2, -128(%rbp)
	movq	-120(%rbp), %rdx
	movq	-128(%rbp), %rsi
	movq	(%rdx), %rdx
	mulsd	(%rdx,%rsi,8), %xmm1
	subsd	%xmm1, %xmm0
	movq	-264(%rbp), %rdx
	movq	%rdx, -136(%rbp)
	movq	$1, -144(%rbp)
	movq	-136(%rbp), %rdx
	movq	-144(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	%xmm0, (%rdx,%rsi,8)
	movq	-248(%rbp), %rdx
	movq	%rdx, -152(%rbp)
	movq	$0, -160(%rbp)
	movq	-152(%rbp), %rdx
	movq	-160(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	(%rdx,%rsi,8), %xmm0
	movq	-256(%rbp), %rdx
	movq	%rdx, -168(%rbp)
	movq	$1, -176(%rbp)
	movq	-168(%rbp), %rdx
	movq	-176(%rbp), %rsi
	movq	(%rdx), %rdx
	mulsd	(%rdx,%rsi,8), %xmm0
	movq	-248(%rbp), %rdx
	movq	%rdx, -184(%rbp)
	movq	$1, -192(%rbp)
	movq	-184(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	(%rdx,%rsi,8), %xmm1
	movq	-256(%rbp), %rdx
	movq	%rdx, -200(%rbp)
	movq	$0, -208(%rbp)
	movq	-200(%rbp), %rdx
	movq	-208(%rbp), %rsi
	movq	(%rdx), %rdx
	mulsd	(%rdx,%rsi,8), %xmm1
	subsd	%xmm1, %xmm0
	movq	-264(%rbp), %rdx
	movq	%rdx, -216(%rbp)
	movq	$2, -224(%rbp)
	movq	-216(%rbp), %rdx
	movq	-224(%rbp), %rsi
	movq	(%rdx), %rdx
	movsd	%xmm0, (%rdx,%rsi,8)
	addq	$136, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN3fidmiIdEERNSt3__16vectorIT_NS1_9allocatorIS3_EEEES7_S7_
	.weak_def_can_be_hidden	__ZN3fidmiIdEERNSt3__16vectorIT_NS1_9allocatorIS3_EEEES7_S7_
	.align	4, 0x90
__ZN3fidmiIdEERNSt3__16vectorIT_NS1_9allocatorIS3_EEEES7_S7_: ## @_ZN3fidmiIdEERNSt3__16vectorIT_NS1_9allocatorIS3_EEEES7_S7_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp289:
	.cfi_def_cfa_offset 16
Ltmp290:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp291:
	.cfi_def_cfa_register %rbp
	subq	$544, %rsp              ## imm = 0x220
	movq	%rdi, -480(%rbp)
	movq	%rsi, -488(%rbp)
	movq	-480(%rbp), %rsi
	movq	%rsi, -472(%rbp)
	movq	-472(%rbp), %rsi
	movq	8(%rsi), %rdi
	movq	(%rsi), %rsi
	subq	%rsi, %rdi
	sarq	$3, %rdi
	movq	-488(%rbp), %rsi
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	8(%rsi), %rax
	movq	(%rsi), %rsi
	subq	%rsi, %rax
	sarq	$3, %rax
	cmpq	%rax, %rdi
	sete	%cl
	xorb	$1, %cl
	andb	$1, %cl
	movzbl	%cl, %edx
	movl	%edx, %eax
	cmpq	$0, %rax
	je	LBB62_2
## BB#1:
	leaq	L___func__._ZN3fidmiIdEERNSt3__16vectorIT_NS1_9allocatorIS3_EEEES7_S7_(%rip), %rdi
	leaq	L_.str45(%rip), %rsi
	movl	$50, %edx
	leaq	L_.str46(%rip), %rcx
	callq	___assert_rtn
LBB62_2:
	jmp	LBB62_3
LBB62_3:
	leaq	-264(%rbp), %rax
	leaq	-192(%rbp), %rcx
	leaq	-120(%rbp), %rdx
	leaq	-48(%rbp), %rsi
	movq	-480(%rbp), %rdi
	movq	%rdi, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	(%rdi), %r8
	movq	%rdi, -56(%rbp)
	movq	%r8, -64(%rbp)
	movq	-64(%rbp), %rdi
	movq	%rsi, -32(%rbp)
	movq	%rdi, -40(%rbp)
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdi
	movq	%rsi, -16(%rbp)
	movq	%rdi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdi
	movq	%rdi, (%rsi)
	movq	-48(%rbp), %rsi
	movq	%rsi, -72(%rbp)
	movq	-72(%rbp), %rsi
	movq	%rsi, -496(%rbp)
	movq	-480(%rbp), %rsi
	movq	%rsi, -152(%rbp)
	movq	-152(%rbp), %rsi
	movq	8(%rsi), %rdi
	movq	%rsi, -128(%rbp)
	movq	%rdi, -136(%rbp)
	movq	-136(%rbp), %rsi
	movq	%rdx, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	-104(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	%rdx, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	-88(%rbp), %rdx
	movq	-96(%rbp), %rsi
	movq	%rsi, (%rdx)
	movq	-120(%rbp), %rdx
	movq	%rdx, -144(%rbp)
	movq	-144(%rbp), %rdx
	movq	%rdx, -504(%rbp)
	movq	-488(%rbp), %rdx
	movq	%rdx, -224(%rbp)
	movq	-224(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	%rdx, -200(%rbp)
	movq	%rsi, -208(%rbp)
	movq	-208(%rbp), %rdx
	movq	%rcx, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	-176(%rbp), %rcx
	movq	-184(%rbp), %rdx
	movq	%rcx, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-160(%rbp), %rcx
	movq	-168(%rbp), %rdx
	movq	%rdx, (%rcx)
	movq	-192(%rbp), %rcx
	movq	%rcx, -216(%rbp)
	movq	-216(%rbp), %rcx
	movq	%rcx, -512(%rbp)
	movq	-480(%rbp), %rcx
	movq	%rcx, -296(%rbp)
	movq	-296(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rcx, -272(%rbp)
	movq	%rdx, -280(%rbp)
	movq	-280(%rbp), %rcx
	movq	%rax, -248(%rbp)
	movq	%rcx, -256(%rbp)
	movq	-248(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	%rax, -232(%rbp)
	movq	%rcx, -240(%rbp)
	movq	-232(%rbp), %rax
	movq	-240(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-264(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-288(%rbp), %rax
	movq	%rax, -520(%rbp)
	movq	-496(%rbp), %rax
	movq	-504(%rbp), %rcx
	movq	-512(%rbp), %rdx
	movq	-520(%rbp), %rsi
	movq	%rax, -432(%rbp)
	movq	%rcx, -440(%rbp)
	movq	%rdx, -448(%rbp)
	movq	%rsi, -456(%rbp)
LBB62_4:                                ## =>This Inner Loop Header: Depth=1
	leaq	-440(%rbp), %rax
	leaq	-432(%rbp), %rcx
	movq	%rcx, -408(%rbp)
	movq	%rax, -416(%rbp)
	movq	-408(%rbp), %rax
	movq	-416(%rbp), %rcx
	movq	%rax, -392(%rbp)
	movq	%rcx, -400(%rbp)
	movq	-392(%rbp), %rax
	movq	%rax, -384(%rbp)
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	-400(%rbp), %rcx
	movq	%rcx, -376(%rbp)
	movq	-376(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%dl
	xorb	$1, %dl
	testb	$1, %dl
	jne	LBB62_5
	jmp	LBB62_6
LBB62_5:                                ##   in Loop: Header=BB62_4 Depth=1
	leaq	-456(%rbp), %rax
	leaq	-448(%rbp), %rcx
	leaq	-432(%rbp), %rdx
	leaq	-464(%rbp), %rsi
	movq	%rdx, -304(%rbp)
	movq	-304(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rcx, -312(%rbp)
	movq	-312(%rbp), %r8
	movq	(%r8), %r8
	movq	%rsi, -320(%rbp)
	movq	%rdi, -328(%rbp)
	movq	%r8, -336(%rbp)
	movq	-328(%rbp), %rsi
	movsd	(%rsi), %xmm0
	movq	-336(%rbp), %rsi
	subsd	(%rsi), %xmm0
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rsi
	movq	(%rsi), %rsi
	movsd	%xmm0, (%rsi)
	movq	%rdx, -352(%rbp)
	movq	-352(%rbp), %rdx
	movq	(%rdx), %rsi
	addq	$8, %rsi
	movq	%rsi, (%rdx)
	movq	%rcx, -360(%rbp)
	movq	-360(%rbp), %rcx
	movq	(%rcx), %rdx
	addq	$8, %rdx
	movq	%rdx, (%rcx)
	movq	%rax, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, (%rax)
	jmp	LBB62_4
LBB62_6:                                ## %_ZNSt3__19transformINS_11__wrap_iterIPdEES3_S3_NS_5minusIdEEEET1_T_S7_T0_S6_T2_.exit
	movq	-456(%rbp), %rax
	movq	%rax, -424(%rbp)
	movq	-424(%rbp), %rax
	movq	%rax, -536(%rbp)
	movq	-480(%rbp), %rax
	addq	$544, %rsp              ## imm = 0x220
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp292:
	.cfi_def_cfa_offset 16
Ltmp293:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp294:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEEC2ERKS3_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI64_0:
	.quad	4602678819172646912     ## double 0.5
LCPI64_1:
	.quad	4607182418800017408     ## double 1
LCPI64_2:
	.quad	4618441417868443648     ## double 6
	.section	__TEXT,__text,regular,pure_instructions
	.globl	__ZN3fid10FidFactory13LowPassFilterERNSt3__16vectorIdNS1_9allocatorIdEEEE
	.align	4, 0x90
__ZN3fid10FidFactory13LowPassFilterERNSt3__16vectorIdNS1_9allocatorIdEEEE: ## @_ZN3fid10FidFactory13LowPassFilterERNSt3__16vectorIdNS1_9allocatorIdEEEE
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin64:
	.cfi_lsda 16, Lexception64
## BB#0:
	pushq	%rbp
Ltmp323:
	.cfi_def_cfa_offset 16
Ltmp324:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp325:
	.cfi_def_cfa_register %rbp
	subq	$1360, %rsp             ## imm = 0x550
	movq	%rdi, %rax
	leaq	-1192(%rbp), %rcx
	movsd	LCPI64_0(%rip), %xmm0
	movq	__ZN3fid3sim11freq_larmorE@GOTPCREL(%rip), %r8
	leaq	-1080(%rbp), %r9
	leaq	-1104(%rbp), %r10
	movq	___stack_chk_guard@GOTPCREL(%rip), %r11
	movq	(%r11), %r11
	movq	%r11, -8(%rbp)
	movq	%rsi, -1160(%rbp)
	movq	%rdx, -1168(%rbp)
	movq	-1160(%rbp), %rdx
	movq	%rcx, -1152(%rbp)
	movq	-1152(%rbp), %rsi
	movq	%rsi, -1144(%rbp)
	movq	-1144(%rbp), %rsi
	movq	%rsi, -1136(%rbp)
	movq	-1136(%rbp), %rsi
	movq	%rsi, %r11
	movq	%r11, -1128(%rbp)
	movq	$0, (%rsi)
	movq	$0, 8(%rsi)
	addq	$16, %rsi
	movq	%rsi, -1112(%rbp)
	movq	$0, -1120(%rbp)
	movq	-1112(%rbp), %rsi
	movq	-1120(%rbp), %r11
	movq	%rsi, -1096(%rbp)
	movq	%r11, -1104(%rbp)
	movq	-1096(%rbp), %rsi
	movq	%r10, -1088(%rbp)
	movq	-1088(%rbp), %r10
	movq	(%r10), %r10
	movq	%rsi, -1072(%rbp)
	movq	%r10, -1080(%rbp)
	movq	-1072(%rbp), %rsi
	movq	%rsi, %r10
	movq	%r10, -1064(%rbp)
	movq	%r9, -1056(%rbp)
	movq	-1056(%rbp), %r9
	movq	(%r9), %r9
	movq	%r9, (%rsi)
	mulsd	(%r8), %xmm0
	movsd	%xmm0, -1200(%rbp)
	movq	%rcx, -1048(%rbp)
	movq	-1048(%rbp), %rcx
	movq	8(%rcx), %rsi
	movq	(%rcx), %rcx
	subq	%rcx, %rsi
	sarq	$3, %rsi
	cmpq	$0, %rsi
	movq	%rax, -1248(%rbp)       ## 8-byte Spill
	movq	%rdi, -1256(%rbp)       ## 8-byte Spill
	movq	%rdx, -1264(%rbp)       ## 8-byte Spill
	jne	LBB64_10
## BB#1:
	movq	-1264(%rbp), %rax       ## 8-byte Reload
	movslq	28(%rax), %rsi
Ltmp295:
	leaq	-1192(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm
Ltmp296:
	jmp	LBB64_2
LBB64_2:
	movl	$0, -1216(%rbp)
	movq	-1264(%rbp), %rax       ## 8-byte Reload
	movl	28(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, -1220(%rbp)
LBB64_3:                                ## =>This Inner Loop Header: Depth=1
	movl	$2, %eax
	movl	-1216(%rbp), %ecx
	movq	-1264(%rbp), %rdx       ## 8-byte Reload
	movl	28(%rdx), %esi
	movl	%eax, -1268(%rbp)       ## 4-byte Spill
	movl	%esi, %eax
	cltd
	movl	-1268(%rbp), %esi       ## 4-byte Reload
	idivl	%esi
	cmpl	%eax, %ecx
	jge	LBB64_9
## BB#4:                                ##   in Loop: Header=BB64_3 Depth=1
	leaq	-1192(%rbp), %rax
	movsd	LCPI64_1(%rip), %xmm0
	cvtsi2sdl	-1216(%rbp), %xmm1
	movq	-1264(%rbp), %rcx       ## 8-byte Reload
	movsd	16(%rcx), %xmm2
	cvtsi2sdl	28(%rcx), %xmm3
	mulsd	%xmm3, %xmm2
	mulsd	-1200(%rbp), %xmm2
	divsd	%xmm2, %xmm1
	movsd	LCPI64_2(%rip), %xmm2
	movsd	%xmm0, -1280(%rbp)      ## 8-byte Spill
	movaps	%xmm1, %xmm0
	movaps	%xmm2, %xmm1
	movq	%rax, -1288(%rbp)       ## 8-byte Spill
	callq	_pow
	movsd	%xmm0, -1232(%rbp)
	movsd	-1280(%rbp), %xmm0      ## 8-byte Reload
	addsd	-1232(%rbp), %xmm0
	movsd	-1280(%rbp), %xmm1      ## 8-byte Reload
	divsd	%xmm0, %xmm1
	movsd	LCPI64_0(%rip), %xmm0
	movsd	%xmm0, -1296(%rbp)      ## 8-byte Spill
	movaps	%xmm1, %xmm0
	movsd	-1296(%rbp), %xmm1      ## 8-byte Reload
	callq	_pow
	movslq	-1216(%rbp), %rax
	movq	-1288(%rbp), %rcx       ## 8-byte Reload
	movq	%rcx, -1032(%rbp)
	movq	%rax, -1040(%rbp)
	movq	-1032(%rbp), %rax
	movq	-1040(%rbp), %rdx
	movq	(%rax), %rax
	shlq	$3, %rdx
	addq	%rdx, %rax
	movsd	%xmm0, -1304(%rbp)      ## 8-byte Spill
	movq	%rax, -1312(%rbp)       ## 8-byte Spill
## BB#5:                                ##   in Loop: Header=BB64_3 Depth=1
	leaq	-1192(%rbp), %rax
	movq	-1312(%rbp), %rcx       ## 8-byte Reload
	movsd	-1304(%rbp), %xmm0      ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movl	-1216(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -1216(%rbp)
	movslq	%edx, %rdi
	movq	%rax, -1016(%rbp)
	movq	%rdi, -1024(%rbp)
	movq	-1016(%rbp), %rax
	movq	-1024(%rbp), %rdi
	movq	(%rax), %rax
	shlq	$3, %rdi
	addq	%rdi, %rax
	movq	%rax, -1320(%rbp)       ## 8-byte Spill
## BB#6:                                ##   in Loop: Header=BB64_3 Depth=1
	leaq	-1192(%rbp), %rax
	movq	-1320(%rbp), %rcx       ## 8-byte Reload
	movsd	(%rcx), %xmm0
	movl	-1220(%rbp), %edx
	movl	%edx, %esi
	addl	$4294967295, %esi       ## imm = 0xFFFFFFFF
	movl	%esi, -1220(%rbp)
	movslq	%edx, %rdi
	movq	%rax, -1000(%rbp)
	movq	%rdi, -1008(%rbp)
	movq	-1000(%rbp), %rax
	movq	-1008(%rbp), %rdi
	movq	(%rax), %rax
	shlq	$3, %rdi
	addq	%rdi, %rax
	movsd	%xmm0, -1328(%rbp)      ## 8-byte Spill
	movq	%rax, -1336(%rbp)       ## 8-byte Spill
## BB#7:                                ##   in Loop: Header=BB64_3 Depth=1
	movq	-1336(%rbp), %rax       ## 8-byte Reload
	movsd	-1328(%rbp), %xmm0      ## 8-byte Reload
	movsd	%xmm0, (%rax)
	jmp	LBB64_3
LBB64_8:
Ltmp299:
	movl	%edx, %ecx
	movq	%rax, -1208(%rbp)
	movl	%ecx, -1212(%rbp)
	jmp	LBB64_34
LBB64_9:
	jmp	LBB64_10
LBB64_10:
	movq	-1168(%rbp), %rax
	movq	%rax, -984(%rbp)
	movq	$0, -992(%rbp)
	movq	-984(%rbp), %rax
	movq	-992(%rbp), %rcx
	movq	(%rax), %rax
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	%rax, -1344(%rbp)       ## 8-byte Spill
## BB#11:
	movq	-1168(%rbp), %rax
	movq	%rax, -976(%rbp)
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	subq	%rcx, %rax
	shrq	$3, %rax
	movl	%eax, %edx
Ltmp297:
	leaq	-176(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$1, %r8d
	movq	-1344(%rbp), %rsi       ## 8-byte Reload
	callq	__ZN4arma3ColIdEC1EPdjbb
Ltmp298:
	jmp	LBB64_12
LBB64_12:
	leaq	-1192(%rbp), %rax
	movq	%rax, -944(%rbp)
	movq	$0, -952(%rbp)
	movq	-944(%rbp), %rax
	movq	-952(%rbp), %rcx
	movq	(%rax), %rax
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	%rax, -1352(%rbp)       ## 8-byte Spill
## BB#13:
	leaq	-1192(%rbp), %rax
	movq	%rax, -936(%rbp)
	movq	-1192(%rbp), %rax
	movq	-1184(%rbp), %rcx
	subq	%rax, %rcx
	shrq	$3, %rcx
	movl	%ecx, %edx
Ltmp300:
	leaq	-336(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$1, %r8d
	movq	-1352(%rbp), %rsi       ## 8-byte Reload
	callq	__ZN4arma3ColIdEC1EPdjbb
Ltmp301:
	jmp	LBB64_14
LBB64_14:
Ltmp303:
	leaq	-704(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	__ZN4arma3fftINS_3ColIdEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr7is_realINS4_9elem_typeEEE5valueEKNS_4mtOpINSt3__17complexINS4_8pod_typeEEES4_NS_11op_fft_realEEEE6resultERKS4_
Ltmp304:
	jmp	LBB64_15
LBB64_15:
Ltmp306:
	leaq	-624(%rbp), %rdi
	leaq	-704(%rbp), %rsi
	callq	__ZN4arma3ColINSt3__17complexIdEEEC1INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE
Ltmp307:
	jmp	LBB64_16
LBB64_16:
	leaq	-704(%rbp), %rdi
	callq	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED1Ev
Ltmp309:
	leaq	-752(%rbp), %rdi
	leaq	-624(%rbp), %rsi
	leaq	-336(%rbp), %rdx
	callq	__ZN4armarmINS_3ColINSt3__17complexIdEEEENS1_IdEEEENS_10enable_if2IXaaaasr12is_arma_typeIT_EE5valuesr12is_arma_typeIT0_EE5valuesr12is_same_typeINS8_9elem_typeENS9_9elem_typeEEE2noEKNS_6mtGlueINS_12promote_typeISA_SB_E6resultES8_S9_NS_16glue_mixed_schurEEEE6resultERKS8_RKS9_
Ltmp310:
	jmp	LBB64_17
LBB64_17:
Ltmp311:
	leaq	-624(%rbp), %rdi
	leaq	-752(%rbp), %rsi
	callq	__ZN4arma3ColINSt3__17complexIdEEEaSINS_6mtGlueIS3_S4_NS0_IdEENS_16glue_mixed_schurEEEEERKS4_RKNS_4BaseIS3_T_EE
Ltmp312:
	movq	%rax, -1360(%rbp)       ## 8-byte Spill
	jmp	LBB64_18
LBB64_18:
	leaq	-752(%rbp), %rax
	movq	%rax, -928(%rbp)
	movq	%rax, -920(%rbp)
Ltmp314:
	leaq	-912(%rbp), %rdi
	leaq	-624(%rbp), %rsi
	callq	__ZN4arma4ifftINS_3ColINSt3__17complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr17is_complex_strictINS7_9elem_typeEEE5valueEKNS_2OpIS7_NS_10op_ifft_cxEEEE6resultERKS7_
Ltmp315:
	jmp	LBB64_19
LBB64_19:
Ltmp317:
	leaq	-832(%rbp), %rdi
	leaq	-912(%rbp), %rsi
	callq	__ZN4arma4realINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINSA_9elem_typeEEE3yesEKNS_4mtOpINSA_8pod_typeESA_NS_7op_realEEEE6resultERKSA_
Ltmp318:
	jmp	LBB64_20
LBB64_20:
Ltmp320:
	xorl	%eax, %eax
	movl	%eax, %edx
	leaq	-832(%rbp), %rsi
	movq	-1256(%rbp), %rdi       ## 8-byte Reload
	callq	__ZN4arma7conv_toINSt3__16vectorIdNS1_9allocatorIdEEEEE4fromIdNS_4mtOpIdNS_2OpINS_3ColINS1_7complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEES5_RKNS_4BaseIT_T0_EEPKNS_11arma_not_cxISJ_E6resultE
Ltmp321:
	jmp	LBB64_21
LBB64_21:
	leaq	-832(%rbp), %rdi
	callq	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED1Ev
	leaq	-912(%rbp), %rdi
	callq	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED1Ev
	leaq	-624(%rbp), %rdi
	movl	$1, -1236(%rbp)
	callq	__ZN4arma3ColINSt3__17complexIdEEED1Ev
	leaq	-336(%rbp), %rdi
	callq	__ZN4arma3ColIdED1Ev
	leaq	-176(%rbp), %rdi
	callq	__ZN4arma3ColIdED1Ev
	leaq	-1192(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	cmpq	-8(%rbp), %rdi
	jne	LBB64_36
## BB#22:                               ## %SP_return
	movq	-1248(%rbp), %rax       ## 8-byte Reload
	addq	$1360, %rsp             ## imm = 0x550
	popq	%rbp
	retq
LBB64_23:
Ltmp302:
	movl	%edx, %ecx
	movq	%rax, -1208(%rbp)
	movl	%ecx, -1212(%rbp)
	jmp	LBB64_33
LBB64_24:
Ltmp305:
	movl	%edx, %ecx
	movq	%rax, -1208(%rbp)
	movl	%ecx, -1212(%rbp)
	jmp	LBB64_32
LBB64_25:
Ltmp308:
	leaq	-704(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -1208(%rbp)
	movl	%ecx, -1212(%rbp)
	callq	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED1Ev
	jmp	LBB64_32
LBB64_26:
Ltmp316:
	movl	%edx, %ecx
	movq	%rax, -1208(%rbp)
	movl	%ecx, -1212(%rbp)
	jmp	LBB64_31
LBB64_27:
Ltmp313:
	leaq	-752(%rbp), %rcx
	movl	%edx, %esi
	movq	%rax, -1208(%rbp)
	movl	%esi, -1212(%rbp)
	movq	%rcx, -968(%rbp)
	movq	-968(%rbp), %rax
	movq	%rax, -960(%rbp)
	jmp	LBB64_31
LBB64_28:
Ltmp319:
	movl	%edx, %ecx
	movq	%rax, -1208(%rbp)
	movl	%ecx, -1212(%rbp)
	jmp	LBB64_30
LBB64_29:
Ltmp322:
	leaq	-832(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -1208(%rbp)
	movl	%ecx, -1212(%rbp)
	callq	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED1Ev
LBB64_30:
	leaq	-912(%rbp), %rdi
	callq	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED1Ev
LBB64_31:
	leaq	-624(%rbp), %rdi
	callq	__ZN4arma3ColINSt3__17complexIdEEED1Ev
LBB64_32:
	leaq	-336(%rbp), %rdi
	callq	__ZN4arma3ColIdED1Ev
LBB64_33:
	leaq	-176(%rbp), %rdi
	callq	__ZN4arma3ColIdED1Ev
LBB64_34:
	leaq	-1192(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
## BB#35:
	movq	-1208(%rbp), %rdi
	callq	__Unwind_Resume
LBB64_36:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc
Leh_func_end64:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table64:
Lexception64:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\237\201"              ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.ascii	"\234\001"              ## Call site table length
Lset90 = Ltmp295-Leh_func_begin64       ## >> Call Site 1 <<
	.long	Lset90
Lset91 = Ltmp296-Ltmp295                ##   Call between Ltmp295 and Ltmp296
	.long	Lset91
Lset92 = Ltmp299-Leh_func_begin64       ##     jumps to Ltmp299
	.long	Lset92
	.byte	0                       ##   On action: cleanup
Lset93 = Ltmp296-Leh_func_begin64       ## >> Call Site 2 <<
	.long	Lset93
Lset94 = Ltmp297-Ltmp296                ##   Call between Ltmp296 and Ltmp297
	.long	Lset94
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset95 = Ltmp297-Leh_func_begin64       ## >> Call Site 3 <<
	.long	Lset95
Lset96 = Ltmp298-Ltmp297                ##   Call between Ltmp297 and Ltmp298
	.long	Lset96
Lset97 = Ltmp299-Leh_func_begin64       ##     jumps to Ltmp299
	.long	Lset97
	.byte	0                       ##   On action: cleanup
Lset98 = Ltmp300-Leh_func_begin64       ## >> Call Site 4 <<
	.long	Lset98
Lset99 = Ltmp301-Ltmp300                ##   Call between Ltmp300 and Ltmp301
	.long	Lset99
Lset100 = Ltmp302-Leh_func_begin64      ##     jumps to Ltmp302
	.long	Lset100
	.byte	0                       ##   On action: cleanup
Lset101 = Ltmp303-Leh_func_begin64      ## >> Call Site 5 <<
	.long	Lset101
Lset102 = Ltmp304-Ltmp303               ##   Call between Ltmp303 and Ltmp304
	.long	Lset102
Lset103 = Ltmp305-Leh_func_begin64      ##     jumps to Ltmp305
	.long	Lset103
	.byte	0                       ##   On action: cleanup
Lset104 = Ltmp306-Leh_func_begin64      ## >> Call Site 6 <<
	.long	Lset104
Lset105 = Ltmp307-Ltmp306               ##   Call between Ltmp306 and Ltmp307
	.long	Lset105
Lset106 = Ltmp308-Leh_func_begin64      ##     jumps to Ltmp308
	.long	Lset106
	.byte	0                       ##   On action: cleanup
Lset107 = Ltmp309-Leh_func_begin64      ## >> Call Site 7 <<
	.long	Lset107
Lset108 = Ltmp310-Ltmp309               ##   Call between Ltmp309 and Ltmp310
	.long	Lset108
Lset109 = Ltmp316-Leh_func_begin64      ##     jumps to Ltmp316
	.long	Lset109
	.byte	0                       ##   On action: cleanup
Lset110 = Ltmp311-Leh_func_begin64      ## >> Call Site 8 <<
	.long	Lset110
Lset111 = Ltmp312-Ltmp311               ##   Call between Ltmp311 and Ltmp312
	.long	Lset111
Lset112 = Ltmp313-Leh_func_begin64      ##     jumps to Ltmp313
	.long	Lset112
	.byte	0                       ##   On action: cleanup
Lset113 = Ltmp314-Leh_func_begin64      ## >> Call Site 9 <<
	.long	Lset113
Lset114 = Ltmp315-Ltmp314               ##   Call between Ltmp314 and Ltmp315
	.long	Lset114
Lset115 = Ltmp316-Leh_func_begin64      ##     jumps to Ltmp316
	.long	Lset115
	.byte	0                       ##   On action: cleanup
Lset116 = Ltmp317-Leh_func_begin64      ## >> Call Site 10 <<
	.long	Lset116
Lset117 = Ltmp318-Ltmp317               ##   Call between Ltmp317 and Ltmp318
	.long	Lset117
Lset118 = Ltmp319-Leh_func_begin64      ##     jumps to Ltmp319
	.long	Lset118
	.byte	0                       ##   On action: cleanup
Lset119 = Ltmp320-Leh_func_begin64      ## >> Call Site 11 <<
	.long	Lset119
Lset120 = Ltmp321-Ltmp320               ##   Call between Ltmp320 and Ltmp321
	.long	Lset120
Lset121 = Ltmp322-Leh_func_begin64      ##     jumps to Ltmp322
	.long	Lset121
	.byte	0                       ##   On action: cleanup
Lset122 = Ltmp321-Leh_func_begin64      ## >> Call Site 12 <<
	.long	Lset122
Lset123 = Leh_func_end64-Ltmp321        ##   Call between Ltmp321 and Leh_func_end64
	.long	Lset123
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma3ColIdEC1EPdjbb
	.weak_def_can_be_hidden	__ZN4arma3ColIdEC1EPdjbb
	.align	4, 0x90
__ZN4arma3ColIdEC1EPdjbb:               ## @_ZN4arma3ColIdEC1EPdjbb
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp326:
	.cfi_def_cfa_offset 16
Ltmp327:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp328:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%r8b, %al
	movb	%cl, %r9b
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	andb	$1, %r9b
	movb	%r9b, -21(%rbp)
	andb	$1, %al
	movb	%al, -22(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	movb	-21(%rbp), %al
	movb	-22(%rbp), %r9b
	andb	$1, %al
	andb	$1, %r9b
	movzbl	%al, %ecx
	movzbl	%r9b, %r8d
	callq	__ZN4arma3ColIdEC2EPdjbb
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3fftINS_3ColIdEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr7is_realINS4_9elem_typeEEE5valueEKNS_4mtOpINSt3__17complexINS4_8pod_typeEEES4_NS_11op_fft_realEEEE6resultERKS4_
	.weak_def_can_be_hidden	__ZN4arma3fftINS_3ColIdEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr7is_realINS4_9elem_typeEEE5valueEKNS_4mtOpINSt3__17complexINS4_8pod_typeEEES4_NS_11op_fft_realEEEE6resultERKS4_
	.align	4, 0x90
__ZN4arma3fftINS_3ColIdEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr7is_realINS4_9elem_typeEEE5valueEKNS_4mtOpINSt3__17complexINS4_8pod_typeEEES4_NS_11op_fft_realEEEE6resultERKS4_: ## @_ZN4arma3fftINS_3ColIdEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr7is_realINS4_9elem_typeEEE5valueEKNS_4mtOpINSt3__17complexINS4_8pod_typeEEES4_NS_11op_fft_realEEEE6resultERKS4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp329:
	.cfi_def_cfa_offset 16
Ltmp330:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp331:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	xorl	%edx, %edx
	movl	$1, %ecx
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	callq	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC1ERKS5_jj
	movq	-16(%rbp), %rax         ## 8-byte Reload
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3ColINSt3__17complexIdEEEC1INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE
	.weak_def_can_be_hidden	__ZN4arma3ColINSt3__17complexIdEEEC1INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE
	.align	4, 0x90
__ZN4arma3ColINSt3__17complexIdEEEC1INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE: ## @_ZN4arma3ColINSt3__17complexIdEEEC1INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp332:
	.cfi_def_cfa_offset 16
Ltmp333:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp334:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma3ColINSt3__17complexIdEEEC2INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED1Ev
	.weak_def_can_be_hidden	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED1Ev
	.align	4, 0x90
__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED1Ev: ## @_ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp335:
	.cfi_def_cfa_offset 16
Ltmp336:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp337:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3ColINSt3__17complexIdEEEaSINS_6mtGlueIS3_S4_NS0_IdEENS_16glue_mixed_schurEEEEERKS4_RKNS_4BaseIS3_T_EE
	.weak_def_can_be_hidden	__ZN4arma3ColINSt3__17complexIdEEEaSINS_6mtGlueIS3_S4_NS0_IdEENS_16glue_mixed_schurEEEEERKS4_RKNS_4BaseIS3_T_EE
	.align	4, 0x90
__ZN4arma3ColINSt3__17complexIdEEEaSINS_6mtGlueIS3_S4_NS0_IdEENS_16glue_mixed_schurEEEEERKS4_RKNS_4BaseIS3_T_EE: ## @_ZN4arma3ColINSt3__17complexIdEEEaSINS_6mtGlueIS3_S4_NS0_IdEENS_16glue_mixed_schurEEEEERKS4_RKNS_4BaseIS3_T_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp338:
	.cfi_def_cfa_offset 16
Ltmp339:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp340:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-24(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	movq	%rax, %rsi
	callq	__ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIS3_EENS6_IdEENS_16glue_mixed_schurEEERKS4_RKNS_6mtGlueIS3_T_T0_T1_EE
	movq	-32(%rbp), %rsi         ## 8-byte Reload
	movq	%rax, -40(%rbp)         ## 8-byte Spill
	movq	%rsi, %rax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4armarmINS_3ColINSt3__17complexIdEEEENS1_IdEEEENS_10enable_if2IXaaaasr12is_arma_typeIT_EE5valuesr12is_arma_typeIT0_EE5valuesr12is_same_typeINS8_9elem_typeENS9_9elem_typeEEE2noEKNS_6mtGlueINS_12promote_typeISA_SB_E6resultES8_S9_NS_16glue_mixed_schurEEEE6resultERKS8_RKS9_
	.weak_def_can_be_hidden	__ZN4armarmINS_3ColINSt3__17complexIdEEEENS1_IdEEEENS_10enable_if2IXaaaasr12is_arma_typeIT_EE5valuesr12is_arma_typeIT0_EE5valuesr12is_same_typeINS8_9elem_typeENS9_9elem_typeEEE2noEKNS_6mtGlueINS_12promote_typeISA_SB_E6resultES8_S9_NS_16glue_mixed_schurEEEE6resultERKS8_RKS9_
	.align	4, 0x90
__ZN4armarmINS_3ColINSt3__17complexIdEEEENS1_IdEEEENS_10enable_if2IXaaaasr12is_arma_typeIT_EE5valuesr12is_arma_typeIT0_EE5valuesr12is_same_typeINS8_9elem_typeENS9_9elem_typeEEE2noEKNS_6mtGlueINS_12promote_typeISA_SB_E6resultES8_S9_NS_16glue_mixed_schurEEEE6resultERKS8_RKS9_: ## @_ZN4armarmINS_3ColINSt3__17complexIdEEEENS1_IdEEEENS_10enable_if2IXaaaasr12is_arma_typeIT_EE5valuesr12is_arma_typeIT0_EE5valuesr12is_same_typeINS8_9elem_typeENS9_9elem_typeEEE2noEKNS_6mtGlueINS_12promote_typeISA_SB_E6resultES8_S9_NS_16glue_mixed_schurEEEE6resultERKS8_RKS9_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp341:
	.cfi_def_cfa_offset 16
Ltmp342:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp343:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, %rax
	movq	%rsi, -56(%rbp)
	movq	%rdx, -64(%rbp)
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	movq	%rdi, -80(%rbp)         ## 8-byte Spill
	callq	__ZN4arma12promote_typeINSt3__17complexIdEEdE5checkEv
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	-80(%rbp), %rsi         ## 8-byte Reload
	movq	%rsi, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rdi
	movq	%rax, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	%rdi, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rdx
	movq	%rdx, (%rax)
	movq	-24(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-72(%rbp), %rax         ## 8-byte Reload
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma7conv_toINSt3__16vectorIdNS1_9allocatorIdEEEEE4fromIdNS_4mtOpIdNS_2OpINS_3ColINS1_7complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEES5_RKNS_4BaseIT_T0_EEPKNS_11arma_not_cxISJ_E6resultE
	.weak_def_can_be_hidden	__ZN4arma7conv_toINSt3__16vectorIdNS1_9allocatorIdEEEEE4fromIdNS_4mtOpIdNS_2OpINS_3ColINS1_7complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEES5_RKNS_4BaseIT_T0_EEPKNS_11arma_not_cxISJ_E6resultE
	.align	4, 0x90
__ZN4arma7conv_toINSt3__16vectorIdNS1_9allocatorIdEEEEE4fromIdNS_4mtOpIdNS_2OpINS_3ColINS1_7complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEES5_RKNS_4BaseIT_T0_EEPKNS_11arma_not_cxISJ_E6resultE: ## @_ZN4arma7conv_toINSt3__16vectorIdNS1_9allocatorIdEEEEE4fromIdNS_4mtOpIdNS_2OpINS_3ColINS1_7complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEES5_RKNS_4BaseIT_T0_EEPKNS_11arma_not_cxISJ_E6resultE
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin71:
	.cfi_lsda 16, Lexception71
## BB#0:
	pushq	%rbp
Ltmp352:
	.cfi_def_cfa_offset 16
Ltmp353:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp354:
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              ## imm = 0x140
	movq	%rdi, %rax
	leaq	-176(%rbp), %rcx
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -8(%rbp)
	movq	%rsi, -232(%rbp)
	movq	%rdx, -240(%rbp)
	movq	-232(%rbp), %rdx
	movq	%rdx, -224(%rbp)
	movq	-224(%rbp), %rdx
	movq	%rdi, -280(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	movq	%rax, -288(%rbp)        ## 8-byte Spill
	callq	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC1ERKSB_
	movb	$1, %r9b
	leaq	-176(%rbp), %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	cmpl	$1, (%rax)
	movq	%rax, -296(%rbp)        ## 8-byte Spill
	movb	%r9b, -297(%rbp)        ## 1-byte Spill
	je	LBB71_2
## BB#1:
	movq	-296(%rbp), %rax        ## 8-byte Reload
	cmpl	$1, 4(%rax)
	sete	%cl
	movb	%cl, -297(%rbp)         ## 1-byte Spill
LBB71_2:                                ## %_ZNK4arma3MatIdE6is_vecEv.exit
	movb	-297(%rbp), %al         ## 1-byte Reload
	movb	%al, -298(%rbp)         ## 1-byte Spill
## BB#3:
	xorl	%eax, %eax
	movb	%al, %cl
	movb	-298(%rbp), %dl         ## 1-byte Reload
	andb	$1, %dl
	movzbl	%dl, %eax
	cmpl	$0, %eax
	movb	%cl, -299(%rbp)         ## 1-byte Spill
	jne	LBB71_6
## BB#4:
	movq	-248(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	cmpl	$0, 8(%rax)
	sete	%cl
	movb	%cl, -300(%rbp)         ## 1-byte Spill
## BB#5:
	movb	-300(%rbp), %al         ## 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ecx
	cmpl	$0, %ecx
	sete	%al
	movb	%al, -299(%rbp)         ## 1-byte Spill
LBB71_6:
Ltmp344:
	movb	-299(%rbp), %al         ## 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	leaq	L_.str32(%rip), %rsi
	movl	%ecx, %edi
	callq	__ZN4arma10arma_checkIA57_cEEvbRKT_
Ltmp345:
	jmp	LBB71_7
LBB71_7:
	movq	-248(%rbp), %rax
	movl	8(%rax), %ecx
	movl	%ecx, -264(%rbp)
	movb	$0, -265(%rbp)
	movl	-264(%rbp), %ecx
	movl	%ecx, %esi
Ltmp346:
	movq	-280(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEEC1Em
Ltmp347:
	jmp	LBB71_8
LBB71_8:
	cmpl	$0, -264(%rbp)
	jbe	LBB71_15
## BB#9:
	movq	-280(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -192(%rbp)
	movq	$0, -200(%rbp)
	movq	-192(%rbp), %rcx
	movq	-200(%rbp), %rdx
	movq	(%rcx), %rcx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -312(%rbp)        ## 8-byte Spill
## BB#10:
	movq	-248(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movq	16(%rax), %rsi
	movq	%rsi, -320(%rbp)        ## 8-byte Spill
## BB#11:
	movl	-264(%rbp), %edx
Ltmp349:
	movq	-312(%rbp), %rdi        ## 8-byte Reload
	movq	-320(%rbp), %rsi        ## 8-byte Reload
	callq	__ZN4arma8arrayops7convertIddEEvPT_PKT0_j
Ltmp350:
	jmp	LBB71_12
LBB71_12:
	jmp	LBB71_15
LBB71_13:
Ltmp348:
	movl	%edx, %ecx
	movq	%rax, -256(%rbp)
	movl	%ecx, -260(%rbp)
	jmp	LBB71_19
LBB71_14:
Ltmp351:
	movl	%edx, %ecx
	movq	%rax, -256(%rbp)
	movl	%ecx, -260(%rbp)
	movq	-280(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	jmp	LBB71_19
LBB71_15:
	movb	$1, -265(%rbp)
	movl	$1, -272(%rbp)
	testb	$1, -265(%rbp)
	jne	LBB71_17
## BB#16:
	movq	-280(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
LBB71_17:
	leaq	-176(%rbp), %rdi
	callq	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED1Ev
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	cmpq	-8(%rbp), %rdi
	jne	LBB71_21
## BB#18:                               ## %SP_return
	movq	-288(%rbp), %rax        ## 8-byte Reload
	addq	$320, %rsp              ## imm = 0x140
	popq	%rbp
	retq
LBB71_19:
	leaq	-176(%rbp), %rdi
	callq	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED1Ev
## BB#20:
	movq	-256(%rbp), %rdi
	callq	__Unwind_Resume
LBB71_21:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc
Leh_func_end71:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table71:
Lexception71:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\266\200\200"          ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	52                      ## Call site table length
Lset124 = Leh_func_begin71-Leh_func_begin71 ## >> Call Site 1 <<
	.long	Lset124
Lset125 = Ltmp344-Leh_func_begin71      ##   Call between Leh_func_begin71 and Ltmp344
	.long	Lset125
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset126 = Ltmp344-Leh_func_begin71      ## >> Call Site 2 <<
	.long	Lset126
Lset127 = Ltmp347-Ltmp344               ##   Call between Ltmp344 and Ltmp347
	.long	Lset127
Lset128 = Ltmp348-Leh_func_begin71      ##     jumps to Ltmp348
	.long	Lset128
	.byte	0                       ##   On action: cleanup
Lset129 = Ltmp349-Leh_func_begin71      ## >> Call Site 3 <<
	.long	Lset129
Lset130 = Ltmp350-Ltmp349               ##   Call between Ltmp349 and Ltmp350
	.long	Lset130
Lset131 = Ltmp351-Leh_func_begin71      ##     jumps to Ltmp351
	.long	Lset131
	.byte	0                       ##   On action: cleanup
Lset132 = Ltmp350-Leh_func_begin71      ## >> Call Site 4 <<
	.long	Lset132
Lset133 = Leh_func_end71-Ltmp350        ##   Call between Ltmp350 and Leh_func_end71
	.long	Lset133
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma4realINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINSA_9elem_typeEEE3yesEKNS_4mtOpINSA_8pod_typeESA_NS_7op_realEEEE6resultERKSA_
	.weak_def_can_be_hidden	__ZN4arma4realINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINSA_9elem_typeEEE3yesEKNS_4mtOpINSA_8pod_typeESA_NS_7op_realEEEE6resultERKSA_
	.align	4, 0x90
__ZN4arma4realINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINSA_9elem_typeEEE3yesEKNS_4mtOpINSA_8pod_typeESA_NS_7op_realEEEE6resultERKSA_: ## @_ZN4arma4realINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINSA_9elem_typeEEE3yesEKNS_4mtOpINSA_8pod_typeESA_NS_7op_realEEEE6resultERKSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp355:
	.cfi_def_cfa_offset 16
Ltmp356:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp357:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	callq	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC1ERKS8_
	movq	-16(%rbp), %rax         ## 8-byte Reload
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4ifftINS_3ColINSt3__17complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr17is_complex_strictINS7_9elem_typeEEE5valueEKNS_2OpIS7_NS_10op_ifft_cxEEEE6resultERKS7_
	.weak_def_can_be_hidden	__ZN4arma4ifftINS_3ColINSt3__17complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr17is_complex_strictINS7_9elem_typeEEE5valueEKNS_2OpIS7_NS_10op_ifft_cxEEEE6resultERKS7_
	.align	4, 0x90
__ZN4arma4ifftINS_3ColINSt3__17complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr17is_complex_strictINS7_9elem_typeEEE5valueEKNS_2OpIS7_NS_10op_ifft_cxEEEE6resultERKS7_: ## @_ZN4arma4ifftINS_3ColINSt3__17complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr17is_complex_strictINS7_9elem_typeEEE5valueEKNS_2OpIS7_NS_10op_ifft_cxEEEE6resultERKS7_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp358:
	.cfi_def_cfa_offset 16
Ltmp359:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp360:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, %rax
	xorl	%edx, %edx
	movl	$1, %ecx
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	callq	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC1ERKS5_jj
	movq	-16(%rbp), %rax         ## 8-byte Reload
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED1Ev
	.weak_def_can_be_hidden	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED1Ev
	.align	4, 0x90
__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED1Ev: ## @_ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp361:
	.cfi_def_cfa_offset 16
Ltmp362:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp363:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED1Ev
	.weak_def_can_be_hidden	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED1Ev
	.align	4, 0x90
__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED1Ev: ## @_ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp364:
	.cfi_def_cfa_offset 16
Ltmp365:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp366:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3ColINSt3__17complexIdEEED1Ev
	.weak_def_can_be_hidden	__ZN4arma3ColINSt3__17complexIdEEED1Ev
	.align	4, 0x90
__ZN4arma3ColINSt3__17complexIdEEED1Ev: ## @_ZN4arma3ColINSt3__17complexIdEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp367:
	.cfi_def_cfa_offset 16
Ltmp368:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp369:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma3ColINSt3__17complexIdEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3ColIdED1Ev
	.weak_def_can_be_hidden	__ZN4arma3ColIdED1Ev
	.align	4, 0x90
__ZN4arma3ColIdED1Ev:                   ## @_ZN4arma3ColIdED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp370:
	.cfi_def_cfa_offset 16
Ltmp371:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp372:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma3ColIdED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
___cxx_global_var_init31:               ## @__cxx_global_var_init31
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp373:
	.cfi_def_cfa_offset 16
Ltmp374:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp375:
	.cfi_def_cfa_register %rbp
	movq	__ZGVN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE@GOTPCREL(%rip), %rax
	cmpb	$0, (%rax)
	jne	LBB78_2
## BB#1:
	movq	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE@GOTPCREL(%rip), %rdi
	callq	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC1Ev
	movq	__ZGVN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE@GOTPCREL(%rip), %rdi
	movq	$1, (%rdi)
LBB78_2:
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC1Ev
	.weak_def_can_be_hidden	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC1Ev
	.align	4, 0x90
__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC1Ev: ## @_ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp376:
	.cfi_def_cfa_offset 16
Ltmp377:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp378:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC1ERKSB_
	.weak_def_can_be_hidden	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC1ERKSB_
	.align	4, 0x90
__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC1ERKSB_: ## @_ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC1ERKSB_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp379:
	.cfi_def_cfa_offset 16
Ltmp380:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp381:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC2ERKSB_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10arma_checkIA57_cEEvbRKT_
	.weak_def_can_be_hidden	__ZN4arma10arma_checkIA57_cEEvbRKT_
	.align	4, 0x90
__ZN4arma10arma_checkIA57_cEEvbRKT_:    ## @_ZN4arma10arma_checkIA57_cEEvbRKT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp382:
	.cfi_def_cfa_offset 16
Ltmp383:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp384:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	movq	%rsi, -16(%rbp)
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edi
	cmpl	$1, %edi
	jne	LBB81_2
## BB#1:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	__ZN4arma10arma_boostL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE
	leaq	-24(%rbp), %rdi
	movq	%rax, -24(%rbp)
	callq	__ZN4armaL9arma_stopIPKcEEvRKT_
LBB81_2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEEC1Em
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEEC1Em
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEEC1Em: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEEC1Em
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp385:
	.cfi_def_cfa_offset 16
Ltmp386:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp387:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEEC2Em
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8arrayops7convertIddEEvPT_PKT0_j
	.weak_def_can_be_hidden	__ZN4arma8arrayops7convertIddEEvPT_PKT0_j
	.align	4, 0x90
__ZN4arma8arrayops7convertIddEEvPT_PKT0_j: ## @_ZN4arma8arrayops7convertIddEEvPT_PKT0_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp388:
	.cfi_def_cfa_offset 16
Ltmp389:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp390:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	%edx, -44(%rbp)
	movq	-40(%rbp), %rsi
	movq	%rsi, -56(%rbp)
	movq	-32(%rbp), %rsi
	cmpq	-56(%rbp), %rsi
	je	LBB83_5
## BB#1:
	movq	-32(%rbp), %rax
	movq	-56(%rbp), %rcx
	movl	-44(%rbp), %edx
	movq	%rax, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movl	%edx, -20(%rbp)
	cmpl	$16, -20(%rbp)
	ja	LBB83_3
## BB#2:
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	callq	__ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j
	jmp	LBB83_4
LBB83_3:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	shlq	$3, %rsi
	movq	%rax, %rdi
	movq	%rsi, -72(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	movq	-72(%rbp), %rdx         ## 8-byte Reload
	callq	_memcpy
LBB83_4:                                ## %_ZN4arma8arrayops4copyIdEEvPT_PKS2_j.exit
	jmp	LBB83_5
LBB83_5:
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED1Ev
	.weak_def_can_be_hidden	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED1Ev
	.align	4, 0x90
__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED1Ev: ## @_ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp391:
	.cfi_def_cfa_offset 16
Ltmp392:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp393:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED2Ev
	.weak_def_can_be_hidden	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED2Ev
	.align	4, 0x90
__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED2Ev: ## @_ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp394:
	.cfi_def_cfa_offset 16
Ltmp395:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp396:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma3MatIdED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatIdED1Ev
	.weak_def_can_be_hidden	__ZN4arma3MatIdED1Ev
	.align	4, 0x90
__ZN4arma3MatIdED1Ev:                   ## @_ZN4arma3MatIdED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp397:
	.cfi_def_cfa_offset 16
Ltmp398:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp399:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma3MatIdED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatIdED2Ev
	.weak_def_can_be_hidden	__ZN4arma3MatIdED2Ev
	.align	4, 0x90
__ZN4arma3MatIdED2Ev:                   ## @_ZN4arma3MatIdED2Ev
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin87:
	.cfi_lsda 16, Lexception87
## BB#0:
	pushq	%rbp
Ltmp403:
	.cfi_def_cfa_offset 16
Ltmp404:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp405:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	movzwl	14(%rdi), %eax
	cmpl	$0, %eax
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	jne	LBB87_7
## BB#1:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	cmpl	$16, 8(%rax)
	jbe	LBB87_6
## BB#2:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)         ## 8-byte Spill
## BB#3:
	movq	-48(%rbp), %rax         ## 8-byte Reload
	movq	(%rax), %rcx
	movq	%rcx, -16(%rbp)
Ltmp400:
	movq	%rcx, %rdi
	callq	_free
Ltmp401:
	jmp	LBB87_4
LBB87_4:                                ## %_ZN4arma6memory7releaseIKdEEvPT_.exit
	jmp	LBB87_5
LBB87_5:
	jmp	LBB87_6
LBB87_6:
	jmp	LBB87_7
LBB87_7:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	addq	$16, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -56(%rbp)         ## 8-byte Spill
## BB#8:
	movq	-56(%rbp), %rax         ## 8-byte Reload
	movq	$0, (%rax)
	addq	$64, %rsp
	popq	%rbp
	retq
LBB87_9:
Ltmp402:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -60(%rbp)         ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end87:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table87:
Lexception87:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	21                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	13                      ## Call site table length
Lset134 = Ltmp400-Leh_func_begin87      ## >> Call Site 1 <<
	.long	Lset134
Lset135 = Ltmp401-Ltmp400               ##   Call between Ltmp400 and Ltmp401
	.long	Lset135
Lset136 = Ltmp402-Leh_func_begin87      ##     jumps to Ltmp402
	.long	Lset136
	.byte	1                       ##   On action: 1
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j
	.weak_def_can_be_hidden	__ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j
	.align	4, 0x90
__ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j: ## @_ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp406:
	.cfi_def_cfa_offset 16
Ltmp407:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp408:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	decl	%edx
	movl	%edx, %esi
	subl	$15, %edx
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	movl	%edx, -36(%rbp)         ## 4-byte Spill
	ja	LBB88_17
## BB#19:
	leaq	LJTI88_0(%rip), %rax
	movq	-32(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB88_1:
	movq	-16(%rbp), %rax
	movsd	120(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 120(%rax)
LBB88_2:
	movq	-16(%rbp), %rax
	movsd	112(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 112(%rax)
LBB88_3:
	movq	-16(%rbp), %rax
	movsd	104(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 104(%rax)
LBB88_4:
	movq	-16(%rbp), %rax
	movsd	96(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 96(%rax)
LBB88_5:
	movq	-16(%rbp), %rax
	movsd	88(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 88(%rax)
LBB88_6:
	movq	-16(%rbp), %rax
	movsd	80(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 80(%rax)
LBB88_7:
	movq	-16(%rbp), %rax
	movsd	72(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 72(%rax)
LBB88_8:
	movq	-16(%rbp), %rax
	movsd	64(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 64(%rax)
LBB88_9:
	movq	-16(%rbp), %rax
	movsd	56(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 56(%rax)
LBB88_10:
	movq	-16(%rbp), %rax
	movsd	48(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 48(%rax)
LBB88_11:
	movq	-16(%rbp), %rax
	movsd	40(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 40(%rax)
LBB88_12:
	movq	-16(%rbp), %rax
	movsd	32(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 32(%rax)
LBB88_13:
	movq	-16(%rbp), %rax
	movsd	24(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 24(%rax)
LBB88_14:
	movq	-16(%rbp), %rax
	movsd	16(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 16(%rax)
LBB88_15:
	movq	-16(%rbp), %rax
	movsd	8(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, 8(%rax)
LBB88_16:
	movq	-16(%rbp), %rax
	movsd	(%rax), %xmm0
	movq	-8(%rbp), %rax
	movsd	%xmm0, (%rax)
LBB88_17:
	jmp	LBB88_18
LBB88_18:
	popq	%rbp
	retq
	.cfi_endproc
	.align	2, 0x90
L88_0_set_16 = LBB88_16-LJTI88_0
L88_0_set_15 = LBB88_15-LJTI88_0
L88_0_set_14 = LBB88_14-LJTI88_0
L88_0_set_13 = LBB88_13-LJTI88_0
L88_0_set_12 = LBB88_12-LJTI88_0
L88_0_set_11 = LBB88_11-LJTI88_0
L88_0_set_10 = LBB88_10-LJTI88_0
L88_0_set_9 = LBB88_9-LJTI88_0
L88_0_set_8 = LBB88_8-LJTI88_0
L88_0_set_7 = LBB88_7-LJTI88_0
L88_0_set_6 = LBB88_6-LJTI88_0
L88_0_set_5 = LBB88_5-LJTI88_0
L88_0_set_4 = LBB88_4-LJTI88_0
L88_0_set_3 = LBB88_3-LJTI88_0
L88_0_set_2 = LBB88_2-LJTI88_0
L88_0_set_1 = LBB88_1-LJTI88_0
LJTI88_0:
	.long	L88_0_set_16
	.long	L88_0_set_15
	.long	L88_0_set_14
	.long	L88_0_set_13
	.long	L88_0_set_12
	.long	L88_0_set_11
	.long	L88_0_set_10
	.long	L88_0_set_9
	.long	L88_0_set_8
	.long	L88_0_set_7
	.long	L88_0_set_6
	.long	L88_0_set_5
	.long	L88_0_set_4
	.long	L88_0_set_3
	.long	L88_0_set_2
	.long	L88_0_set_1

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEEC2Em
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEEC2Em
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEEC2Em: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEEC2Em
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin89:
	.cfi_lsda 16, Lexception89
## BB#0:
	pushq	%rbp
Ltmp414:
	.cfi_def_cfa_offset 16
Ltmp415:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp416:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	leaq	-32(%rbp), %rax
	leaq	-56(%rbp), %rcx
	movq	%rdi, -96(%rbp)
	movq	%rsi, -104(%rbp)
	movq	-96(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rdi, -88(%rbp)
	movq	-88(%rbp), %rdi
	movq	%rdi, %rdx
	movq	%rdx, -80(%rbp)
	movq	$0, (%rdi)
	movq	$0, 8(%rdi)
	addq	$16, %rdi
	movq	%rdi, -64(%rbp)
	movq	$0, -72(%rbp)
	movq	-64(%rbp), %rdx
	movq	-72(%rbp), %rdi
	movq	%rdx, -48(%rbp)
	movq	%rdi, -56(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	movq	%rdx, -16(%rbp)
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rcx)
	cmpq	$0, -104(%rbp)
	movq	%rsi, -128(%rbp)        ## 8-byte Spill
	jbe	LBB89_5
## BB#1:
	movq	-104(%rbp), %rsi
Ltmp409:
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
Ltmp410:
	jmp	LBB89_2
LBB89_2:
	movq	-104(%rbp), %rsi
Ltmp411:
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEm
Ltmp412:
	jmp	LBB89_3
LBB89_3:
	jmp	LBB89_5
LBB89_4:
Ltmp413:
	movl	%edx, %ecx
	movq	%rax, -112(%rbp)
	movl	%ecx, -116(%rbp)
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	jmp	LBB89_6
LBB89_5:
	addq	$128, %rsp
	popq	%rbp
	retq
LBB89_6:
	movq	-112(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end89:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table89:
Lexception89:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\234"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	26                      ## Call site table length
Lset137 = Ltmp409-Leh_func_begin89      ## >> Call Site 1 <<
	.long	Lset137
Lset138 = Ltmp412-Ltmp409               ##   Call between Ltmp409 and Ltmp412
	.long	Lset138
Lset139 = Ltmp413-Leh_func_begin89      ##     jumps to Ltmp413
	.long	Lset139
	.byte	0                       ##   On action: cleanup
Lset140 = Ltmp412-Leh_func_begin89      ## >> Call Site 2 <<
	.long	Lset140
Lset141 = Leh_func_end89-Ltmp412        ##   Call between Ltmp412 and Leh_func_end89
	.long	Lset141
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp417:
	.cfi_def_cfa_offset 16
Ltmp418:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp419:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	-104(%rbp), %rsi
	movq	-112(%rbp), %rdi
	movq	%rdi, -120(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	%rsi, -128(%rbp)        ## 8-byte Spill
	callq	__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv
	movq	-120(%rbp), %rsi        ## 8-byte Reload
	cmpq	%rax, %rsi
	jbe	LBB90_2
## BB#1:
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
LBB90_2:
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	-112(%rbp), %rcx
	movq	%rax, -64(%rbp)
	movq	%rcx, -72(%rbp)
	movq	-64(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-48(%rbp), %rax
	shlq	$3, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	__Znwm
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, 8(%rcx)
	movq	%rax, (%rcx)
	movq	(%rcx), %rax
	movq	-112(%rbp), %rdi
	shlq	$3, %rdi
	addq	%rdi, %rax
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEm
	addq	$128, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEm
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEm
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEm: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp420:
	.cfi_def_cfa_offset 16
Ltmp421:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp422:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -112(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-112(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rdi, -104(%rbp)
	movq	-104(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -96(%rbp)
	movq	-96(%rbp), %rdi
	movq	%rdi, -88(%rbp)
	movq	-88(%rbp), %rdi
	movq	%rdi, -128(%rbp)
	movq	-120(%rbp), %rdi
	movq	%rdi, -136(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-136(%rbp), %rax        ## 8-byte Reload
	movq	%rsi, -144(%rbp)        ## 8-byte Spill
	movq	%rax, %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
LBB91_1:                                ## =>This Inner Loop Header: Depth=1
	movq	-128(%rbp), %rax
	movq	-144(%rbp), %rcx        ## 8-byte Reload
	movq	8(%rcx), %rdx
	movq	%rdx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rax, -56(%rbp)
	movq	%rdx, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rax, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rax, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -152(%rbp)        ## 8-byte Spill
	je	LBB91_3
## BB#2:                                ##   in Loop: Header=BB91_1 Depth=1
	xorps	%xmm0, %xmm0
	movq	-152(%rbp), %rax        ## 8-byte Reload
	movq	-152(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -160(%rbp)        ## 8-byte Spill
LBB91_3:                                ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJEEEvRS2_PT_DpOT0_.exit
                                        ##   in Loop: Header=BB91_1 Depth=1
	movq	-144(%rbp), %rax        ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
	movq	-120(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -120(%rbp)
## BB#4:                                ##   in Loop: Header=BB91_1 Depth=1
	cmpq	$0, -120(%rbp)
	ja	LBB91_1
## BB#5:
	addq	$160, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	.weak_def_can_be_hidden	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	.align	4, 0x90
__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev: ## @_ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp423:
	.cfi_def_cfa_offset 16
Ltmp424:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp425:
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              ## imm = 0x110
	movq	%rdi, -248(%rbp)
	movq	-248(%rbp), %rdi
	cmpq	$0, (%rdi)
	movq	%rdi, -256(%rbp)        ## 8-byte Spill
	je	LBB92_5
## BB#1:
	movq	-256(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -240(%rbp)
	movq	-240(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rcx, -224(%rbp)
	movq	%rdx, -232(%rbp)
	movq	-224(%rbp), %rcx
	movq	%rcx, -264(%rbp)        ## 8-byte Spill
LBB92_2:                                ## =>This Inner Loop Header: Depth=1
	movq	-232(%rbp), %rax
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	cmpq	8(%rcx), %rax
	je	LBB92_4
## BB#3:                                ##   in Loop: Header=BB92_2 Depth=1
	movq	-264(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -208(%rbp)
	movq	-208(%rbp), %rcx
	movq	%rcx, -200(%rbp)
	movq	-200(%rbp), %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rdx, 8(%rax)
	movq	%rdx, -192(%rbp)
	movq	-192(%rbp), %rdx
	movq	%rcx, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-160(%rbp), %rcx
	movq	-168(%rbp), %rdx
	movq	%rcx, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-144(%rbp), %rcx
	movq	-152(%rbp), %rdx
	movq	%rcx, -120(%rbp)
	movq	%rdx, -128(%rbp)
	jmp	LBB92_2
LBB92_4:                                ## %_ZNSt3__113__vector_baseIdNS_9allocatorIdEEE5clearEv.exit
	movq	-256(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	(%rax), %rdx
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	(%rsi), %rsi
	subq	%rsi, %rdi
	sarq	$3, %rdi
	movq	%rcx, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%rdi, -112(%rbp)
	movq	-96(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	%rcx, -72(%rbp)
	movq	%rdx, -80(%rbp)
	movq	%rsi, -88(%rbp)
	movq	-80(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	__ZdlPv
LBB92_5:
	addq	$272, %rsp              ## imm = 0x110
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp426:
	.cfi_def_cfa_offset 16
Ltmp427:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp428:
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -128(%rbp)
	movq	%rsi, -136(%rbp)
	movq	-128(%rbp), %rsi
	movq	%rsi, -120(%rbp)
	movq	-120(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -112(%rbp)
	movq	-112(%rbp), %rdi
	movq	%rsi, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	8(%rdx), %r8
	movq	(%rdx), %rdx
	subq	%rdx, %r8
	sarq	$3, %r8
	shlq	$3, %r8
	addq	%r8, %rcx
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -72(%rbp)
	movq	-72(%rbp), %rdx
	movq	%rsi, -88(%rbp)
	movq	-88(%rbp), %r8
	movq	8(%r8), %r9
	movq	(%r8), %r8
	subq	%r8, %r9
	sarq	$3, %r9
	shlq	$3, %r9
	addq	%r9, %rdx
	movq	-136(%rbp), %r8
	shlq	$3, %r8
	addq	%r8, %rdx
	movq	%rdi, -144(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-144(%rbp), %rsi        ## 8-byte Reload
	movq	%rdx, -152(%rbp)        ## 8-byte Spill
	movq	%rax, %rdx
	movq	-152(%rbp), %r8         ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_
	addq	$160, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp429:
	.cfi_def_cfa_offset 16
Ltmp430:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp431:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv
	.weak_def_can_be_hidden	__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv
	.align	4, 0x90
__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv: ## @_ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp432:
	.cfi_def_cfa_offset 16
Ltmp433:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp434:
	.cfi_def_cfa_register %rbp
	subq	$56, %rsp
	leaq	-32(%rbp), %rax
	leaq	-168(%rbp), %rcx
	leaq	-160(%rbp), %rdx
	movq	$-1, %rsi
	movabsq	$2305843009213693951, %r8 ## imm = 0x1FFFFFFFFFFFFFFF
	movq	%rdi, -152(%rbp)
	movq	-152(%rbp), %rdi
	movq	%rdi, -144(%rbp)
	movq	-144(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -136(%rbp)
	movq	-136(%rbp), %rdi
	movq	%rdi, -128(%rbp)
	movq	-128(%rbp), %rdi
	movq	%rdi, -104(%rbp)
	movq	-104(%rbp), %rdi
	movq	%rdi, -96(%rbp)
	movq	-96(%rbp), %rdi
	movq	%rdi, -80(%rbp)
	movq	%r8, -160(%rbp)
	shrq	$1, %rsi
	movq	%rsi, -168(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	-56(%rbp), %rcx
	movq	-64(%rbp), %rdx
	movq	%rcx, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rax, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-24(%rbp), %rcx
	cmpq	(%rcx), %rax
	jae	LBB95_2
## BB#1:
	movq	-48(%rbp), %rax
	movq	%rax, -176(%rbp)        ## 8-byte Spill
	jmp	LBB95_3
LBB95_2:
	movq	-40(%rbp), %rax
	movq	%rax, -176(%rbp)        ## 8-byte Spill
LBB95_3:                                ## %_ZNSt3__13minImEERKT_S3_S3_.exit
	movq	-176(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -184(%rbp)        ## 8-byte Spill
## BB#4:
	movq	-184(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rax
	addq	$56, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEm
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEm
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEm: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp435:
	.cfi_def_cfa_offset 16
Ltmp436:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp437:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	-152(%rbp), %rsi
	movq	%rsi, -144(%rbp)
	movq	-144(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -136(%rbp)
	movq	-136(%rbp), %rdi
	movq	%rsi, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	%rsi, -96(%rbp)
	movq	-96(%rbp), %rdx
	movq	%rdx, -88(%rbp)
	movq	-88(%rbp), %rdx
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %r8
	addq	$16, %r8
	movq	%r8, -72(%rbp)
	movq	-72(%rbp), %r8
	movq	%r8, -64(%rbp)
	movq	-64(%rbp), %r8
	movq	(%r8), %r8
	movq	(%rdx), %rdx
	subq	%rdx, %r8
	sarq	$3, %r8
	shlq	$3, %r8
	addq	%r8, %rcx
	movq	%rsi, -112(%rbp)
	movq	-112(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -104(%rbp)
	movq	-104(%rbp), %rdx
	movq	-160(%rbp), %r8
	shlq	$3, %r8
	addq	%r8, %rdx
	movq	%rdi, -168(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-168(%rbp), %rsi        ## 8-byte Reload
	movq	%rdx, -176(%rbp)        ## 8-byte Spill
	movq	%rax, %rdx
	movq	-176(%rbp), %r8         ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_
	addq	$176, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__text,regular,pure_instructions
__ZN4armaL9arma_stopIPKcEEvRKT_:        ## @_ZN4armaL9arma_stopIPKcEEvRKT_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin97:
	.cfi_lsda 16, Lexception97
## BB#0:
	pushq	%rbp
Ltmp448:
	.cfi_def_cfa_offset 16
Ltmp449:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp450:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -80(%rbp)
	callq	__ZN4arma15get_stream_err1Ev
	movq	%rax, -88(%rbp)
	movl	$10, %ecx
	movq	%rax, %rdi
	movl	%ecx, %esi
	movl	%ecx, -132(%rbp)        ## 4-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	movq	-88(%rbp), %rdi
	leaq	L_.str33(%rip), %rsi
	movq	%rax, -144(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movq	-80(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rax, %rdi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movq	%rax, %rdi
	movl	-132(%rbp), %esi        ## 4-byte Reload
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	movq	-88(%rbp), %rdi
	movl	-132(%rbp), %esi        ## 4-byte Reload
	movq	%rax, -152(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	movq	-88(%rbp), %rdi
	movq	%rax, -160(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv
	movl	$16, %ecx
	movl	%ecx, %edi
	movq	%rax, -168(%rbp)        ## 8-byte Spill
	callq	___cxa_allocate_exception
	movq	%rax, %rdi
	movb	$1, -125(%rbp)
	movq	-80(%rbp), %rdx
	movq	(%rdx), %rdx
	leaq	-112(%rbp), %r8
	movq	%r8, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-64(%rbp), %r8
	movq	%r8, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	-56(%rbp), %r8
	movq	%r8, -8(%rbp)
Ltmp438:
	movq	%rdi, -176(%rbp)        ## 8-byte Spill
	movq	%r8, %rdi
	movq	%r8, -184(%rbp)         ## 8-byte Spill
	movq	%rax, -192(%rbp)        ## 8-byte Spill
	movq	%rdx, -200(%rbp)        ## 8-byte Spill
	callq	_strlen
Ltmp439:
	movq	%rax, -208(%rbp)        ## 8-byte Spill
	jmp	LBB97_1
LBB97_1:                                ## %.noexc
Ltmp440:
	movq	-200(%rbp), %rdi        ## 8-byte Reload
	movq	-184(%rbp), %rsi        ## 8-byte Reload
	movq	-208(%rbp), %rdx        ## 8-byte Reload
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm
Ltmp441:
	jmp	LBB97_2
LBB97_2:                                ## %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1EPKc.exit
	jmp	LBB97_3
LBB97_3:
Ltmp443:
	leaq	-112(%rbp), %rsi
	movq	-192(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt11logic_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
Ltmp444:
	jmp	LBB97_4
LBB97_4:
	movb	$0, -125(%rbp)
Ltmp445:
	movq	__ZTISt11logic_error@GOTPCREL(%rip), %rsi
	movq	__ZNSt11logic_errorD1Ev@GOTPCREL(%rip), %rdx
	movq	-176(%rbp), %rdi        ## 8-byte Reload
	callq	___cxa_throw
Ltmp446:
	jmp	LBB97_11
LBB97_5:
Ltmp442:
	movl	%edx, %ecx
	movq	%rax, -120(%rbp)
	movl	%ecx, -124(%rbp)
	jmp	LBB97_7
LBB97_6:
Ltmp447:
	leaq	-112(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -120(%rbp)
	movl	%ecx, -124(%rbp)
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
LBB97_7:
	testb	$1, -125(%rbp)
	jne	LBB97_8
	jmp	LBB97_9
LBB97_8:
	movq	-176(%rbp), %rdi        ## 8-byte Reload
	callq	___cxa_free_exception
LBB97_9:
	jmp	LBB97_10
LBB97_10:
	movq	-120(%rbp), %rdi
	callq	__Unwind_Resume
LBB97_11:
	.cfi_endproc
Leh_func_end97:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table97:
Lexception97:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\266\200\200"          ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	52                      ## Call site table length
Lset142 = Leh_func_begin97-Leh_func_begin97 ## >> Call Site 1 <<
	.long	Lset142
Lset143 = Ltmp438-Leh_func_begin97      ##   Call between Leh_func_begin97 and Ltmp438
	.long	Lset143
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset144 = Ltmp438-Leh_func_begin97      ## >> Call Site 2 <<
	.long	Lset144
Lset145 = Ltmp441-Ltmp438               ##   Call between Ltmp438 and Ltmp441
	.long	Lset145
Lset146 = Ltmp442-Leh_func_begin97      ##     jumps to Ltmp442
	.long	Lset146
	.byte	0                       ##   On action: cleanup
Lset147 = Ltmp443-Leh_func_begin97      ## >> Call Site 3 <<
	.long	Lset147
Lset148 = Ltmp446-Ltmp443               ##   Call between Ltmp443 and Ltmp446
	.long	Lset148
Lset149 = Ltmp447-Leh_func_begin97      ##     jumps to Ltmp447
	.long	Lset149
	.byte	0                       ##   On action: cleanup
Lset150 = Ltmp446-Leh_func_begin97      ## >> Call Site 4 <<
	.long	Lset150
Lset151 = Leh_func_end97-Ltmp446        ##   Call between Ltmp446 and Leh_func_end97
	.long	Lset151
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
	.align	4, 0x90
__ZN4arma10arma_boostL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE: ## @_ZN4arma10arma_boostL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp451:
	.cfi_def_cfa_offset 16
Ltmp452:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp453:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma15get_stream_err1Ev
	.weak_def_can_be_hidden	__ZN4arma15get_stream_err1Ev
	.align	4, 0x90
__ZN4arma15get_stream_err1Ev:           ## @_ZN4arma15get_stream_err1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp454:
	.cfi_def_cfa_offset 16
Ltmp455:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp456:
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movl	%eax, %edi
	callq	__ZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	.weak_def_can_be_hidden	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	.align	4, 0x90
__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c: ## @_ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp457:
	.cfi_def_cfa_offset 16
Ltmp458:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp459:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movb	%sil, %al
	leaq	-9(%rbp), %rsi
	movl	$1, %ecx
	movl	%ecx, %edx
	movq	%rdi, -8(%rbp)
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
	.weak_def_can_be_hidden	__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
	.align	4, 0x90
__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m: ## @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin101:
	.cfi_lsda 16, Lexception101
## BB#0:
	pushq	%rbp
Ltmp481:
	.cfi_def_cfa_offset 16
Ltmp482:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp483:
	.cfi_def_cfa_register %rbp
	subq	$400, %rsp              ## imm = 0x190
	movq	%rdi, -192(%rbp)
	movq	%rsi, -200(%rbp)
	movq	%rdx, -208(%rbp)
	movq	-192(%rbp), %rsi
Ltmp460:
	leaq	-224(%rbp), %rdi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_
Ltmp461:
	jmp	LBB101_1
LBB101_1:
	leaq	-224(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movb	(%rax), %cl
	movb	%cl, -257(%rbp)         ## 1-byte Spill
## BB#2:
	movb	-257(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB101_3
	jmp	LBB101_26
LBB101_3:
	leaq	-248(%rbp), %rax
	movq	-192(%rbp), %rcx
	movq	%rax, -168(%rbp)
	movq	%rcx, -176(%rbp)
	movq	-168(%rbp), %rax
	movq	-176(%rbp), %rcx
	movq	%rax, -152(%rbp)
	movq	%rcx, -160(%rbp)
	movq	-152(%rbp), %rax
	movq	-160(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-24(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, -136(%rbp)
	movq	-136(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rcx, (%rax)
	movq	-200(%rbp), %rsi
	movq	-192(%rbp), %rax
	movq	(%rax), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movl	8(%rax), %edi
	movq	%rsi, -272(%rbp)        ## 8-byte Spill
	movl	%edi, -276(%rbp)        ## 4-byte Spill
## BB#4:
	movl	-276(%rbp), %eax        ## 4-byte Reload
	andl	$176, %eax
	cmpl	$32, %eax
	jne	LBB101_6
## BB#5:
	movq	-200(%rbp), %rax
	addq	-208(%rbp), %rax
	movq	%rax, -288(%rbp)        ## 8-byte Spill
	jmp	LBB101_7
LBB101_6:
	movq	-200(%rbp), %rax
	movq	%rax, -288(%rbp)        ## 8-byte Spill
LBB101_7:
	movq	-288(%rbp), %rax        ## 8-byte Reload
	movq	-200(%rbp), %rcx
	addq	-208(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	-24(%rsi), %rsi
	addq	%rsi, %rdx
	movq	-192(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	-24(%rdi), %rdi
	addq	%rdi, %rsi
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rsi
	movl	144(%rsi), %r8d
	movl	$-1, -4(%rbp)
	movl	%r8d, -8(%rbp)
	movl	-4(%rbp), %r8d
	cmpl	-8(%rbp), %r8d
	movq	%rax, -296(%rbp)        ## 8-byte Spill
	movq	%rcx, -304(%rbp)        ## 8-byte Spill
	movq	%rdx, -312(%rbp)        ## 8-byte Spill
	movq	%rsi, -320(%rbp)        ## 8-byte Spill
	jne	LBB101_13
## BB#8:
	movq	-320(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -40(%rbp)
	movb	$32, -41(%rbp)
	movq	-40(%rbp), %rsi
Ltmp463:
	leaq	-56(%rbp), %rdi
	callq	__ZNKSt3__18ios_base6getlocEv
Ltmp464:
	jmp	LBB101_9
LBB101_9:                               ## %.noexc
	leaq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
Ltmp465:
	movq	__ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi
	movq	%rax, %rdi
	callq	__ZNKSt3__16locale9use_facetERNS0_2idE
Ltmp466:
	movq	%rax, -328(%rbp)        ## 8-byte Spill
	jmp	LBB101_10
LBB101_10:                              ## %_ZNSt3__19use_facetINS_5ctypeIcEEEERKT_RKNS_6localeE.exit.i.i
	movb	-41(%rbp), %al
	movq	-328(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -16(%rbp)
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	56(%rsi), %rsi
	movsbl	-17(%rbp), %edi
Ltmp467:
	movl	%edi, -332(%rbp)        ## 4-byte Spill
	movq	%rdx, %rdi
	movl	-332(%rbp), %r8d        ## 4-byte Reload
	movq	%rsi, -344(%rbp)        ## 8-byte Spill
	movl	%r8d, %esi
	movq	-344(%rbp), %rdx        ## 8-byte Reload
	callq	*%rdx
Ltmp468:
	movb	%al, -345(%rbp)         ## 1-byte Spill
	jmp	LBB101_12
LBB101_11:
Ltmp469:
	movl	%edx, %ecx
	movq	%rax, -64(%rbp)
	movl	%ecx, -68(%rbp)
	leaq	-56(%rbp), %rdi
	callq	__ZNSt3__16localeD1Ev
	movq	-64(%rbp), %rax
	movl	-68(%rbp), %ecx
	movq	%rax, -360(%rbp)        ## 8-byte Spill
	movl	%ecx, -364(%rbp)        ## 4-byte Spill
	jmp	LBB101_21
LBB101_12:                              ## %_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE5widenEc.exit.i
	leaq	-56(%rbp), %rdi
	callq	__ZNSt3__16localeD1Ev
	movb	-345(%rbp), %al         ## 1-byte Reload
	movsbl	%al, %ecx
	movq	-320(%rbp), %rdi        ## 8-byte Reload
	movl	%ecx, 144(%rdi)
LBB101_13:                              ## %_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE4fillEv.exit
	movq	-320(%rbp), %rax        ## 8-byte Reload
	movl	144(%rax), %ecx
	movb	%cl, %dl
	movb	%dl, -365(%rbp)         ## 1-byte Spill
## BB#14:
	movq	-248(%rbp), %rdi
Ltmp470:
	movb	-365(%rbp), %al         ## 1-byte Reload
	movsbl	%al, %r9d
	movq	-272(%rbp), %rsi        ## 8-byte Reload
	movq	-296(%rbp), %rdx        ## 8-byte Reload
	movq	-304(%rbp), %rcx        ## 8-byte Reload
	movq	-312(%rbp), %r8         ## 8-byte Reload
	callq	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
Ltmp471:
	movq	%rax, -376(%rbp)        ## 8-byte Spill
	jmp	LBB101_15
LBB101_15:
	leaq	-256(%rbp), %rax
	movq	-376(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -256(%rbp)
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB101_25
## BB#16:
	movq	-192(%rbp), %rax
	movq	(%rax), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$5, -124(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -104(%rbp)
	movl	$5, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	32(%rax), %edx
	orl	$5, %edx
Ltmp472:
	movq	%rax, %rdi
	movl	%edx, %esi
	callq	__ZNSt3__18ios_base5clearEj
Ltmp473:
	jmp	LBB101_17
LBB101_17:                              ## %_ZNSt3__19basic_iosIcNS_11char_traitsIcEEE8setstateEj.exit
	jmp	LBB101_18
LBB101_18:
	jmp	LBB101_25
LBB101_19:
Ltmp462:
	movl	%edx, %ecx
	movq	%rax, -232(%rbp)
	movl	%ecx, -236(%rbp)
	jmp	LBB101_22
LBB101_20:
Ltmp474:
	movl	%edx, %ecx
	movq	%rax, -360(%rbp)        ## 8-byte Spill
	movl	%ecx, -364(%rbp)        ## 4-byte Spill
	jmp	LBB101_21
LBB101_21:                              ## %.body
	movl	-364(%rbp), %eax        ## 4-byte Reload
	movq	-360(%rbp), %rcx        ## 8-byte Reload
	leaq	-224(%rbp), %rdi
	movq	%rcx, -232(%rbp)
	movl	%eax, -236(%rbp)
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev
LBB101_22:
	movq	-232(%rbp), %rdi
	callq	___cxa_begin_catch
	movq	-192(%rbp), %rdi
	movq	(%rdi), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rdi
Ltmp475:
	movq	%rax, -384(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv
Ltmp476:
	jmp	LBB101_23
LBB101_23:
	callq	___cxa_end_catch
LBB101_24:
	movq	-192(%rbp), %rax
	addq	$400, %rsp              ## imm = 0x190
	popq	%rbp
	retq
LBB101_25:
	jmp	LBB101_26
LBB101_26:
	leaq	-224(%rbp), %rdi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev
	jmp	LBB101_24
LBB101_27:
Ltmp477:
	movl	%edx, %ecx
	movq	%rax, -232(%rbp)
	movl	%ecx, -236(%rbp)
Ltmp478:
	callq	___cxa_end_catch
Ltmp479:
	jmp	LBB101_28
LBB101_28:
	jmp	LBB101_29
LBB101_29:
	movq	-232(%rbp), %rdi
	callq	__Unwind_Resume
LBB101_30:
Ltmp480:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -388(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end101:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table101:
Lexception101:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\201\201\200\200"      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	117                     ## Call site table length
Lset152 = Ltmp460-Leh_func_begin101     ## >> Call Site 1 <<
	.long	Lset152
Lset153 = Ltmp461-Ltmp460               ##   Call between Ltmp460 and Ltmp461
	.long	Lset153
Lset154 = Ltmp462-Leh_func_begin101     ##     jumps to Ltmp462
	.long	Lset154
	.byte	5                       ##   On action: 3
Lset155 = Ltmp463-Leh_func_begin101     ## >> Call Site 2 <<
	.long	Lset155
Lset156 = Ltmp464-Ltmp463               ##   Call between Ltmp463 and Ltmp464
	.long	Lset156
Lset157 = Ltmp474-Leh_func_begin101     ##     jumps to Ltmp474
	.long	Lset157
	.byte	5                       ##   On action: 3
Lset158 = Ltmp465-Leh_func_begin101     ## >> Call Site 3 <<
	.long	Lset158
Lset159 = Ltmp468-Ltmp465               ##   Call between Ltmp465 and Ltmp468
	.long	Lset159
Lset160 = Ltmp469-Leh_func_begin101     ##     jumps to Ltmp469
	.long	Lset160
	.byte	3                       ##   On action: 2
Lset161 = Ltmp470-Leh_func_begin101     ## >> Call Site 4 <<
	.long	Lset161
Lset162 = Ltmp473-Ltmp470               ##   Call between Ltmp470 and Ltmp473
	.long	Lset162
Lset163 = Ltmp474-Leh_func_begin101     ##     jumps to Ltmp474
	.long	Lset163
	.byte	5                       ##   On action: 3
Lset164 = Ltmp473-Leh_func_begin101     ## >> Call Site 5 <<
	.long	Lset164
Lset165 = Ltmp475-Ltmp473               ##   Call between Ltmp473 and Ltmp475
	.long	Lset165
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset166 = Ltmp475-Leh_func_begin101     ## >> Call Site 6 <<
	.long	Lset166
Lset167 = Ltmp476-Ltmp475               ##   Call between Ltmp475 and Ltmp476
	.long	Lset167
Lset168 = Ltmp477-Leh_func_begin101     ##     jumps to Ltmp477
	.long	Lset168
	.byte	0                       ##   On action: cleanup
Lset169 = Ltmp476-Leh_func_begin101     ## >> Call Site 7 <<
	.long	Lset169
Lset170 = Ltmp478-Ltmp476               ##   Call between Ltmp476 and Ltmp478
	.long	Lset170
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset171 = Ltmp478-Leh_func_begin101     ## >> Call Site 8 <<
	.long	Lset171
Lset172 = Ltmp479-Ltmp478               ##   Call between Ltmp478 and Ltmp479
	.long	Lset172
Lset173 = Ltmp480-Leh_func_begin101     ##     jumps to Ltmp480
	.long	Lset173
	.byte	5                       ##   On action: 3
Lset174 = Ltmp479-Leh_func_begin101     ## >> Call Site 9 <<
	.long	Lset174
Lset175 = Leh_func_end101-Ltmp479       ##   Call between Ltmp479 and Leh_func_end101
	.long	Lset175
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	0                       ## >> Action Record 1 <<
                                        ##   Cleanup
	.byte	0                       ##   No further actions
	.byte	1                       ## >> Action Record 2 <<
                                        ##   Catch TypeInfo 1
	.byte	125                     ##   Continue to action 1
	.byte	1                       ## >> Action Record 3 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.private_extern	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.globl	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.weak_def_can_be_hidden	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.align	4, 0x90
__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_: ## @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin102:
	.cfi_lsda 16, Lexception102
## BB#0:
	pushq	%rbp
Ltmp487:
	.cfi_def_cfa_offset 16
Ltmp488:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp489:
	.cfi_def_cfa_register %rbp
	subq	$480, %rsp              ## imm = 0x1E0
	movb	%r9b, %al
	movq	%rdi, -312(%rbp)
	movq	%rsi, -320(%rbp)
	movq	%rdx, -328(%rbp)
	movq	%rcx, -336(%rbp)
	movq	%r8, -344(%rbp)
	movb	%al, -345(%rbp)
	cmpq	$0, -312(%rbp)
	jne	LBB102_2
## BB#1:
	movq	-312(%rbp), %rax
	movq	%rax, -304(%rbp)
	jmp	LBB102_26
LBB102_2:
	movq	-336(%rbp), %rax
	movq	-320(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -360(%rbp)
	movq	-344(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -368(%rbp)
	movq	-368(%rbp), %rax
	cmpq	-360(%rbp), %rax
	jle	LBB102_4
## BB#3:
	movq	-360(%rbp), %rax
	movq	-368(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -368(%rbp)
	jmp	LBB102_5
LBB102_4:
	movq	$0, -368(%rbp)
LBB102_5:
	movq	-328(%rbp), %rax
	movq	-320(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -376(%rbp)
	cmpq	$0, -376(%rbp)
	jle	LBB102_9
## BB#6:
	movq	-312(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	-376(%rbp), %rdx
	movq	%rax, -224(%rbp)
	movq	%rcx, -232(%rbp)
	movq	%rdx, -240(%rbp)
	movq	-224(%rbp), %rax
	movq	(%rax), %rcx
	movq	96(%rcx), %rcx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %rdx
	movq	%rax, %rdi
	callq	*%rcx
	cmpq	-376(%rbp), %rax
	je	LBB102_8
## BB#7:
	movq	$0, -312(%rbp)
	movq	-312(%rbp), %rax
	movq	%rax, -304(%rbp)
	jmp	LBB102_26
LBB102_8:
	jmp	LBB102_9
LBB102_9:
	cmpq	$0, -368(%rbp)
	jle	LBB102_21
## BB#10:
	leaq	-400(%rbp), %rax
	movq	-368(%rbp), %rcx
	movb	-345(%rbp), %dl
	movq	%rax, -200(%rbp)
	movq	%rcx, -208(%rbp)
	movb	%dl, -209(%rbp)
	movq	-200(%rbp), %rax
	movq	-208(%rbp), %rcx
	movb	-209(%rbp), %dl
	movq	%rax, -176(%rbp)
	movq	%rcx, -184(%rbp)
	movb	%dl, -185(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rcx
	movq	%rcx, -160(%rbp)
	movq	-160(%rbp), %rcx
	movq	%rcx, -152(%rbp)
	movq	-152(%rbp), %rcx
	movq	%rcx, -144(%rbp)
	movq	-184(%rbp), %rsi
	movq	%rax, %rdi
	movsbl	-185(%rbp), %edx
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc
	leaq	-400(%rbp), %rax
	movq	-312(%rbp), %rcx
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rsi
	movq	%rsi, -112(%rbp)
	movq	-112(%rbp), %rsi
	movq	%rsi, -104(%rbp)
	movq	-104(%rbp), %rsi
	movzbl	(%rsi), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movq	%rcx, -424(%rbp)        ## 8-byte Spill
	movq	%rax, -432(%rbp)        ## 8-byte Spill
	je	LBB102_12
## BB#11:
	movq	-432(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -440(%rbp)        ## 8-byte Spill
	jmp	LBB102_13
LBB102_12:
	movq	-432(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rcx
	movq	%rcx, -88(%rbp)
	movq	-88(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -72(%rbp)
	movq	-72(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rcx
	movq	%rcx, -440(%rbp)        ## 8-byte Spill
LBB102_13:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit
	movq	-440(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-368(%rbp), %rcx
	movq	-424(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -8(%rbp)
	movq	%rax, -16(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rsi
	movq	96(%rsi), %rsi
	movq	-16(%rbp), %rdi
Ltmp484:
	movq	%rdi, -448(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	movq	-448(%rbp), %rax        ## 8-byte Reload
	movq	%rsi, -456(%rbp)        ## 8-byte Spill
	movq	%rax, %rsi
	movq	%rcx, %rdx
	movq	-456(%rbp), %rcx        ## 8-byte Reload
	callq	*%rcx
Ltmp485:
	movq	%rax, -464(%rbp)        ## 8-byte Spill
	jmp	LBB102_14
LBB102_14:                              ## %_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5sputnEPKcl.exit
	jmp	LBB102_15
LBB102_15:
	movq	-464(%rbp), %rax        ## 8-byte Reload
	cmpq	-368(%rbp), %rax
	je	LBB102_18
## BB#16:
	movq	$0, -312(%rbp)
	movq	-312(%rbp), %rax
	movq	%rax, -304(%rbp)
	movl	$1, -416(%rbp)
	jmp	LBB102_19
LBB102_17:
Ltmp486:
	leaq	-400(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -408(%rbp)
	movl	%ecx, -412(%rbp)
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	jmp	LBB102_27
LBB102_18:
	movl	$0, -416(%rbp)
LBB102_19:
	leaq	-400(%rbp), %rdi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	movl	-416(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	movl	%eax, -468(%rbp)        ## 4-byte Spill
	movl	%ecx, -472(%rbp)        ## 4-byte Spill
	je	LBB102_26
	jmp	LBB102_29
LBB102_29:
	movl	-468(%rbp), %eax        ## 4-byte Reload
	testl	%eax, %eax
	jne	LBB102_28
	jmp	LBB102_20
LBB102_20:
	jmp	LBB102_21
LBB102_21:
	movq	-336(%rbp), %rax
	movq	-328(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -376(%rbp)
	cmpq	$0, -376(%rbp)
	jle	LBB102_25
## BB#22:
	movq	-312(%rbp), %rax
	movq	-328(%rbp), %rcx
	movq	-376(%rbp), %rdx
	movq	%rax, -248(%rbp)
	movq	%rcx, -256(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-248(%rbp), %rax
	movq	(%rax), %rcx
	movq	96(%rcx), %rcx
	movq	-256(%rbp), %rsi
	movq	-264(%rbp), %rdx
	movq	%rax, %rdi
	callq	*%rcx
	cmpq	-376(%rbp), %rax
	je	LBB102_24
## BB#23:
	movq	$0, -312(%rbp)
	movq	-312(%rbp), %rax
	movq	%rax, -304(%rbp)
	jmp	LBB102_26
LBB102_24:
	jmp	LBB102_25
LBB102_25:
	movq	-344(%rbp), %rax
	movq	%rax, -272(%rbp)
	movq	$0, -280(%rbp)
	movq	-272(%rbp), %rax
	movq	24(%rax), %rcx
	movq	%rcx, -288(%rbp)
	movq	-280(%rbp), %rcx
	movq	%rcx, 24(%rax)
	movq	-312(%rbp), %rax
	movq	%rax, -304(%rbp)
LBB102_26:
	movq	-304(%rbp), %rax
	addq	$480, %rsp              ## imm = 0x1E0
	popq	%rbp
	retq
LBB102_27:
	movq	-408(%rbp), %rdi
	callq	__Unwind_Resume
LBB102_28:
	.cfi_endproc
Leh_func_end102:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table102:
Lexception102:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset176 = Leh_func_begin102-Leh_func_begin102 ## >> Call Site 1 <<
	.long	Lset176
Lset177 = Ltmp484-Leh_func_begin102     ##   Call between Leh_func_begin102 and Ltmp484
	.long	Lset177
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset178 = Ltmp484-Leh_func_begin102     ## >> Call Site 2 <<
	.long	Lset178
Lset179 = Ltmp485-Ltmp484               ##   Call between Ltmp484 and Ltmp485
	.long	Lset179
Lset180 = Ltmp486-Leh_func_begin102     ##     jumps to Ltmp486
	.long	Lset180
	.byte	0                       ##   On action: cleanup
Lset181 = Ltmp485-Leh_func_begin102     ## >> Call Site 3 <<
	.long	Lset181
Lset182 = Leh_func_end102-Ltmp485       ##   Call between Ltmp485 and Leh_func_end102
	.long	Lset182
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_
	.weak_def_can_be_hidden	__ZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_
	.align	4, 0x90
__ZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_: ## @_ZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp490:
	.cfi_def_cfa_offset 16
Ltmp491:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp492:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	LBB103_2
## BB#1:
	movq	__ZZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err1@GOTPCREL(%rip), %rax
	movq	-8(%rbp), %rcx
	movq	%rcx, (%rax)
LBB103_2:
	movq	__ZZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err1@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC2ERKSB_
	.weak_def_can_be_hidden	__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC2ERKSB_
	.align	4, 0x90
__ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC2ERKSB_: ## @_ZN4arma12quasi_unwrapINS_4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEEEC2ERKSB_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp493:
	.cfi_def_cfa_offset 16
Ltmp494:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp495:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma3MatIdEC1INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatIdEC1INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE
	.weak_def_can_be_hidden	__ZN4arma3MatIdEC1INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE
	.align	4, 0x90
__ZN4arma3MatIdEC1INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE: ## @_ZN4arma3MatIdEC1INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp496:
	.cfi_def_cfa_offset 16
Ltmp497:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp498:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma3MatIdEC2INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatIdEC2INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE
	.weak_def_can_be_hidden	__ZN4arma3MatIdEC2INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE
	.align	4, 0x90
__ZN4arma3MatIdEC2INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE: ## @_ZN4arma3MatIdEC2INS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp499:
	.cfi_def_cfa_offset 16
Ltmp500:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp501:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movl	$0, (%rsi)
	movl	$0, 4(%rsi)
	movl	$0, 8(%rsi)
	movw	$0, 12(%rsi)
	movw	$0, 14(%rsi)
	movq	$0, 16(%rsi)
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         ## 8-byte Reload
	callq	__ZN4arma7op_real5applyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEEvRNS_3MatINT_8pod_typeEEERKNS_4mtOpISC_SB_S0_EE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma7op_real5applyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEEvRNS_3MatINT_8pod_typeEEERKNS_4mtOpISC_SB_S0_EE
	.weak_def_can_be_hidden	__ZN4arma7op_real5applyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEEvRNS_3MatINT_8pod_typeEEERKNS_4mtOpISC_SB_S0_EE
	.align	4, 0x90
__ZN4arma7op_real5applyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEEvRNS_3MatINT_8pod_typeEEERKNS_4mtOpISC_SB_S0_EE: ## @_ZN4arma7op_real5applyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEEvRNS_3MatINT_8pod_typeEEERKNS_4mtOpISC_SB_S0_EE
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin107:
	.cfi_lsda 16, Lexception107
## BB#0:
	pushq	%rbp
Ltmp505:
	.cfi_def_cfa_offset 16
Ltmp506:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp507:
	.cfi_def_cfa_register %rbp
	subq	$480, %rsp              ## imm = 0x1E0
	leaq	-304(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -8(%rbp)
	movq	%rdi, -376(%rbp)
	movq	%rsi, -384(%rbp)
	movq	-384(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC1ERKS8_
	leaq	-304(%rbp), %rax
	movq	%rax, -368(%rbp)
	movq	-368(%rbp), %rax
	movl	(%rax), %edx
	movl	%edx, -440(%rbp)        ## 4-byte Spill
## BB#1:
	leaq	-304(%rbp), %rax
	movl	-440(%rbp), %ecx        ## 4-byte Reload
	movl	%ecx, -388(%rbp)
	movq	%rax, -360(%rbp)
	movq	-360(%rbp), %rax
	movl	4(%rax), %edx
	movl	%edx, -444(%rbp)        ## 4-byte Spill
## BB#2:
	movl	-444(%rbp), %eax        ## 4-byte Reload
	movl	%eax, -408(%rbp)
	movq	-376(%rbp), %rdi
	movl	-388(%rbp), %esi
Ltmp502:
	movl	%eax, %edx
	callq	__ZN4arma3MatIdE8set_sizeEjj
Ltmp503:
	jmp	LBB107_3
LBB107_3:
	movq	-376(%rbp), %rax
	movq	%rax, -352(%rbp)
	movq	-352(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -456(%rbp)        ## 8-byte Spill
## BB#4:
	leaq	-304(%rbp), %rax
	movq	-456(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -416(%rbp)
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rax
	movl	8(%rax), %edx
	movl	%edx, -460(%rbp)        ## 4-byte Spill
## BB#5:
	leaq	-304(%rbp), %rax
	movl	-460(%rbp), %ecx        ## 4-byte Reload
	movl	%ecx, -420(%rbp)
	movq	%rax, -328(%rbp)
	movq	-328(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-320(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -472(%rbp)        ## 8-byte Spill
## BB#6:
	movq	-472(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -432(%rbp)
	movl	$0, -436(%rbp)
LBB107_7:                               ## =>This Inner Loop Header: Depth=1
	movl	-436(%rbp), %eax
	cmpl	-420(%rbp), %eax
	jae	LBB107_12
## BB#8:                                ##   in Loop: Header=BB107_7 Depth=1
	movl	-436(%rbp), %eax
	movl	%eax, %ecx
	movq	-432(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	%rdx, -344(%rbp)
	movq	-344(%rbp), %rcx
	movq	%rcx, -336(%rbp)
	movq	-336(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movsd	%xmm0, -480(%rbp)       ## 8-byte Spill
## BB#9:                                ##   in Loop: Header=BB107_7 Depth=1
	movl	-436(%rbp), %eax
	movl	%eax, %ecx
	movq	-416(%rbp), %rdx
	movsd	-480(%rbp), %xmm0       ## 8-byte Reload
	movsd	%xmm0, (%rdx,%rcx,8)
## BB#10:                               ##   in Loop: Header=BB107_7 Depth=1
	movl	-436(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -436(%rbp)
	jmp	LBB107_7
LBB107_11:
Ltmp504:
	leaq	-304(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -400(%rbp)
	movl	%ecx, -404(%rbp)
	callq	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED1Ev
	jmp	LBB107_14
LBB107_12:
	leaq	-304(%rbp), %rdi
	callq	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED1Ev
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdi
	movq	(%rdi), %rdi
	cmpq	-8(%rbp), %rdi
	jne	LBB107_15
## BB#13:                               ## %SP_return
	addq	$480, %rsp              ## imm = 0x1E0
	popq	%rbp
	retq
LBB107_14:
	movq	-400(%rbp), %rdi
	callq	__Unwind_Resume
LBB107_15:                              ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc
Leh_func_end107:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table107:
Lexception107:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset183 = Leh_func_begin107-Leh_func_begin107 ## >> Call Site 1 <<
	.long	Lset183
Lset184 = Ltmp502-Leh_func_begin107     ##   Call between Leh_func_begin107 and Ltmp502
	.long	Lset184
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset185 = Ltmp502-Leh_func_begin107     ## >> Call Site 2 <<
	.long	Lset185
Lset186 = Ltmp503-Ltmp502               ##   Call between Ltmp502 and Ltmp503
	.long	Lset186
Lset187 = Ltmp504-Leh_func_begin107     ##     jumps to Ltmp504
	.long	Lset187
	.byte	0                       ##   On action: cleanup
Lset188 = Ltmp503-Leh_func_begin107     ## >> Call Site 3 <<
	.long	Lset188
Lset189 = Leh_func_end107-Ltmp503       ##   Call between Ltmp503 and Leh_func_end107
	.long	Lset189
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC1ERKS8_
	.weak_def_can_be_hidden	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC1ERKS8_
	.align	4, 0x90
__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC1ERKS8_: ## @_ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC1ERKS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp508:
	.cfi_def_cfa_offset 16
Ltmp509:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp510:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatIdE8set_sizeEjj
	.weak_def_can_be_hidden	__ZN4arma3MatIdE8set_sizeEjj
	.align	4, 0x90
__ZN4arma3MatIdE8set_sizeEjj:           ## @_ZN4arma3MatIdE8set_sizeEjj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp511:
	.cfi_def_cfa_offset 16
Ltmp512:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp513:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	__ZN4arma3MatIdE9init_warmEjj
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED1Ev
	.weak_def_can_be_hidden	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED1Ev
	.align	4, 0x90
__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED1Ev: ## @_ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp514:
	.cfi_def_cfa_offset 16
Ltmp515:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp516:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED2Ev
	.weak_def_can_be_hidden	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED2Ev
	.align	4, 0x90
__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED2Ev: ## @_ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp517:
	.cfi_def_cfa_offset 16
Ltmp518:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp519:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma3MatINSt3__17complexIdEEED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEED1Ev
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEED1Ev
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEED1Ev: ## @_ZN4arma3MatINSt3__17complexIdEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp520:
	.cfi_def_cfa_offset 16
Ltmp521:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp522:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma3MatINSt3__17complexIdEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEED2Ev
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEED2Ev
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEED2Ev: ## @_ZN4arma3MatINSt3__17complexIdEEED2Ev
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin113:
	.cfi_lsda 16, Lexception113
## BB#0:
	pushq	%rbp
Ltmp526:
	.cfi_def_cfa_offset 16
Ltmp527:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp528:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	movzwl	14(%rdi), %eax
	cmpl	$0, %eax
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	jne	LBB113_7
## BB#1:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	cmpl	$16, 8(%rax)
	jbe	LBB113_6
## BB#2:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	%rax, -48(%rbp)         ## 8-byte Spill
## BB#3:
	movq	-48(%rbp), %rax         ## 8-byte Reload
	movq	(%rax), %rcx
	movq	%rcx, -16(%rbp)
Ltmp523:
	movq	%rcx, %rdi
	callq	_free
Ltmp524:
	jmp	LBB113_4
LBB113_4:                               ## %_ZN4arma6memory7releaseIKNSt3__17complexIdEEEEvPT_.exit
	jmp	LBB113_5
LBB113_5:
	jmp	LBB113_6
LBB113_6:
	jmp	LBB113_7
LBB113_7:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	addq	$16, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -56(%rbp)         ## 8-byte Spill
## BB#8:
	movq	-56(%rbp), %rax         ## 8-byte Reload
	movq	$0, (%rax)
	addq	$64, %rsp
	popq	%rbp
	retq
LBB113_9:
Ltmp525:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -60(%rbp)         ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end113:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table113:
Lexception113:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	21                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	13                      ## Call site table length
Lset190 = Ltmp523-Leh_func_begin113     ## >> Call Site 1 <<
	.long	Lset190
Lset191 = Ltmp524-Ltmp523               ##   Call between Ltmp523 and Ltmp524
	.long	Lset191
Lset192 = Ltmp525-Leh_func_begin113     ##     jumps to Ltmp525
	.long	Lset192
	.byte	1                       ##   On action: 1
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__literal4,4byte_literals
	.align	2
LCPI114_0:
	.long	1333788672              ## float 4.2949673E+9
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma3MatIdE9init_warmEjj
	.weak_def_can_be_hidden	__ZN4arma3MatIdE9init_warmEjj
	.align	4, 0x90
__ZN4arma3MatIdE9init_warmEjj:          ## @_ZN4arma3MatIdE9init_warmEjj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp529:
	.cfi_def_cfa_offset 16
Ltmp530:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp531:
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              ## imm = 0x110
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movl	%edx, -224(%rbp)
	movq	-216(%rbp), %rdi
	movl	(%rdi), %edx
	cmpl	-220(%rbp), %edx
	movq	%rdi, -264(%rbp)        ## 8-byte Spill
	jne	LBB114_3
## BB#1:
	movq	-264(%rbp), %rax        ## 8-byte Reload
	movl	4(%rax), %ecx
	cmpl	-224(%rbp), %ecx
	jne	LBB114_3
## BB#2:
	jmp	LBB114_41
LBB114_3:
	leaq	L_.str34(%rip), %rax
	leaq	-240(%rbp), %rcx
	leaq	-225(%rbp), %rdx
	movb	$0, -225(%rbp)
	movq	$0, -240(%rbp)
	movq	-264(%rbp), %rsi        ## 8-byte Reload
	movw	12(%rsi), %di
	movw	%di, -242(%rbp)
	movw	14(%rsi), %di
	movw	%di, -244(%rbp)
	movzwl	-244(%rbp), %r8d
	cmpl	$3, %r8d
	sete	%r9b
	movq	%rdx, -184(%rbp)
	movq	%rcx, -192(%rbp)
	andb	$1, %r9b
	movb	%r9b, -193(%rbp)
	movq	%rax, -208(%rbp)
	movb	-193(%rbp), %r9b
	testb	$1, %r9b
	jne	LBB114_4
	jmp	LBB114_5
LBB114_4:
	movq	-184(%rbp), %rax
	movb	$1, (%rax)
	movq	-208(%rbp), %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
LBB114_5:                               ## %_ZN4arma14arma_set_errorERbRPcbPKc.exit
	movzwl	-242(%rbp), %eax
	cmpl	$0, %eax
	jle	LBB114_25
## BB#6:
	cmpl	$0, -220(%rbp)
	jne	LBB114_14
## BB#7:
	cmpl	$0, -224(%rbp)
	jne	LBB114_14
## BB#8:
	movzwl	-242(%rbp), %eax
	cmpl	$1, %eax
	jne	LBB114_10
## BB#9:
	movl	$1, -224(%rbp)
	jmp	LBB114_13
LBB114_10:
	movzwl	-242(%rbp), %eax
	cmpl	$2, %eax
	jne	LBB114_12
## BB#11:
	movl	$1, -220(%rbp)
LBB114_12:
	jmp	LBB114_13
LBB114_13:
	jmp	LBB114_24
LBB114_14:
	movzwl	-242(%rbp), %eax
	cmpl	$1, %eax
	jne	LBB114_18
## BB#15:
	leaq	L_.str35(%rip), %rax
	leaq	-240(%rbp), %rcx
	leaq	-225(%rbp), %rdx
	cmpl	$1, -224(%rbp)
	setne	%sil
	movq	%rdx, -112(%rbp)
	movq	%rcx, -120(%rbp)
	andb	$1, %sil
	movb	%sil, -121(%rbp)
	movq	%rax, -136(%rbp)
	movb	-121(%rbp), %sil
	testb	$1, %sil
	jne	LBB114_16
	jmp	LBB114_17
LBB114_16:
	movq	-112(%rbp), %rax
	movb	$1, (%rax)
	movq	-136(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
LBB114_17:                              ## %_ZN4arma14arma_set_errorERbRPcbPKc.exit1
	jmp	LBB114_23
LBB114_18:
	movzwl	-242(%rbp), %eax
	cmpl	$2, %eax
	jne	LBB114_22
## BB#19:
	leaq	L_.str36(%rip), %rax
	leaq	-240(%rbp), %rcx
	leaq	-225(%rbp), %rdx
	cmpl	$1, -220(%rbp)
	setne	%sil
	movq	%rdx, -64(%rbp)
	movq	%rcx, -72(%rbp)
	andb	$1, %sil
	movb	%sil, -73(%rbp)
	movq	%rax, -88(%rbp)
	movb	-73(%rbp), %sil
	testb	$1, %sil
	jne	LBB114_20
	jmp	LBB114_21
LBB114_20:
	movq	-64(%rbp), %rax
	movb	$1, (%rax)
	movq	-88(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
LBB114_21:                              ## %_ZN4arma14arma_set_errorERbRPcbPKc.exit2
	jmp	LBB114_22
LBB114_22:
	jmp	LBB114_23
LBB114_23:
	jmp	LBB114_24
LBB114_24:
	jmp	LBB114_25
LBB114_25:
	cmpl	$65535, -220(%rbp)      ## imm = 0xFFFF
	ja	LBB114_27
## BB#26:
	cmpl	$65535, -224(%rbp)      ## imm = 0xFFFF
	jbe	LBB114_28
LBB114_27:
	movss	LCPI114_0(%rip), %xmm0
	movl	-220(%rbp), %eax
	movl	%eax, %ecx
	cvtsi2ssq	%rcx, %xmm1
	movl	-224(%rbp), %eax
	movl	%eax, %ecx
	cvtsi2ssq	%rcx, %xmm2
	mulss	%xmm2, %xmm1
	ucomiss	%xmm0, %xmm1
	seta	%dl
	movb	%dl, -265(%rbp)         ## 1-byte Spill
	jmp	LBB114_29
LBB114_28:
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, -265(%rbp)         ## 1-byte Spill
	jmp	LBB114_29
LBB114_29:
	movb	-265(%rbp), %al         ## 1-byte Reload
	leaq	L_.str37(%rip), %rcx
	leaq	-240(%rbp), %rdx
	leaq	-225(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	andb	$1, %al
	movb	%al, -33(%rbp)
	movq	%rcx, -48(%rbp)
	movb	-33(%rbp), %al
	testb	$1, %al
	jne	LBB114_30
	jmp	LBB114_31
LBB114_30:
	movq	-24(%rbp), %rax
	movb	$1, (%rax)
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
LBB114_31:                              ## %_ZN4arma14arma_set_errorERbRPcbPKc.exit3
	leaq	-240(%rbp), %rsi
	movb	-225(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edi
	callq	__ZN4arma10arma_checkIPcEEvbRKT_
	movq	-264(%rbp), %rsi        ## 8-byte Reload
	movl	8(%rsi), %edi
	movl	%edi, -248(%rbp)
	movl	-220(%rbp), %edi
	imull	-224(%rbp), %edi
	movl	%edi, -252(%rbp)
	movl	-248(%rbp), %edi
	cmpl	-252(%rbp), %edi
	jne	LBB114_33
## BB#32:
	movl	-220(%rbp), %eax
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx)
	movl	-224(%rbp), %eax
	addq	$4, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	LBB114_41
LBB114_33:
	movzwl	-244(%rbp), %eax
	cmpl	$2, %eax
	sete	%cl
	movzbl	%cl, %eax
	andl	$1, %eax
	leaq	L_.str38(%rip), %rsi
	movl	%eax, %edi
	callq	__ZN4arma10arma_checkIA74_cEEvbRKT_
	movzwl	-244(%rbp), %eax
	cmpl	$0, %eax
	jne	LBB114_37
## BB#34:
	cmpl	$16, -248(%rbp)
	jbe	LBB114_36
## BB#35:
	movq	-264(%rbp), %rax        ## 8-byte Reload
	addq	$16, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	callq	_free
LBB114_36:
	jmp	LBB114_37
LBB114_37:
	cmpl	$16, -252(%rbp)
	ja	LBB114_39
## BB#38:
	movq	-264(%rbp), %rax        ## 8-byte Reload
	addq	$32, %rax
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	addq	$16, %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	LBB114_40
LBB114_39:
	movl	-252(%rbp), %edi
	callq	__ZN4arma6memory7acquireIdEEPT_j
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	addq	$16, %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
LBB114_40:
	movl	-220(%rbp), %eax
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -152(%rbp)
	movq	-152(%rbp), %rdx
	movl	%eax, (%rdx)
	movl	-224(%rbp), %eax
	addq	$4, %rcx
	movq	%rcx, -160(%rbp)
	movq	-160(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-252(%rbp), %eax
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	addq	$8, %rcx
	movq	%rcx, -168(%rbp)
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	addq	$14, %rcx
	movq	%rcx, -176(%rbp)
	movq	-176(%rbp), %rcx
	movw	$0, (%rcx)
LBB114_41:
	addq	$272, %rsp              ## imm = 0x110
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10arma_checkIPcEEvbRKT_
	.weak_def_can_be_hidden	__ZN4arma10arma_checkIPcEEvbRKT_
	.align	4, 0x90
__ZN4arma10arma_checkIPcEEvbRKT_:       ## @_ZN4arma10arma_checkIPcEEvbRKT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp532:
	.cfi_def_cfa_offset 16
Ltmp533:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp534:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	movq	%rsi, -16(%rbp)
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edi
	cmpl	$1, %edi
	jne	LBB115_2
## BB#1:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rdi
	callq	__ZN4arma10arma_boostL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE
	leaq	-24(%rbp), %rdi
	movq	%rax, -24(%rbp)
	callq	__ZN4armaL9arma_stopIPKcEEvRKT_
LBB115_2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10arma_checkIA74_cEEvbRKT_
	.weak_def_can_be_hidden	__ZN4arma10arma_checkIA74_cEEvbRKT_
	.align	4, 0x90
__ZN4arma10arma_checkIA74_cEEvbRKT_:    ## @_ZN4arma10arma_checkIA74_cEEvbRKT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp535:
	.cfi_def_cfa_offset 16
Ltmp536:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp537:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	movq	%rsi, -16(%rbp)
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edi
	cmpl	$1, %edi
	jne	LBB116_2
## BB#1:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	__ZN4arma10arma_boostL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE
	leaq	-24(%rbp), %rdi
	movq	%rax, -24(%rbp)
	callq	__ZN4armaL9arma_stopIPKcEEvRKT_
LBB116_2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma6memory7acquireIdEEPT_j
	.weak_def_can_be_hidden	__ZN4arma6memory7acquireIdEEPT_j
	.align	4, 0x90
__ZN4arma6memory7acquireIdEEPT_j:       ## @_ZN4arma6memory7acquireIdEEPT_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp538:
	.cfi_def_cfa_offset 16
Ltmp539:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp540:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	$-1, %rax
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %edi
	movl	%edi, %ecx
	shrq	$3, %rax
	cmpq	%rax, %rcx
	seta	%dl
	movzbl	%dl, %edi
	andl	$1, %edi
	leaq	L_.str39(%rip), %rsi
	callq	__ZN4arma10arma_checkIA53_cEEvbRKT_
	movl	-4(%rbp), %edi
	movl	%edi, %eax
	shlq	$3, %rax
	movq	%rax, %rdi
	callq	_malloc
	movq	%rax, -16(%rbp)
	cmpl	$0, -4(%rbp)
	jbe	LBB117_2
## BB#1:
	cmpq	$0, -16(%rbp)
	sete	%al
	movzbl	%al, %ecx
	andl	$1, %ecx
	leaq	L_.str40(%rip), %rsi
	movl	%ecx, %edi
	callq	__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_
LBB117_2:
	movq	-16(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10arma_checkIA53_cEEvbRKT_
	.weak_def_can_be_hidden	__ZN4arma10arma_checkIA53_cEEvbRKT_
	.align	4, 0x90
__ZN4arma10arma_checkIA53_cEEvbRKT_:    ## @_ZN4arma10arma_checkIA53_cEEvbRKT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp541:
	.cfi_def_cfa_offset 16
Ltmp542:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp543:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	movq	%rsi, -16(%rbp)
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edi
	cmpl	$1, %edi
	jne	LBB118_2
## BB#1:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	__ZN4arma10arma_boostL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE
	leaq	-24(%rbp), %rdi
	movq	%rax, -24(%rbp)
	callq	__ZN4armaL9arma_stopIPKcEEvRKT_
LBB118_2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_
	.weak_def_can_be_hidden	__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_
	.align	4, 0x90
__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_: ## @_ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp544:
	.cfi_def_cfa_offset 16
Ltmp545:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp546:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	movq	%rsi, -16(%rbp)
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edi
	cmpl	$1, %edi
	jne	LBB119_2
## BB#1:
	movq	-16(%rbp), %rdi
	callq	__ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_
LBB119_2:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__text,regular,pure_instructions
__ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_: ## @_ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp547:
	.cfi_def_cfa_offset 16
Ltmp548:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp549:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	callq	__ZN4arma15get_stream_err2Ev
	movl	$10, %esi
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	leaq	L_.str33(%rip), %rsi
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movl	$10, %esi
	movq	%rax, %rdi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	movl	$10, %esi
	movq	-16(%rbp), %rdi
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	movq	-16(%rbp), %rdi
	movq	%rax, -40(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv
	movl	$8, %esi
	movl	%esi, %edi
	movq	%rax, -48(%rbp)         ## 8-byte Spill
	callq	___cxa_allocate_exception
	movq	%rax, %rdi
	movq	%rax, -56(%rbp)         ## 8-byte Spill
	callq	__ZNSt9bad_allocC1Ev
	movq	__ZTISt9bad_alloc@GOTPCREL(%rip), %rax
	movq	__ZNSt9bad_allocD1Ev@GOTPCREL(%rip), %rdi
	movq	-56(%rbp), %rcx         ## 8-byte Reload
	movq	%rdi, -64(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	movq	%rax, %rsi
	movq	-64(%rbp), %rdx         ## 8-byte Reload
	callq	___cxa_throw
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma15get_stream_err2Ev
	.weak_def_can_be_hidden	__ZN4arma15get_stream_err2Ev
	.align	4, 0x90
__ZN4arma15get_stream_err2Ev:           ## @_ZN4arma15get_stream_err2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp550:
	.cfi_def_cfa_offset 16
Ltmp551:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp552:
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movl	%eax, %edi
	callq	__ZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_
	.weak_def_can_be_hidden	__ZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_
	.align	4, 0x90
__ZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_: ## @_ZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp553:
	.cfi_def_cfa_offset 16
Ltmp554:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp555:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	LBB122_2
## BB#1:
	movq	__ZZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err2@GOTPCREL(%rip), %rax
	movq	-8(%rbp), %rcx
	movq	%rcx, (%rax)
LBB122_2:
	movq	__ZZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err2@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC2ERKS8_
	.weak_def_can_be_hidden	__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC2ERKS8_
	.align	4, 0x90
__ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC2ERKS8_: ## @_ZN4arma5ProxyINS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEEEC2ERKS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp556:
	.cfi_def_cfa_offset 16
Ltmp557:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp558:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma3MatINSt3__17complexIdEEEC1INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEEC1INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEEC1INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEEC1INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE: ## @_ZN4arma3MatINSt3__17complexIdEEEC1INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp559:
	.cfi_def_cfa_offset 16
Ltmp560:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp561:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma3MatINSt3__17complexIdEEEC2INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEEC2INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEEC2INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEEC2INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE: ## @_ZN4arma3MatINSt3__17complexIdEEEC2INS_3ColIS3_EENS_10op_ifft_cxEEERKNS_2OpIT_T0_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp562:
	.cfi_def_cfa_offset 16
Ltmp563:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp564:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-56(%rbp), %rsi
	movl	$0, (%rsi)
	movl	$0, 4(%rsi)
	movl	$0, 8(%rsi)
	movw	$0, 12(%rsi)
	movw	$0, 14(%rsi)
	movq	$0, 16(%rsi)
	movq	%rsi, %rdi
	addq	$32, %rdi
	movq	%rdi, %rax
	addq	$256, %rax              ## imm = 0x100
	movq	%rsi, -72(%rbp)         ## 8-byte Spill
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	movq	%rdi, -88(%rbp)         ## 8-byte Spill
LBB125_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-88(%rbp), %rax         ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm0, -48(%rbp)
	movq	-32(%rbp), %rcx
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rcx, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rcx
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-80(%rbp), %rcx         ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -88(%rbp)         ## 8-byte Spill
	jne	LBB125_1
## BB#2:
	movq	-64(%rbp), %rsi
	movq	-72(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN4arma10op_ifft_cx5applyINS_3ColINSt3__17complexIdEEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpIS8_S0_EE
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10op_ifft_cx5applyINS_3ColINSt3__17complexIdEEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpIS8_S0_EE
	.weak_def_can_be_hidden	__ZN4arma10op_ifft_cx5applyINS_3ColINSt3__17complexIdEEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpIS8_S0_EE
	.align	4, 0x90
__ZN4arma10op_ifft_cx5applyINS_3ColINSt3__17complexIdEEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpIS8_S0_EE: ## @_ZN4arma10op_ifft_cx5applyINS_3ColINSt3__17complexIdEEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpIS8_S0_EE
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin126:
	.cfi_lsda 16, Lexception126
## BB#0:
	pushq	%rbp
Ltmp570:
	.cfi_def_cfa_offset 16
Ltmp571:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp572:
	.cfi_def_cfa_register %rbp
	subq	$384, %rsp              ## imm = 0x180
	leaq	-32(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -8(%rbp)
	movq	%rdi, -344(%rbp)
	movq	%rsi, -352(%rbp)
	movq	-352(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	__ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
	leaq	-32(%rbp), %rax
	movq	-344(%rbp), %rcx
	movq	%rax, -328(%rbp)
	movq	%rcx, -336(%rbp)
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	-336(%rbp), %rcx
	cmpq	%rcx, %rax
	sete	%dl
	andb	$1, %dl
	movzbl	%dl, %r8d
	cmpl	$0, %r8d
	jne	LBB126_2
## BB#1:
	leaq	-32(%rbp), %rsi
	movq	-344(%rbp), %rdi
	movq	-352(%rbp), %rax
	movl	32(%rax), %edx
	movq	-352(%rbp), %rax
	movl	48(%rax), %ecx
	callq	__ZN4arma9op_fft_cx13apply_noaliasINS_3ColINSt3__17complexIdEEEELb1EEEvRNS_3MatINT_9elem_typeEEERKNS_5ProxyIS8_EEjj
	jmp	LBB126_6
LBB126_2:
	leaq	-320(%rbp), %rax
	movq	%rax, %rdi
	movq	%rax, -376(%rbp)        ## 8-byte Spill
	callq	__ZN4arma3MatINSt3__17complexIdEEEC1Ev
	movq	-352(%rbp), %rax
	movl	32(%rax), %edx
	movl	48(%rax), %ecx
Ltmp565:
	leaq	-32(%rbp), %rsi
	movq	-376(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma9op_fft_cx13apply_noaliasINS_3ColINSt3__17complexIdEEEELb1EEEvRNS_3MatINT_9elem_typeEEERKNS_5ProxyIS8_EEjj
Ltmp566:
	jmp	LBB126_3
LBB126_3:
	movq	-344(%rbp), %rdi
Ltmp567:
	leaq	-320(%rbp), %rsi
	callq	__ZN4arma3MatINSt3__17complexIdEEE9steal_memERS4_
Ltmp568:
	jmp	LBB126_4
LBB126_4:
	leaq	-320(%rbp), %rdi
	callq	__ZN4arma3MatINSt3__17complexIdEEED1Ev
	jmp	LBB126_6
LBB126_5:
Ltmp569:
	leaq	-320(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -360(%rbp)
	movl	%ecx, -364(%rbp)
	callq	__ZN4arma3MatINSt3__17complexIdEEED1Ev
	jmp	LBB126_8
LBB126_6:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-8(%rbp), %rax
	jne	LBB126_9
## BB#7:                                ## %SP_return
	addq	$384, %rsp              ## imm = 0x180
	popq	%rbp
	retq
LBB126_8:
	movq	-360(%rbp), %rdi
	callq	__Unwind_Resume
LBB126_9:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc
Leh_func_end126:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table126:
Lexception126:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset193 = Leh_func_begin126-Leh_func_begin126 ## >> Call Site 1 <<
	.long	Lset193
Lset194 = Ltmp565-Leh_func_begin126     ##   Call between Leh_func_begin126 and Ltmp565
	.long	Lset194
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset195 = Ltmp565-Leh_func_begin126     ## >> Call Site 2 <<
	.long	Lset195
Lset196 = Ltmp568-Ltmp565               ##   Call between Ltmp565 and Ltmp568
	.long	Lset196
Lset197 = Ltmp569-Leh_func_begin126     ##     jumps to Ltmp569
	.long	Lset197
	.byte	0                       ##   On action: cleanup
Lset198 = Ltmp568-Leh_func_begin126     ## >> Call Site 3 <<
	.long	Lset198
Lset199 = Leh_func_end126-Ltmp568       ##   Call between Ltmp568 and Leh_func_end126
	.long	Lset199
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
	.weak_def_can_be_hidden	__ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
	.align	4, 0x90
__ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC1ERKS5_: ## @_ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp573:
	.cfi_def_cfa_offset 16
Ltmp574:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp575:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC2ERKS5_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI128_0:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma9op_fft_cx13apply_noaliasINS_3ColINSt3__17complexIdEEEELb1EEEvRNS_3MatINT_9elem_typeEEERKNS_5ProxyIS8_EEjj
	.weak_def_can_be_hidden	__ZN4arma9op_fft_cx13apply_noaliasINS_3ColINSt3__17complexIdEEEELb1EEEvRNS_3MatINT_9elem_typeEEERKNS_5ProxyIS8_EEjj
	.align	4, 0x90
__ZN4arma9op_fft_cx13apply_noaliasINS_3ColINSt3__17complexIdEEEELb1EEEvRNS_3MatINT_9elem_typeEEERKNS_5ProxyIS8_EEjj: ## @_ZN4arma9op_fft_cx13apply_noaliasINS_3ColINSt3__17complexIdEEEELb1EEEvRNS_3MatINT_9elem_typeEEERKNS_5ProxyIS8_EEjj
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin128:
	.cfi_lsda 16, Lexception128
## BB#0:
	pushq	%rbp
Ltmp611:
	.cfi_def_cfa_offset 16
Ltmp612:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp613:
	.cfi_def_cfa_register %rbp
	subq	$2512, %rsp             ## imm = 0x9D0
	movb	$1, %al
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -8(%rbp)
	movq	%rdi, -2032(%rbp)
	movq	%rsi, -2040(%rbp)
	movl	%edx, -2044(%rbp)
	movl	%ecx, -2048(%rbp)
	movq	-2040(%rbp), %rsi
	movq	%rsi, -2024(%rbp)
	movq	-2024(%rbp), %rsi
	movq	(%rsi), %rsi
	movl	(%rsi), %ecx
	movl	%ecx, -2052(%rbp)
	movq	-2040(%rbp), %rsi
	movq	%rsi, -2016(%rbp)
	movl	$1, -2056(%rbp)
	movq	-2040(%rbp), %rsi
	movq	%rsi, -2008(%rbp)
	movq	-2008(%rbp), %rsi
	movq	(%rsi), %rsi
	movl	8(%rsi), %ecx
	movl	%ecx, -2060(%rbp)
	cmpl	$1, -2052(%rbp)
	movb	%al, -2225(%rbp)        ## 1-byte Spill
	je	LBB128_2
## BB#1:
	cmpl	$1, -2056(%rbp)
	sete	%al
	movb	%al, -2225(%rbp)        ## 1-byte Spill
LBB128_2:
	movb	-2225(%rbp), %al        ## 1-byte Reload
	andb	$1, %al
	movb	%al, -2061(%rbp)
	testb	$1, -2061(%rbp)
	je	LBB128_4
## BB#3:
	movl	-2060(%rbp), %eax
	movl	%eax, -2232(%rbp)       ## 4-byte Spill
	jmp	LBB128_5
LBB128_4:
	movl	-2052(%rbp), %eax
	movl	%eax, -2232(%rbp)       ## 4-byte Spill
LBB128_5:
	movl	-2232(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -2068(%rbp)
	cmpl	$0, -2048(%rbp)
	jne	LBB128_7
## BB#6:
	movl	-2044(%rbp), %eax
	movl	%eax, -2236(%rbp)       ## 4-byte Spill
	jmp	LBB128_8
LBB128_7:
	movl	-2068(%rbp), %eax
	movl	%eax, -2236(%rbp)       ## 4-byte Spill
LBB128_8:
	movl	-2236(%rbp), %eax       ## 4-byte Reload
	leaq	-800(%rbp), %rdi
	movl	%eax, -2072(%rbp)
	movl	-2072(%rbp), %esi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC1Ej
	testb	$1, -2061(%rbp)
	je	LBB128_48
## BB#9:
	cmpl	$1, -2056(%rbp)
	jne	LBB128_12
## BB#10:
	movq	-2032(%rbp), %rdi
	movl	-2072(%rbp), %esi
Ltmp593:
	movl	$1, %edx
	callq	__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
Ltmp594:
	jmp	LBB128_11
LBB128_11:
	jmp	LBB128_14
LBB128_12:
	movq	-2032(%rbp), %rdi
	movl	-2072(%rbp), %edx
Ltmp591:
	movl	$1, %esi
	callq	__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
Ltmp592:
	jmp	LBB128_13
LBB128_13:
	jmp	LBB128_14
LBB128_14:
	movq	-2032(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB128_16
## BB#15:
	cmpl	$0, -2068(%rbp)
	jne	LBB128_19
LBB128_16:
	movq	-2032(%rbp), %rdi
Ltmp608:
	callq	__ZN4arma3MatINSt3__17complexIdEEE5zerosEv
Ltmp609:
	movq	%rax, -2248(%rbp)       ## 8-byte Spill
	jmp	LBB128_17
LBB128_17:
	movl	$1, -2088(%rbp)
	jmp	LBB128_105
LBB128_18:
Ltmp610:
	movl	%edx, %ecx
	movq	%rax, -2080(%rbp)
	movl	%ecx, -2084(%rbp)
	jmp	LBB128_108
LBB128_19:
	cmpl	$1, -2072(%rbp)
	jne	LBB128_24
## BB#20:
	cmpl	$1, -2068(%rbp)
	jb	LBB128_24
## BB#21:
	movq	-2032(%rbp), %rax
	movq	%rax, -1968(%rbp)
	movl	$0, -1972(%rbp)
	movq	-1968(%rbp), %rax
	movl	-1972(%rbp), %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1960(%rbp)
	movq	-1960(%rbp), %rax
	movq	%rax, -2256(%rbp)       ## 8-byte Spill
## BB#22:
	movq	-2040(%rbp), %rax
	movq	%rax, -1904(%rbp)
	movl	$0, -1908(%rbp)
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -1872(%rbp)
	movl	$0, -1876(%rbp)
	movq	-1872(%rbp), %rax
	movl	-1876(%rbp), %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	shlq	$4, %rdx
	movq	(%rax,%rdx), %rsi
	movq	8(%rax,%rdx), %rax
	movq	%rax, -1888(%rbp)
	movq	%rsi, -1896(%rbp)
	movsd	-1896(%rbp), %xmm0
	movsd	-1888(%rbp), %xmm1
	movsd	%xmm0, -2264(%rbp)      ## 8-byte Spill
	movsd	%xmm1, -2272(%rbp)      ## 8-byte Spill
## BB#23:
	movsd	-2264(%rbp), %xmm0      ## 8-byte Reload
	movsd	%xmm0, -2104(%rbp)
	movsd	-2272(%rbp), %xmm0      ## 8-byte Reload
	movsd	%xmm0, -2096(%rbp)
	movq	-2104(%rbp), %rax
	movq	-2256(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, (%rcx)
	movq	-2096(%rbp), %rax
	movq	%rax, 8(%rcx)
	movl	$1, -2088(%rbp)
	jmp	LBB128_105
LBB128_24:
	movl	-2072(%rbp), %eax
	cmpl	-2068(%rbp), %eax
	jbe	LBB128_42
## BB#25:
	leaq	-1088(%rbp), %rax
	movl	-2072(%rbp), %ecx
	movq	%rax, -1856(%rbp)
	movl	%ecx, -1860(%rbp)
	movq	-1856(%rbp), %rax
	movl	-1860(%rbp), %ecx
	movq	%rax, -1840(%rbp)
	movl	%ecx, -1844(%rbp)
	movq	-1840(%rbp), %rax
	movl	-1844(%rbp), %ecx
	movl	%ecx, (%rax)
	movq	%rax, %rdx
	addq	$32, %rdx
	movq	%rdx, %rsi
	addq	$256, %rsi              ## imm = 0x100
	movq	%rax, -2280(%rbp)       ## 8-byte Spill
	movq	%rsi, -2288(%rbp)       ## 8-byte Spill
	movq	%rdx, -2296(%rbp)       ## 8-byte Spill
LBB128_26:                              ## =>This Inner Loop Header: Depth=1
	movq	-2296(%rbp), %rax       ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -1816(%rbp)
	movsd	%xmm0, -1824(%rbp)
	movsd	%xmm0, -1832(%rbp)
	movq	-1816(%rbp), %rcx
	movsd	-1824(%rbp), %xmm0
	movsd	-1832(%rbp), %xmm1
	movq	%rcx, -1792(%rbp)
	movsd	%xmm0, -1800(%rbp)
	movsd	%xmm1, -1808(%rbp)
	movq	-1792(%rbp), %rcx
	movsd	-1800(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-1808(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-2288(%rbp), %rcx       ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -2296(%rbp)       ## 8-byte Spill
	jne	LBB128_26
## BB#27:                               ## %_ZN4arma8podarrayINSt3__17complexIdEEEC2Ej.exit.i
	movl	-1844(%rbp), %esi
Ltmp599:
	movq	-2280(%rbp), %rdi       ## 8-byte Reload
	callq	__ZN4arma8podarrayINSt3__17complexIdEEE9init_coldEj
Ltmp600:
	jmp	LBB128_28
LBB128_28:                              ## %_ZN4arma8podarrayINSt3__17complexIdEEEC1Ej.exit
	jmp	LBB128_29
LBB128_29:
	leaq	-1088(%rbp), %rax
	movq	%rax, -1784(%rbp)
	movq	-1784(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -2304(%rbp)       ## 8-byte Spill
## BB#30:
	movq	-2304(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2112(%rbp)
	movl	-2072(%rbp), %ecx
	cmpl	-2068(%rbp), %ecx
	jbe	LBB128_34
## BB#31:
	movl	-2068(%rbp), %eax
	movl	%eax, %ecx
	movl	%ecx, %eax
	movq	-2112(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	-2072(%rbp), %esi
	subl	%eax, %esi
Ltmp601:
	movq	%rdx, %rdi
	callq	__ZN4arma8arrayops10fill_zerosINSt3__17complexIdEEEEvPT_j
Ltmp602:
	jmp	LBB128_32
LBB128_32:
	jmp	LBB128_34
LBB128_33:
Ltmp607:
	leaq	-1088(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -2080(%rbp)
	movl	%ecx, -2084(%rbp)
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	jmp	LBB128_108
LBB128_34:
	leaq	-1736(%rbp), %rax
	leaq	-2068(%rbp), %rcx
	leaq	-2072(%rbp), %rdx
	movq	-2112(%rbp), %rdi
	movq	-2040(%rbp), %rsi
	movq	%rdx, -1760(%rbp)
	movq	%rcx, -1768(%rbp)
	movq	-1760(%rbp), %rcx
	movq	-1768(%rbp), %rdx
	movq	%rcx, -1744(%rbp)
	movq	%rdx, -1752(%rbp)
	movq	-1752(%rbp), %rcx
	movq	-1744(%rbp), %rdx
	movq	%rax, -1712(%rbp)
	movq	%rcx, -1720(%rbp)
	movq	%rdx, -1728(%rbp)
	movq	-1720(%rbp), %rax
	movl	(%rax), %r8d
	movq	-1728(%rbp), %rax
	cmpl	(%rax), %r8d
	movq	%rsi, -2312(%rbp)       ## 8-byte Spill
	movq	%rdi, -2320(%rbp)       ## 8-byte Spill
	jae	LBB128_36
## BB#35:
	movq	-1752(%rbp), %rax
	movq	%rax, -2328(%rbp)       ## 8-byte Spill
	jmp	LBB128_37
LBB128_36:
	movq	-1744(%rbp), %rax
	movq	%rax, -2328(%rbp)       ## 8-byte Spill
LBB128_37:                              ## %_ZNSt3__13minIjEERKT_S3_S3_.exit
	movq	-2328(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2336(%rbp)       ## 8-byte Spill
## BB#38:
	movq	-2336(%rbp), %rax       ## 8-byte Reload
	movl	(%rax), %edx
Ltmp603:
	movq	-2320(%rbp), %rdi       ## 8-byte Reload
	movq	-2312(%rbp), %rsi       ## 8-byte Reload
	callq	__ZN4arma9op_fft_cx8copy_vecINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j
Ltmp604:
	jmp	LBB128_39
LBB128_39:
	movq	-2032(%rbp), %rax
	movq	%rax, -1560(%rbp)
	movq	-1560(%rbp), %rax
	movq	16(%rax), %rsi
	movq	%rsi, -2344(%rbp)       ## 8-byte Spill
## BB#40:
	movq	-2112(%rbp), %rdx
Ltmp605:
	leaq	-800(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$1, %r8d
	movq	-2344(%rbp), %rsi       ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE3runEPS3_PKS3_jj
Ltmp606:
	jmp	LBB128_41
LBB128_41:
	leaq	-1088(%rbp), %rdi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	jmp	LBB128_47
LBB128_42:
	movq	-2040(%rbp), %rax
	movq	(%rax), %rsi
Ltmp595:
	leaq	-2120(%rbp), %rdi
	callq	__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
Ltmp596:
	jmp	LBB128_43
LBB128_43:
	movq	-2032(%rbp), %rax
	movq	%rax, -1552(%rbp)
	movq	-1552(%rbp), %rax
	movq	16(%rax), %rsi
	movq	%rsi, -2352(%rbp)       ## 8-byte Spill
## BB#44:
	movq	-2120(%rbp), %rax
	movq	%rax, -1456(%rbp)
	movq	-1456(%rbp), %rax
	movq	16(%rax), %rdx
	movq	%rdx, -2360(%rbp)       ## 8-byte Spill
## BB#45:
Ltmp597:
	leaq	-800(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$1, %r8d
	movq	-2352(%rbp), %rsi       ## 8-byte Reload
	movq	-2360(%rbp), %rdx       ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE3runEPS3_PKS3_jj
Ltmp598:
	jmp	LBB128_46
LBB128_46:
	jmp	LBB128_47
LBB128_47:
	jmp	LBB128_98
LBB128_48:
	movq	-2032(%rbp), %rdi
	movl	-2072(%rbp), %esi
	movl	-2056(%rbp), %edx
Ltmp576:
	callq	__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
Ltmp577:
	jmp	LBB128_49
LBB128_49:
	movq	-2032(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB128_51
## BB#50:
	cmpl	$0, -2068(%rbp)
	jne	LBB128_53
LBB128_51:
	movq	-2032(%rbp), %rdi
Ltmp589:
	callq	__ZN4arma3MatINSt3__17complexIdEEE5zerosEv
Ltmp590:
	movq	%rax, -2368(%rbp)       ## 8-byte Spill
	jmp	LBB128_52
LBB128_52:
	movl	$1, -2088(%rbp)
	jmp	LBB128_105
LBB128_53:
	cmpl	$1, -2072(%rbp)
	jne	LBB128_62
## BB#54:
	cmpl	$1, -2068(%rbp)
	jb	LBB128_62
## BB#55:
	movl	$0, -2124(%rbp)
LBB128_56:                              ## =>This Inner Loop Header: Depth=1
	movl	-2124(%rbp), %eax
	cmpl	-2056(%rbp), %eax
	jae	LBB128_61
## BB#57:                               ##   in Loop: Header=BB128_56 Depth=1
	movq	-2032(%rbp), %rax
	movl	-2124(%rbp), %ecx
	movq	%rax, -1392(%rbp)
	movl	$0, -1396(%rbp)
	movl	%ecx, -1400(%rbp)
	movq	-1392(%rbp), %rax
	movl	-1396(%rbp), %ecx
	movl	-1400(%rbp), %edx
	imull	(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	16(%rax), %rax
	shlq	$4, %rsi
	addq	%rsi, %rax
	movq	%rax, -1384(%rbp)
	movq	-1384(%rbp), %rax
	movq	%rax, -2376(%rbp)       ## 8-byte Spill
## BB#58:                               ##   in Loop: Header=BB128_56 Depth=1
	movq	-2040(%rbp), %rax
	movl	-2124(%rbp), %ecx
	movq	%rax, -1440(%rbp)
	movl	$0, -1444(%rbp)
	movl	%ecx, -1448(%rbp)
	movq	-1440(%rbp), %rax
	movq	(%rax), %rax
	movl	-1444(%rbp), %ecx
	movq	%rax, -1408(%rbp)
	movl	%ecx, -1412(%rbp)
	movq	-1408(%rbp), %rax
	movl	-1412(%rbp), %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	shlq	$4, %rdx
	movq	(%rax,%rdx), %rsi
	movq	8(%rax,%rdx), %rax
	movq	%rax, -1424(%rbp)
	movq	%rsi, -1432(%rbp)
	movsd	-1432(%rbp), %xmm0
	movsd	-1424(%rbp), %xmm1
	movsd	%xmm0, -2384(%rbp)      ## 8-byte Spill
	movsd	%xmm1, -2392(%rbp)      ## 8-byte Spill
## BB#59:                               ##   in Loop: Header=BB128_56 Depth=1
	movsd	-2384(%rbp), %xmm0      ## 8-byte Reload
	movsd	%xmm0, -2144(%rbp)
	movsd	-2392(%rbp), %xmm0      ## 8-byte Reload
	movsd	%xmm0, -2136(%rbp)
	movq	-2144(%rbp), %rax
	movq	-2376(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, (%rcx)
	movq	-2136(%rbp), %rax
	movq	%rax, 8(%rcx)
## BB#60:                               ##   in Loop: Header=BB128_56 Depth=1
	movl	-2124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2124(%rbp)
	jmp	LBB128_56
LBB128_61:
	movl	$1, -2088(%rbp)
	jmp	LBB128_105
LBB128_62:
	movl	-2072(%rbp), %eax
	cmpl	-2068(%rbp), %eax
	jbe	LBB128_88
## BB#63:
	leaq	-1376(%rbp), %rax
	movl	-2072(%rbp), %ecx
	movq	%rax, -1528(%rbp)
	movl	%ecx, -1532(%rbp)
	movq	-1528(%rbp), %rax
	movl	-1532(%rbp), %ecx
	movq	%rax, -1512(%rbp)
	movl	%ecx, -1516(%rbp)
	movq	-1512(%rbp), %rax
	movl	-1516(%rbp), %ecx
	movl	%ecx, (%rax)
	movq	%rax, %rdx
	addq	$32, %rdx
	movq	%rdx, %rsi
	addq	$256, %rsi              ## imm = 0x100
	movq	%rax, -2400(%rbp)       ## 8-byte Spill
	movq	%rsi, -2408(%rbp)       ## 8-byte Spill
	movq	%rdx, -2416(%rbp)       ## 8-byte Spill
LBB128_64:                              ## =>This Inner Loop Header: Depth=1
	movq	-2416(%rbp), %rax       ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -1488(%rbp)
	movsd	%xmm0, -1496(%rbp)
	movsd	%xmm0, -1504(%rbp)
	movq	-1488(%rbp), %rcx
	movsd	-1496(%rbp), %xmm0
	movsd	-1504(%rbp), %xmm1
	movq	%rcx, -1464(%rbp)
	movsd	%xmm0, -1472(%rbp)
	movsd	%xmm1, -1480(%rbp)
	movq	-1464(%rbp), %rcx
	movsd	-1472(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-1480(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-2408(%rbp), %rcx       ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -2416(%rbp)       ## 8-byte Spill
	jne	LBB128_64
## BB#65:                               ## %_ZN4arma8podarrayINSt3__17complexIdEEEC2Ej.exit.i9
	movl	-1516(%rbp), %esi
Ltmp582:
	movq	-2400(%rbp), %rdi       ## 8-byte Reload
	callq	__ZN4arma8podarrayINSt3__17complexIdEEE9init_coldEj
Ltmp583:
	jmp	LBB128_66
LBB128_66:                              ## %_ZN4arma8podarrayINSt3__17complexIdEEEC1Ej.exit10
	jmp	LBB128_67
LBB128_67:
	leaq	-1376(%rbp), %rax
	movq	%rax, -1544(%rbp)
	movq	-1544(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -2424(%rbp)       ## 8-byte Spill
## BB#68:
	movq	-2424(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2152(%rbp)
	movl	-2072(%rbp), %ecx
	cmpl	-2068(%rbp), %ecx
	jbe	LBB128_72
## BB#69:
	movl	-2068(%rbp), %eax
	movl	%eax, %ecx
	movl	%ecx, %eax
	movq	-2152(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	-2072(%rbp), %esi
	subl	%eax, %esi
Ltmp584:
	movq	%rdx, %rdi
	callq	__ZN4arma8arrayops10fill_zerosINSt3__17complexIdEEEEvPT_j
Ltmp585:
	jmp	LBB128_70
LBB128_70:
	jmp	LBB128_72
LBB128_71:
Ltmp588:
	leaq	-1376(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -2080(%rbp)
	movl	%ecx, -2084(%rbp)
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	jmp	LBB128_108
LBB128_72:
	leaq	-1592(%rbp), %rax
	leaq	-2068(%rbp), %rcx
	leaq	-2072(%rbp), %rdx
	movq	%rdx, -1616(%rbp)
	movq	%rcx, -1624(%rbp)
	movq	-1616(%rbp), %rcx
	movq	-1624(%rbp), %rdx
	movq	%rcx, -1600(%rbp)
	movq	%rdx, -1608(%rbp)
	movq	-1608(%rbp), %rcx
	movq	-1600(%rbp), %rdx
	movq	%rax, -1568(%rbp)
	movq	%rcx, -1576(%rbp)
	movq	%rdx, -1584(%rbp)
	movq	-1576(%rbp), %rax
	movl	(%rax), %esi
	movq	-1584(%rbp), %rax
	cmpl	(%rax), %esi
	jae	LBB128_74
## BB#73:
	movq	-1608(%rbp), %rax
	movq	%rax, -2432(%rbp)       ## 8-byte Spill
	jmp	LBB128_75
LBB128_74:
	movq	-1600(%rbp), %rax
	movq	%rax, -2432(%rbp)       ## 8-byte Spill
LBB128_75:                              ## %_ZNSt3__13minIjEERKT_S3_S3_.exit8
	movq	-2432(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2440(%rbp)       ## 8-byte Spill
## BB#76:
	movq	-2440(%rbp), %rax       ## 8-byte Reload
	movl	(%rax), %ecx
	movl	%ecx, -2156(%rbp)
	movl	$0, -2160(%rbp)
LBB128_77:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB128_79 Depth 2
	movl	-2160(%rbp), %eax
	cmpl	-2056(%rbp), %eax
	jae	LBB128_87
## BB#78:                               ##   in Loop: Header=BB128_77 Depth=1
	movl	$0, -2164(%rbp)
LBB128_79:                              ##   Parent Loop BB128_77 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-2164(%rbp), %eax
	cmpl	-2156(%rbp), %eax
	jae	LBB128_83
## BB#80:                               ##   in Loop: Header=BB128_79 Depth=2
	movl	-2164(%rbp), %eax
	movl	%eax, %ecx
	movl	%ecx, %eax
	movq	-2152(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	-2040(%rbp), %rcx
	movl	-2160(%rbp), %esi
	movq	%rcx, -1672(%rbp)
	movl	%eax, -1676(%rbp)
	movl	%esi, -1680(%rbp)
	movq	-1672(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	-1676(%rbp), %eax
	movq	%rcx, -1640(%rbp)
	movl	%eax, -1644(%rbp)
	movq	-1640(%rbp), %rcx
	movl	-1644(%rbp), %eax
	movl	%eax, %edi
	movq	16(%rcx), %rcx
	shlq	$4, %rdi
	movq	(%rcx,%rdi), %r8
	movq	8(%rcx,%rdi), %rcx
	movq	%rcx, -1656(%rbp)
	movq	%r8, -1664(%rbp)
	movsd	-1664(%rbp), %xmm0
	movsd	-1656(%rbp), %xmm1
	movq	%rdx, -2448(%rbp)       ## 8-byte Spill
	movsd	%xmm0, -2456(%rbp)      ## 8-byte Spill
	movsd	%xmm1, -2464(%rbp)      ## 8-byte Spill
## BB#81:                               ##   in Loop: Header=BB128_79 Depth=2
	movsd	-2456(%rbp), %xmm0      ## 8-byte Reload
	movsd	%xmm0, -2184(%rbp)
	movsd	-2464(%rbp), %xmm0      ## 8-byte Reload
	movsd	%xmm0, -2176(%rbp)
	movq	-2184(%rbp), %rax
	movq	-2448(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, (%rcx)
	movq	-2176(%rbp), %rax
	movq	%rax, 8(%rcx)
## BB#82:                               ##   in Loop: Header=BB128_79 Depth=2
	movl	-2164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2164(%rbp)
	jmp	LBB128_79
LBB128_83:                              ##   in Loop: Header=BB128_77 Depth=1
	movq	-2032(%rbp), %rax
	movl	-2160(%rbp), %ecx
	movq	%rax, -1696(%rbp)
	movl	%ecx, -1700(%rbp)
	movq	-1696(%rbp), %rax
	movl	-1700(%rbp), %ecx
	imull	(%rax), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1688(%rbp)
	movq	-1688(%rbp), %rsi
	movq	%rsi, -2472(%rbp)       ## 8-byte Spill
## BB#84:                               ##   in Loop: Header=BB128_77 Depth=1
	movq	-2152(%rbp), %rdx
Ltmp586:
	leaq	-800(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$1, %r8d
	movq	-2472(%rbp), %rsi       ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE3runEPS3_PKS3_jj
Ltmp587:
	jmp	LBB128_85
LBB128_85:                              ##   in Loop: Header=BB128_77 Depth=1
	jmp	LBB128_86
LBB128_86:                              ##   in Loop: Header=BB128_77 Depth=1
	movl	-2160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2160(%rbp)
	jmp	LBB128_77
LBB128_87:
	leaq	-1376(%rbp), %rdi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	jmp	LBB128_97
LBB128_88:
	movq	-2040(%rbp), %rax
	movq	(%rax), %rsi
Ltmp578:
	leaq	-2192(%rbp), %rdi
	callq	__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
Ltmp579:
	jmp	LBB128_89
LBB128_89:
	movl	$0, -2196(%rbp)
LBB128_90:                              ## =>This Inner Loop Header: Depth=1
	movl	-2196(%rbp), %eax
	cmpl	-2056(%rbp), %eax
	jae	LBB128_96
## BB#91:                               ##   in Loop: Header=BB128_90 Depth=1
	movq	-2032(%rbp), %rax
	movl	-2196(%rbp), %ecx
	movq	%rax, -1928(%rbp)
	movl	%ecx, -1932(%rbp)
	movq	-1928(%rbp), %rax
	movl	-1932(%rbp), %ecx
	imull	(%rax), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1920(%rbp)
	movq	-1920(%rbp), %rsi
	movq	%rsi, -2480(%rbp)       ## 8-byte Spill
## BB#92:                               ##   in Loop: Header=BB128_90 Depth=1
	movq	-2192(%rbp), %rax
	movl	-2196(%rbp), %ecx
	movq	%rax, -1944(%rbp)
	movl	%ecx, -1948(%rbp)
	movq	-1944(%rbp), %rax
	movl	-1948(%rbp), %ecx
	imull	(%rax), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -2488(%rbp)       ## 8-byte Spill
## BB#93:                               ##   in Loop: Header=BB128_90 Depth=1
Ltmp580:
	leaq	-800(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$1, %r8d
	movq	-2480(%rbp), %rsi       ## 8-byte Reload
	movq	-2488(%rbp), %rdx       ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE3runEPS3_PKS3_jj
Ltmp581:
	jmp	LBB128_94
LBB128_94:                              ##   in Loop: Header=BB128_90 Depth=1
	jmp	LBB128_95
LBB128_95:                              ##   in Loop: Header=BB128_90 Depth=1
	movl	-2196(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2196(%rbp)
	jmp	LBB128_90
LBB128_96:
	jmp	LBB128_97
LBB128_97:
	jmp	LBB128_98
LBB128_98:
	movsd	LCPI128_0(%rip), %xmm0
	movl	-2072(%rbp), %eax
	movl	%eax, %ecx
	cvtsi2sdq	%rcx, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -2208(%rbp)
	movq	-2032(%rbp), %rcx
	movq	%rcx, -1984(%rbp)
	movq	-1984(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -2496(%rbp)       ## 8-byte Spill
## BB#99:
	movq	-2496(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2216(%rbp)
	movq	-2032(%rbp), %rcx
	movl	8(%rcx), %edx
	movl	%edx, -2220(%rbp)
	movl	$0, -2224(%rbp)
LBB128_100:                             ## =>This Inner Loop Header: Depth=1
	movl	-2224(%rbp), %eax
	cmpl	-2220(%rbp), %eax
	jae	LBB128_104
## BB#101:                              ##   in Loop: Header=BB128_100 Depth=1
	movl	-2224(%rbp), %eax
	movl	%eax, %ecx
	movq	-2216(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movsd	-2208(%rbp), %xmm0
	movq	%rdx, -1992(%rbp)
	movsd	%xmm0, -2000(%rbp)
	movq	-1992(%rbp), %rcx
	movsd	-2000(%rbp), %xmm0
	movsd	(%rcx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx)
	movsd	-2000(%rbp), %xmm0
	movsd	8(%rcx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rcx)
## BB#102:                              ##   in Loop: Header=BB128_100 Depth=1
	jmp	LBB128_103
LBB128_103:                             ##   in Loop: Header=BB128_100 Depth=1
	movl	-2224(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2224(%rbp)
	jmp	LBB128_100
LBB128_104:
	movl	$0, -2088(%rbp)
LBB128_105:
	leaq	-800(%rbp), %rdi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED1Ev
	movl	-2088(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -2500(%rbp)       ## 4-byte Spill
	ja	LBB128_110
	jmp	LBB128_106
LBB128_106:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-8(%rbp), %rax
	jne	LBB128_111
## BB#107:                              ## %SP_return
	addq	$2512, %rsp             ## imm = 0x9D0
	popq	%rbp
	retq
LBB128_108:
	leaq	-800(%rbp), %rdi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED1Ev
## BB#109:
	movq	-2080(%rbp), %rdi
	callq	__Unwind_Resume
LBB128_110:
LBB128_111:                             ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc
Leh_func_end128:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table128:
Lexception128:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	93                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	91                      ## Call site table length
Lset200 = Leh_func_begin128-Leh_func_begin128 ## >> Call Site 1 <<
	.long	Lset200
Lset201 = Ltmp593-Leh_func_begin128     ##   Call between Leh_func_begin128 and Ltmp593
	.long	Lset201
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset202 = Ltmp593-Leh_func_begin128     ## >> Call Site 2 <<
	.long	Lset202
Lset203 = Ltmp600-Ltmp593               ##   Call between Ltmp593 and Ltmp600
	.long	Lset203
Lset204 = Ltmp610-Leh_func_begin128     ##     jumps to Ltmp610
	.long	Lset204
	.byte	0                       ##   On action: cleanup
Lset205 = Ltmp601-Leh_func_begin128     ## >> Call Site 3 <<
	.long	Lset205
Lset206 = Ltmp606-Ltmp601               ##   Call between Ltmp601 and Ltmp606
	.long	Lset206
Lset207 = Ltmp607-Leh_func_begin128     ##     jumps to Ltmp607
	.long	Lset207
	.byte	0                       ##   On action: cleanup
Lset208 = Ltmp595-Leh_func_begin128     ## >> Call Site 4 <<
	.long	Lset208
Lset209 = Ltmp583-Ltmp595               ##   Call between Ltmp595 and Ltmp583
	.long	Lset209
Lset210 = Ltmp610-Leh_func_begin128     ##     jumps to Ltmp610
	.long	Lset210
	.byte	0                       ##   On action: cleanup
Lset211 = Ltmp584-Leh_func_begin128     ## >> Call Site 5 <<
	.long	Lset211
Lset212 = Ltmp587-Ltmp584               ##   Call between Ltmp584 and Ltmp587
	.long	Lset212
Lset213 = Ltmp588-Leh_func_begin128     ##     jumps to Ltmp588
	.long	Lset213
	.byte	0                       ##   On action: cleanup
Lset214 = Ltmp578-Leh_func_begin128     ## >> Call Site 6 <<
	.long	Lset214
Lset215 = Ltmp581-Ltmp578               ##   Call between Ltmp578 and Ltmp581
	.long	Lset215
Lset216 = Ltmp610-Leh_func_begin128     ##     jumps to Ltmp610
	.long	Lset216
	.byte	0                       ##   On action: cleanup
Lset217 = Ltmp581-Leh_func_begin128     ## >> Call Site 7 <<
	.long	Lset217
Lset218 = Leh_func_end128-Ltmp581       ##   Call between Ltmp581 and Leh_func_end128
	.long	Lset218
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma3MatINSt3__17complexIdEEEC1Ev
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEEC1Ev
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEEC1Ev: ## @_ZN4arma3MatINSt3__17complexIdEEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp614:
	.cfi_def_cfa_offset 16
Ltmp615:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp616:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma3MatINSt3__17complexIdEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEE9steal_memERS4_
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEE9steal_memERS4_
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEE9steal_memERS4_: ## @_ZN4arma3MatINSt3__17complexIdEEE9steal_memERS4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp617:
	.cfi_def_cfa_offset 16
Ltmp618:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp619:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	-88(%rbp), %rsi
	cmpq	-96(%rbp), %rsi
	movq	%rsi, -128(%rbp)        ## 8-byte Spill
	je	LBB130_18
## BB#1:
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	movl	%ecx, -100(%rbp)
	movq	-96(%rbp), %rax
	movl	4(%rax), %ecx
	movl	%ecx, -104(%rbp)
	movq	-96(%rbp), %rax
	movl	8(%rax), %ecx
	movl	%ecx, -108(%rbp)
	movq	-96(%rbp), %rax
	movw	12(%rax), %dx
	movw	%dx, -110(%rbp)
	movq	-96(%rbp), %rax
	movw	14(%rax), %dx
	movw	%dx, -112(%rbp)
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movw	12(%rax), %dx
	movw	%dx, -114(%rbp)
	movw	14(%rax), %dx
	movw	%dx, -116(%rbp)
	movb	$0, -117(%rbp)
	movzwl	-114(%rbp), %ecx
	movzwl	-110(%rbp), %esi
	cmpl	%esi, %ecx
	jne	LBB130_3
## BB#2:
	movb	$1, -117(%rbp)
	jmp	LBB130_10
LBB130_3:
	movzwl	-114(%rbp), %eax
	cmpl	$1, %eax
	jne	LBB130_6
## BB#4:
	cmpl	$1, -104(%rbp)
	jne	LBB130_6
## BB#5:
	movb	$1, -117(%rbp)
LBB130_6:
	movzwl	-114(%rbp), %eax
	cmpl	$2, %eax
	jne	LBB130_9
## BB#7:
	cmpl	$1, -100(%rbp)
	jne	LBB130_9
## BB#8:
	movb	$1, -117(%rbp)
LBB130_9:
	jmp	LBB130_10
LBB130_10:
	movzwl	-116(%rbp), %eax
	cmpl	$1, %eax
	jg	LBB130_16
## BB#11:
	movzwl	-112(%rbp), %eax
	cmpl	$0, %eax
	jne	LBB130_13
## BB#12:
	cmpl	$16, -108(%rbp)
	ja	LBB130_14
LBB130_13:
	movzwl	-112(%rbp), %eax
	cmpl	$1, %eax
	jne	LBB130_16
LBB130_14:
	testb	$1, -117(%rbp)
	je	LBB130_16
## BB#15:
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma3MatINSt3__17complexIdEEE5resetEv
	movl	-100(%rbp), %eax
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -80(%rbp)
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-104(%rbp), %eax
	addq	$4, %rdi
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	addq	$8, %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	movw	-112(%rbp), %dx
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	addq	$14, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movw	%dx, (%rcx)
	movq	-96(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	addq	$16, %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	%rcx, (%rdi)
	movq	-96(%rbp), %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movl	$0, (%rcx)
	movq	-96(%rbp), %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movl	$0, (%rcx)
	movq	-96(%rbp), %rcx
	addq	$8, %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movl	$0, (%rcx)
	movq	-96(%rbp), %rcx
	addq	$14, %rcx
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movw	$0, (%rcx)
	movq	-96(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rcx
	movq	$0, (%rcx)
	jmp	LBB130_17
LBB130_16:
	movq	-96(%rbp), %rsi
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma3MatINSt3__17complexIdEEEaSERKS4_
	movq	%rax, -136(%rbp)        ## 8-byte Spill
LBB130_17:
	jmp	LBB130_18
LBB130_18:
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEE5resetEv
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEE5resetEv
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEE5resetEv: ## @_ZN4arma3MatINSt3__17complexIdEEE5resetEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp620:
	.cfi_def_cfa_offset 16
Ltmp621:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp622:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rdi, %rax
	movzwl	12(%rdi), %ecx
	movl	%ecx, %edx
	subl	$1, %edx
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	movl	%ecx, -20(%rbp)         ## 4-byte Spill
	movl	%edx, -24(%rbp)         ## 4-byte Spill
	je	LBB131_2
	jmp	LBB131_5
LBB131_5:
	movl	-20(%rbp), %eax         ## 4-byte Reload
	subl	$2, %eax
	movl	%eax, -28(%rbp)         ## 4-byte Spill
	je	LBB131_3
	jmp	LBB131_1
LBB131_1:
	xorl	%eax, %eax
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	movl	%eax, %esi
	movl	%eax, %edx
	callq	__ZN4arma3MatINSt3__17complexIdEEE9init_warmEjj
	jmp	LBB131_4
LBB131_2:
	xorl	%esi, %esi
	movl	$1, %edx
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN4arma3MatINSt3__17complexIdEEE9init_warmEjj
	jmp	LBB131_4
LBB131_3:
	movl	$1, %esi
	xorl	%edx, %edx
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN4arma3MatINSt3__17complexIdEEE9init_warmEjj
LBB131_4:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEEaSERKS4_
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEEaSERKS4_
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEEaSERKS4_: ## @_ZN4arma3MatINSt3__17complexIdEEEaSERKS4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp623:
	.cfi_def_cfa_offset 16
Ltmp624:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp625:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rsi
	cmpq	-48(%rbp), %rsi
	movq	%rsi, -56(%rbp)         ## 8-byte Spill
	je	LBB132_4
## BB#1:
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	movq	-48(%rbp), %rax
	movl	4(%rax), %edx
	movq	-56(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN4arma3MatINSt3__17complexIdEEE9init_warmEjj
	movq	-56(%rbp), %rax         ## 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	-48(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	-48(%rbp), %r8
	movl	8(%r8), %edx
	movq	%rdi, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movl	%edx, -20(%rbp)
	cmpl	$16, -20(%rbp)
	ja	LBB132_3
## BB#2:
	jmp	LBB132_3
LBB132_3:                               ## %_ZN4arma8arrayops4copyINSt3__17complexIdEEEEvPT_PKS5_j.exit
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	shlq	$4, %rsi
	movq	%rax, %rdi
	movq	%rsi, -64(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	movq	-64(%rbp), %rdx         ## 8-byte Reload
	callq	_memcpy
LBB132_4:
	movq	-56(%rbp), %rax         ## 8-byte Reload
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal4,4byte_literals
	.align	2
LCPI133_0:
	.long	1333788672              ## float 4.2949673E+9
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma3MatINSt3__17complexIdEEE9init_warmEjj
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEE9init_warmEjj
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEE9init_warmEjj: ## @_ZN4arma3MatINSt3__17complexIdEEE9init_warmEjj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp626:
	.cfi_def_cfa_offset 16
Ltmp627:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp628:
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              ## imm = 0x110
	movq	%rdi, -216(%rbp)
	movl	%esi, -220(%rbp)
	movl	%edx, -224(%rbp)
	movq	-216(%rbp), %rdi
	movl	(%rdi), %edx
	cmpl	-220(%rbp), %edx
	movq	%rdi, -264(%rbp)        ## 8-byte Spill
	jne	LBB133_3
## BB#1:
	movq	-264(%rbp), %rax        ## 8-byte Reload
	movl	4(%rax), %ecx
	cmpl	-224(%rbp), %ecx
	jne	LBB133_3
## BB#2:
	jmp	LBB133_41
LBB133_3:
	leaq	L_.str34(%rip), %rax
	leaq	-240(%rbp), %rcx
	leaq	-225(%rbp), %rdx
	movb	$0, -225(%rbp)
	movq	$0, -240(%rbp)
	movq	-264(%rbp), %rsi        ## 8-byte Reload
	movw	12(%rsi), %di
	movw	%di, -242(%rbp)
	movw	14(%rsi), %di
	movw	%di, -244(%rbp)
	movzwl	-244(%rbp), %r8d
	cmpl	$3, %r8d
	sete	%r9b
	movq	%rdx, -184(%rbp)
	movq	%rcx, -192(%rbp)
	andb	$1, %r9b
	movb	%r9b, -193(%rbp)
	movq	%rax, -208(%rbp)
	movb	-193(%rbp), %r9b
	testb	$1, %r9b
	jne	LBB133_4
	jmp	LBB133_5
LBB133_4:
	movq	-184(%rbp), %rax
	movb	$1, (%rax)
	movq	-208(%rbp), %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
LBB133_5:                               ## %_ZN4arma14arma_set_errorERbRPcbPKc.exit
	movzwl	-242(%rbp), %eax
	cmpl	$0, %eax
	jle	LBB133_25
## BB#6:
	cmpl	$0, -220(%rbp)
	jne	LBB133_14
## BB#7:
	cmpl	$0, -224(%rbp)
	jne	LBB133_14
## BB#8:
	movzwl	-242(%rbp), %eax
	cmpl	$1, %eax
	jne	LBB133_10
## BB#9:
	movl	$1, -224(%rbp)
	jmp	LBB133_13
LBB133_10:
	movzwl	-242(%rbp), %eax
	cmpl	$2, %eax
	jne	LBB133_12
## BB#11:
	movl	$1, -220(%rbp)
LBB133_12:
	jmp	LBB133_13
LBB133_13:
	jmp	LBB133_24
LBB133_14:
	movzwl	-242(%rbp), %eax
	cmpl	$1, %eax
	jne	LBB133_18
## BB#15:
	leaq	L_.str35(%rip), %rax
	leaq	-240(%rbp), %rcx
	leaq	-225(%rbp), %rdx
	cmpl	$1, -224(%rbp)
	setne	%sil
	movq	%rdx, -112(%rbp)
	movq	%rcx, -120(%rbp)
	andb	$1, %sil
	movb	%sil, -121(%rbp)
	movq	%rax, -136(%rbp)
	movb	-121(%rbp), %sil
	testb	$1, %sil
	jne	LBB133_16
	jmp	LBB133_17
LBB133_16:
	movq	-112(%rbp), %rax
	movb	$1, (%rax)
	movq	-136(%rbp), %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
LBB133_17:                              ## %_ZN4arma14arma_set_errorERbRPcbPKc.exit1
	jmp	LBB133_23
LBB133_18:
	movzwl	-242(%rbp), %eax
	cmpl	$2, %eax
	jne	LBB133_22
## BB#19:
	leaq	L_.str36(%rip), %rax
	leaq	-240(%rbp), %rcx
	leaq	-225(%rbp), %rdx
	cmpl	$1, -220(%rbp)
	setne	%sil
	movq	%rdx, -64(%rbp)
	movq	%rcx, -72(%rbp)
	andb	$1, %sil
	movb	%sil, -73(%rbp)
	movq	%rax, -88(%rbp)
	movb	-73(%rbp), %sil
	testb	$1, %sil
	jne	LBB133_20
	jmp	LBB133_21
LBB133_20:
	movq	-64(%rbp), %rax
	movb	$1, (%rax)
	movq	-88(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
LBB133_21:                              ## %_ZN4arma14arma_set_errorERbRPcbPKc.exit2
	jmp	LBB133_22
LBB133_22:
	jmp	LBB133_23
LBB133_23:
	jmp	LBB133_24
LBB133_24:
	jmp	LBB133_25
LBB133_25:
	cmpl	$65535, -220(%rbp)      ## imm = 0xFFFF
	ja	LBB133_27
## BB#26:
	cmpl	$65535, -224(%rbp)      ## imm = 0xFFFF
	jbe	LBB133_28
LBB133_27:
	movss	LCPI133_0(%rip), %xmm0
	movl	-220(%rbp), %eax
	movl	%eax, %ecx
	cvtsi2ssq	%rcx, %xmm1
	movl	-224(%rbp), %eax
	movl	%eax, %ecx
	cvtsi2ssq	%rcx, %xmm2
	mulss	%xmm2, %xmm1
	ucomiss	%xmm0, %xmm1
	seta	%dl
	movb	%dl, -265(%rbp)         ## 1-byte Spill
	jmp	LBB133_29
LBB133_28:
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, -265(%rbp)         ## 1-byte Spill
	jmp	LBB133_29
LBB133_29:
	movb	-265(%rbp), %al         ## 1-byte Reload
	leaq	L_.str37(%rip), %rcx
	leaq	-240(%rbp), %rdx
	leaq	-225(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	andb	$1, %al
	movb	%al, -33(%rbp)
	movq	%rcx, -48(%rbp)
	movb	-33(%rbp), %al
	testb	$1, %al
	jne	LBB133_30
	jmp	LBB133_31
LBB133_30:
	movq	-24(%rbp), %rax
	movb	$1, (%rax)
	movq	-48(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
LBB133_31:                              ## %_ZN4arma14arma_set_errorERbRPcbPKc.exit3
	leaq	-240(%rbp), %rsi
	movb	-225(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edi
	callq	__ZN4arma10arma_checkIPcEEvbRKT_
	movq	-264(%rbp), %rsi        ## 8-byte Reload
	movl	8(%rsi), %edi
	movl	%edi, -248(%rbp)
	movl	-220(%rbp), %edi
	imull	-224(%rbp), %edi
	movl	%edi, -252(%rbp)
	movl	-248(%rbp), %edi
	cmpl	-252(%rbp), %edi
	jne	LBB133_33
## BB#32:
	movl	-220(%rbp), %eax
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx)
	movl	-224(%rbp), %eax
	addq	$4, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	LBB133_41
LBB133_33:
	movzwl	-244(%rbp), %eax
	cmpl	$2, %eax
	sete	%cl
	movzbl	%cl, %eax
	andl	$1, %eax
	leaq	L_.str38(%rip), %rsi
	movl	%eax, %edi
	callq	__ZN4arma10arma_checkIA74_cEEvbRKT_
	movzwl	-244(%rbp), %eax
	cmpl	$0, %eax
	jne	LBB133_37
## BB#34:
	cmpl	$16, -248(%rbp)
	jbe	LBB133_36
## BB#35:
	movq	-264(%rbp), %rax        ## 8-byte Reload
	addq	$16, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	%rax, %rdi
	callq	_free
LBB133_36:
	jmp	LBB133_37
LBB133_37:
	cmpl	$16, -252(%rbp)
	ja	LBB133_39
## BB#38:
	movq	-264(%rbp), %rax        ## 8-byte Reload
	addq	$32, %rax
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	addq	$16, %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	LBB133_40
LBB133_39:
	movl	-252(%rbp), %edi
	callq	__ZN4arma6memory7acquireINSt3__17complexIdEEEEPT_j
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	addq	$16, %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
LBB133_40:
	movl	-220(%rbp), %eax
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -152(%rbp)
	movq	-152(%rbp), %rdx
	movl	%eax, (%rdx)
	movl	-224(%rbp), %eax
	addq	$4, %rcx
	movq	%rcx, -160(%rbp)
	movq	-160(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-252(%rbp), %eax
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	addq	$8, %rcx
	movq	%rcx, -168(%rbp)
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-264(%rbp), %rcx        ## 8-byte Reload
	addq	$14, %rcx
	movq	%rcx, -176(%rbp)
	movq	-176(%rbp), %rcx
	movw	$0, (%rcx)
LBB133_41:
	addq	$272, %rsp              ## imm = 0x110
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8arrayops10copy_smallINSt3__17complexIdEEEEvPT_PKS5_j
	.weak_def_can_be_hidden	__ZN4arma8arrayops10copy_smallINSt3__17complexIdEEEEvPT_PKS5_j
	.align	4, 0x90
__ZN4arma8arrayops10copy_smallINSt3__17complexIdEEEEvPT_PKS5_j: ## @_ZN4arma8arrayops10copy_smallINSt3__17complexIdEEEEvPT_PKS5_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp629:
	.cfi_def_cfa_offset 16
Ltmp630:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp631:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	decl	%edx
	movl	%edx, %esi
	subl	$15, %edx
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	movl	%edx, -36(%rbp)         ## 4-byte Spill
	ja	LBB134_17
## BB#19:
	leaq	LJTI134_0(%rip), %rax
	movq	-32(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB134_1:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	240(%rcx), %rdx
	movq	%rdx, 240(%rax)
	movq	248(%rcx), %rcx
	movq	%rcx, 248(%rax)
LBB134_2:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	224(%rcx), %rdx
	movq	%rdx, 224(%rax)
	movq	232(%rcx), %rcx
	movq	%rcx, 232(%rax)
LBB134_3:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	208(%rcx), %rdx
	movq	%rdx, 208(%rax)
	movq	216(%rcx), %rcx
	movq	%rcx, 216(%rax)
LBB134_4:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	192(%rcx), %rdx
	movq	%rdx, 192(%rax)
	movq	200(%rcx), %rcx
	movq	%rcx, 200(%rax)
LBB134_5:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	176(%rcx), %rdx
	movq	%rdx, 176(%rax)
	movq	184(%rcx), %rcx
	movq	%rcx, 184(%rax)
LBB134_6:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	160(%rcx), %rdx
	movq	%rdx, 160(%rax)
	movq	168(%rcx), %rcx
	movq	%rcx, 168(%rax)
LBB134_7:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	144(%rcx), %rdx
	movq	%rdx, 144(%rax)
	movq	152(%rcx), %rcx
	movq	%rcx, 152(%rax)
LBB134_8:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	128(%rcx), %rdx
	movq	%rdx, 128(%rax)
	movq	136(%rcx), %rcx
	movq	%rcx, 136(%rax)
LBB134_9:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	112(%rcx), %rdx
	movq	%rdx, 112(%rax)
	movq	120(%rcx), %rcx
	movq	%rcx, 120(%rax)
LBB134_10:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	96(%rcx), %rdx
	movq	%rdx, 96(%rax)
	movq	104(%rcx), %rcx
	movq	%rcx, 104(%rax)
LBB134_11:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	80(%rcx), %rdx
	movq	%rdx, 80(%rax)
	movq	88(%rcx), %rcx
	movq	%rcx, 88(%rax)
LBB134_12:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	64(%rcx), %rdx
	movq	%rdx, 64(%rax)
	movq	72(%rcx), %rcx
	movq	%rcx, 72(%rax)
LBB134_13:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rdx
	movq	%rdx, 48(%rax)
	movq	56(%rcx), %rcx
	movq	%rcx, 56(%rax)
LBB134_14:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	32(%rcx), %rdx
	movq	%rdx, 32(%rax)
	movq	40(%rcx), %rcx
	movq	%rcx, 40(%rax)
LBB134_15:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rdx
	movq	%rdx, 16(%rax)
	movq	24(%rcx), %rcx
	movq	%rcx, 24(%rax)
LBB134_16:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, (%rax)
	movq	8(%rcx), %rcx
	movq	%rcx, 8(%rax)
LBB134_17:
	jmp	LBB134_18
LBB134_18:
	popq	%rbp
	retq
	.cfi_endproc
	.align	2, 0x90
L134_0_set_16 = LBB134_16-LJTI134_0
L134_0_set_15 = LBB134_15-LJTI134_0
L134_0_set_14 = LBB134_14-LJTI134_0
L134_0_set_13 = LBB134_13-LJTI134_0
L134_0_set_12 = LBB134_12-LJTI134_0
L134_0_set_11 = LBB134_11-LJTI134_0
L134_0_set_10 = LBB134_10-LJTI134_0
L134_0_set_9 = LBB134_9-LJTI134_0
L134_0_set_8 = LBB134_8-LJTI134_0
L134_0_set_7 = LBB134_7-LJTI134_0
L134_0_set_6 = LBB134_6-LJTI134_0
L134_0_set_5 = LBB134_5-LJTI134_0
L134_0_set_4 = LBB134_4-LJTI134_0
L134_0_set_3 = LBB134_3-LJTI134_0
L134_0_set_2 = LBB134_2-LJTI134_0
L134_0_set_1 = LBB134_1-LJTI134_0
LJTI134_0:
	.long	L134_0_set_16
	.long	L134_0_set_15
	.long	L134_0_set_14
	.long	L134_0_set_13
	.long	L134_0_set_12
	.long	L134_0_set_11
	.long	L134_0_set_10
	.long	L134_0_set_9
	.long	L134_0_set_8
	.long	L134_0_set_7
	.long	L134_0_set_6
	.long	L134_0_set_5
	.long	L134_0_set_4
	.long	L134_0_set_3
	.long	L134_0_set_2
	.long	L134_0_set_1

	.globl	__ZN4arma6memory7acquireINSt3__17complexIdEEEEPT_j
	.weak_def_can_be_hidden	__ZN4arma6memory7acquireINSt3__17complexIdEEEEPT_j
	.align	4, 0x90
__ZN4arma6memory7acquireINSt3__17complexIdEEEEPT_j: ## @_ZN4arma6memory7acquireINSt3__17complexIdEEEEPT_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp632:
	.cfi_def_cfa_offset 16
Ltmp633:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp634:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	$-1, %rax
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %edi
	movl	%edi, %ecx
	shrq	$4, %rax
	cmpq	%rax, %rcx
	seta	%dl
	movzbl	%dl, %edi
	andl	$1, %edi
	leaq	L_.str39(%rip), %rsi
	callq	__ZN4arma10arma_checkIA53_cEEvbRKT_
	movl	-4(%rbp), %edi
	movl	%edi, %eax
	shlq	$4, %rax
	movq	%rax, %rdi
	callq	_malloc
	movq	%rax, -16(%rbp)
	cmpl	$0, -4(%rbp)
	jbe	LBB135_2
## BB#1:
	cmpq	$0, -16(%rbp)
	sete	%al
	movzbl	%al, %ecx
	andl	$1, %ecx
	leaq	L_.str40(%rip), %rsi
	movl	%ecx, %edi
	callq	__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_
LBB135_2:
	movq	-16(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEEC2Ev
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEEC2Ev
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEEC2Ev: ## @_ZN4arma3MatINSt3__17complexIdEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp635:
	.cfi_def_cfa_offset 16
Ltmp636:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp637:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rdi
	movl	$0, (%rdi)
	movl	$0, 4(%rdi)
	movl	$0, 8(%rdi)
	movw	$0, 12(%rdi)
	movw	$0, 14(%rdi)
	movq	$0, 16(%rdi)
	addq	$32, %rdi
	movq	%rdi, %rax
	addq	$256, %rax              ## imm = 0x100
	movq	%rax, -64(%rbp)         ## 8-byte Spill
	movq	%rdi, -72(%rbp)         ## 8-byte Spill
LBB136_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-72(%rbp), %rax         ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm0, -48(%rbp)
	movq	-32(%rbp), %rcx
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rcx, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rcx
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-64(%rbp), %rcx         ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	jne	LBB136_1
## BB#2:
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC1Ej
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC1Ej
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC1Ej: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC1Ej
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp638:
	.cfi_def_cfa_offset 16
Ltmp639:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp640:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj: ## @_ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp641:
	.cfi_def_cfa_offset 16
Ltmp642:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp643:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	__ZN4arma3MatINSt3__17complexIdEEE9init_warmEjj
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEE5zerosEv
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEE5zerosEv
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEE5zerosEv: ## @_ZN4arma3MatINSt3__17complexIdEEE5zerosEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp644:
	.cfi_def_cfa_offset 16
Ltmp645:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp646:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	16(%rax), %rax
	movl	8(%rdi), %esi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	__ZN4arma8arrayops10fill_zerosINSt3__17complexIdEEEEvPT_j
	movq	-24(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8arrayops10fill_zerosINSt3__17complexIdEEEEvPT_j
	.weak_def_can_be_hidden	__ZN4arma8arrayops10fill_zerosINSt3__17complexIdEEEEvPT_j
	.align	4, 0x90
__ZN4arma8arrayops10fill_zerosINSt3__17complexIdEEEEvPT_j: ## @_ZN4arma8arrayops10fill_zerosINSt3__17complexIdEEEEvPT_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp647:
	.cfi_def_cfa_offset 16
Ltmp648:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp649:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorps	%xmm0, %xmm0
	leaq	-80(%rbp), %rax
	movq	%rdi, -56(%rbp)
	movl	%esi, -60(%rbp)
	movq	-56(%rbp), %rdi
	movq	%rax, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm0, -48(%rbp)
	movq	-32(%rbp), %rax
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rax, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rax
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
	movl	-60(%rbp), %esi
	movsd	-80(%rbp), %xmm0
	movsd	-72(%rbp), %xmm1
	callq	__ZN4arma8arrayops11inplace_setINSt3__17complexIdEEEEvPT_S5_j
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma9op_fft_cx8copy_vecINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j
	.weak_def_can_be_hidden	__ZN4arma9op_fft_cx8copy_vecINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j
	.align	4, 0x90
__ZN4arma9op_fft_cx8copy_vecINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j: ## @_ZN4arma9op_fft_cx8copy_vecINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp650:
	.cfi_def_cfa_offset 16
Ltmp651:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp652:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	callq	__ZN4arma9op_fft_cx15copy_vec_unwrapINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE3runEPS3_PKS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE3runEPS3_PKS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE3runEPS3_PKS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE3runEPS3_PKS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp653:
	.cfi_def_cfa_offset 16
Ltmp654:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp655:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -80(%rbp)
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$304, %rsi              ## imm = 0x130
	movl	-76(%rbp), %ecx
	movq	%rsi, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	-40(%rbp), %rsi
	movl	-44(%rbp), %ecx
	movl	%ecx, %edi
	movq	16(%rsi), %rsi
	shlq	$2, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	movl	(%rsi), %ecx
	movl	%ecx, -84(%rbp)
	movq	%rdx, %rsi
	addq	$400, %rsi              ## imm = 0x190
	movl	-76(%rbp), %ecx
	movq	%rsi, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %ecx
	movl	%ecx, %edi
	movq	16(%rsi), %rsi
	shlq	$2, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movl	(%rsi), %ecx
	movl	%ecx, -88(%rbp)
	movq	-64(%rbp), %rsi
	movl	-88(%rbp), %ecx
	imull	-84(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edi
	shlq	$4, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -96(%rbp)
	cmpl	$1, -84(%rbp)
	movq	%rdx, -128(%rbp)        ## 8-byte Spill
	jne	LBB142_6
## BB#1:
	movq	-64(%rbp), %rax
	movq	%rax, -104(%rbp)
LBB142_2:                               ## =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	cmpq	-96(%rbp), %rax
	je	LBB142_5
## BB#3:                                ##   in Loop: Header=BB142_2 Depth=1
	movq	-104(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, (%rax)
	movq	8(%rcx), %rcx
	movq	%rcx, 8(%rax)
## BB#4:                                ##   in Loop: Header=BB142_2 Depth=1
	movq	-104(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -104(%rbp)
	movl	-80(%rbp), %ecx
	movq	-72(%rbp), %rax
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -72(%rbp)
	jmp	LBB142_2
LBB142_5:
	jmp	LBB142_11
LBB142_6:
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	-80(%rbp), %eax
	imull	-88(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-64(%rbp), %rcx
	movq	%rcx, -120(%rbp)
LBB142_7:                               ## =>This Inner Loop Header: Depth=1
	movq	-120(%rbp), %rax
	cmpq	-96(%rbp), %rax
	je	LBB142_10
## BB#8:                                ##   in Loop: Header=BB142_7 Depth=1
	movq	-120(%rbp), %rsi
	movq	-72(%rbp), %rdx
	movl	-108(%rbp), %ecx
	movl	-112(%rbp), %r8d
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE3runEPS3_PKS3_jj
## BB#9:                                ##   in Loop: Header=BB142_7 Depth=1
	movl	-84(%rbp), %eax
	movq	-120(%rbp), %rcx
	movl	%eax, %eax
	movl	%eax, %edx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -120(%rbp)
	movl	-80(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, %eax
	movl	%eax, %edx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -72(%rbp)
	jmp	LBB142_7
LBB142_10:
	jmp	LBB142_11
LBB142_11:
	movl	-88(%rbp), %eax
	addl	$-2, %eax
	movl	%eax, %ecx
	subl	$3, %eax
	movq	%rcx, -136(%rbp)        ## 8-byte Spill
	movl	%eax, -140(%rbp)        ## 4-byte Spill
	ja	LBB142_16
## BB#18:
	leaq	LJTI142_0(%rip), %rax
	movq	-136(%rbp), %rcx        ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB142_12:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_2EPS3_jj
	jmp	LBB142_17
LBB142_13:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_3EPS3_jj
	jmp	LBB142_17
LBB142_14:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_4EPS3_jj
	jmp	LBB142_17
LBB142_15:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_5EPS3_jj
	jmp	LBB142_17
LBB142_16:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-88(%rbp), %r8d
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_NEPS3_jjj
LBB142_17:
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc
	.align	2, 0x90
L142_0_set_12 = LBB142_12-LJTI142_0
L142_0_set_13 = LBB142_13-LJTI142_0
L142_0_set_14 = LBB142_14-LJTI142_0
L142_0_set_15 = LBB142_15-LJTI142_0
LJTI142_0:
	.long	L142_0_set_12
	.long	L142_0_set_13
	.long	L142_0_set_14
	.long	L142_0_set_15

	.globl	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	.weak_def_can_be_hidden	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	.align	4, 0x90
__ZN4arma8podarrayINSt3__17complexIdEEED1Ev: ## @_ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp656:
	.cfi_def_cfa_offset 16
Ltmp657:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp658:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
	.weak_def_can_be_hidden	__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
	.align	4, 0x90
__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC1ERKS5_: ## @_ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp659:
	.cfi_def_cfa_offset 16
Ltmp660:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp661:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC2ERKS5_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED1Ev
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED1Ev
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED1Ev: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp662:
	.cfi_def_cfa_offset 16
Ltmp663:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp664:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED2Ev
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED2Ev
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED2Ev: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp665:
	.cfi_def_cfa_offset 16
Ltmp666:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp667:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	addq	$496, %rax              ## imm = 0x1F0
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	movq	-16(%rbp), %rax         ## 8-byte Reload
	addq	$400, %rax              ## imm = 0x190
	movq	%rax, %rdi
	callq	__ZN4arma8podarrayIjED1Ev
	movq	-16(%rbp), %rax         ## 8-byte Reload
	addq	$304, %rax              ## imm = 0x130
	movq	%rax, %rdi
	callq	__ZN4arma8podarrayIjED1Ev
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayIjED1Ev
	.weak_def_can_be_hidden	__ZN4arma8podarrayIjED1Ev
	.align	4, 0x90
__ZN4arma8podarrayIjED1Ev:              ## @_ZN4arma8podarrayIjED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp668:
	.cfi_def_cfa_offset 16
Ltmp669:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp670:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma8podarrayIjED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EED2Ev
	.weak_def_can_be_hidden	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EED2Ev
	.align	4, 0x90
__ZN4arma5storeINSt3__17complexIdEELj0ELb0EED2Ev: ## @_ZN4arma5storeINSt3__17complexIdEELj0ELb0EED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp671:
	.cfi_def_cfa_offset 16
Ltmp672:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp673:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$16, %rdi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayIjED2Ev
	.weak_def_can_be_hidden	__ZN4arma8podarrayIjED2Ev
	.align	4, 0x90
__ZN4arma8podarrayIjED2Ev:              ## @_ZN4arma8podarrayIjED2Ev
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin149:
	.cfi_lsda 16, Lexception149
## BB#0:
	pushq	%rbp
Ltmp677:
	.cfi_def_cfa_offset 16
Ltmp678:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp679:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	cmpl	$16, (%rdi)
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	jbe	LBB149_4
## BB#1:
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	16(%rax), %rcx
	movq	%rcx, -8(%rbp)
Ltmp674:
	movq	%rcx, %rdi
	callq	_free
Ltmp675:
	jmp	LBB149_2
LBB149_2:                               ## %_ZN4arma6memory7releaseIjEEvPT_.exit
	jmp	LBB149_3
LBB149_3:
	jmp	LBB149_4
LBB149_4:
	addq	$32, %rsp
	popq	%rbp
	retq
LBB149_5:
Ltmp676:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -28(%rbp)         ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end149:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table149:
Lexception149:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	21                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	13                      ## Call site table length
Lset219 = Ltmp674-Leh_func_begin149     ## >> Call Site 1 <<
	.long	Lset219
Lset220 = Ltmp675-Ltmp674               ##   Call between Ltmp674 and Ltmp675
	.long	Lset220
Lset221 = Ltmp676-Leh_func_begin149     ##     jumps to Ltmp676
	.long	Lset221
	.byte	1                       ##   On action: 1
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC2ERKS5_
	.weak_def_can_be_hidden	__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC2ERKS5_
	.align	4, 0x90
__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC2ERKS5_: ## @_ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC2ERKS5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp680:
	.cfi_def_cfa_offset 16
Ltmp681:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp682:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayINSt3__17complexIdEEED2Ev
	.weak_def_can_be_hidden	__ZN4arma8podarrayINSt3__17complexIdEEED2Ev
	.align	4, 0x90
__ZN4arma8podarrayINSt3__17complexIdEEED2Ev: ## @_ZN4arma8podarrayINSt3__17complexIdEEED2Ev
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin151:
	.cfi_lsda 16, Lexception151
## BB#0:
	pushq	%rbp
Ltmp686:
	.cfi_def_cfa_offset 16
Ltmp687:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp688:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	cmpl	$16, (%rdi)
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	jbe	LBB151_4
## BB#1:
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	16(%rax), %rcx
	movq	%rcx, -8(%rbp)
Ltmp683:
	movq	%rcx, %rdi
	callq	_free
Ltmp684:
	jmp	LBB151_2
LBB151_2:                               ## %_ZN4arma6memory7releaseINSt3__17complexIdEEEEvPT_.exit
	jmp	LBB151_3
LBB151_3:
	jmp	LBB151_4
LBB151_4:
	addq	$32, %rsp
	popq	%rbp
	retq
LBB151_5:
Ltmp685:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -28(%rbp)         ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end151:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table151:
Lexception151:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	21                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	13                      ## Call site table length
Lset222 = Ltmp683-Leh_func_begin151     ## >> Call Site 1 <<
	.long	Lset222
Lset223 = Ltmp684-Ltmp683               ##   Call between Ltmp683 and Ltmp684
	.long	Lset223
Lset224 = Ltmp685-Leh_func_begin151     ##     jumps to Ltmp685
	.long	Lset224
	.byte	1                       ##   On action: 1
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_2EPS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_2EPS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_2EPS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_2EPS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp689:
	.cfi_def_cfa_offset 16
Ltmp690:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp691:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movl	%edx, -132(%rbp)
	movl	%ecx, -136(%rbp)
	movq	-120(%rbp), %rsi
	movq	%rsi, -112(%rbp)
	movq	-112(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -104(%rbp)
	movq	-104(%rbp), %rsi
	movq	16(%rsi), %rsi
	movq	%rsi, -144(%rbp)
	movl	$0, -148(%rbp)
LBB152_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-148(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jae	LBB152_4
## BB#2:                                ##   in Loop: Header=BB152_1 Depth=1
	leaq	-168(%rbp), %rax
	movl	-148(%rbp), %ecx
	movl	-136(%rbp), %edx
	movl	%ecx, %esi
	addl	%edx, %esi
	movl	%esi, %edi
	movq	-128(%rbp), %r8
	shlq	$4, %rdi
	addq	%rdi, %r8
	movl	-132(%rbp), %edx
	imull	%edx, %ecx
	movl	%ecx, %edi
	movq	-144(%rbp), %r9
	shlq	$4, %rdi
	addq	%rdi, %r9
	movq	%r8, %rdi
	movq	%r9, %rsi
	movq	%rax, -192(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -168(%rbp)
	movsd	%xmm1, -160(%rbp)
	movl	-148(%rbp), %ecx
	movl	%ecx, %eax
	movl	%eax, %ecx
	movl	-136(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, %esi
	movq	-128(%rbp), %rdi
	shlq	$4, %rsi
	movq	%rdi, %r8
	addq	%rsi, %r8
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	%rdi, -56(%rbp)
	leaq	-168(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-64(%rbp), %rax
	leaq	-48(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movq	%rax, -16(%rbp)
	movsd	(%rax), %xmm0
	movsd	(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	movsd	8(%rax), %xmm0
	movsd	8(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-48(%rbp), %xmm0
	movsd	-40(%rbp), %xmm1
	movsd	%xmm0, -184(%rbp)
	movsd	%xmm1, -176(%rbp)
	movq	-184(%rbp), %rax
	movq	%rax, (%r8)
	movq	-176(%rbp), %rax
	movq	%rax, 8(%r8)
	movl	-148(%rbp), %ecx
	movl	%ecx, %eax
	movq	-128(%rbp), %rsi
	shlq	$4, %rax
	addq	%rax, %rsi
	movq	%rsi, -88(%rbp)
	movq	-192(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -96(%rbp)
	movq	-88(%rbp), %rsi
	movq	-96(%rbp), %rdi
	movq	%rdi, -80(%rbp)
	movq	-80(%rbp), %rdi
	movsd	(%rdi), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-96(%rbp), %rdi
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rdi
	movsd	8(%rdi), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
## BB#3:                                ##   in Loop: Header=BB152_1 Depth=1
	movl	-148(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -148(%rbp)
	jmp	LBB152_1
LBB152_4:
	addq	$192, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI153_0:
	.quad	4602678819172646912     ## double 0.5
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_3EPS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_3EPS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_3EPS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_3EPS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp692:
	.cfi_def_cfa_offset 16
Ltmp693:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp694:
	.cfi_def_cfa_register %rbp
	subq	$848, %rsp              ## imm = 0x350
	leaq	-96(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -8(%rbp)
	movq	%rdi, -608(%rbp)
	movq	%rsi, -616(%rbp)
	movl	%edx, -620(%rbp)
	movl	%ecx, -624(%rbp)
	movq	-608(%rbp), %rsi
	movq	%rax, %rdi
	addq	$80, %rdi
	movq	%rdi, -776(%rbp)        ## 8-byte Spill
	movq	%rsi, -784(%rbp)        ## 8-byte Spill
	movq	%rax, -792(%rbp)        ## 8-byte Spill
LBB153_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-792(%rbp), %rax        ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -584(%rbp)
	movsd	%xmm0, -592(%rbp)
	movsd	%xmm0, -600(%rbp)
	movq	-584(%rbp), %rcx
	movsd	-592(%rbp), %xmm0
	movsd	-600(%rbp), %xmm1
	movq	%rcx, -560(%rbp)
	movsd	%xmm0, -568(%rbp)
	movsd	%xmm1, -576(%rbp)
	movq	-560(%rbp), %rcx
	movsd	-568(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-576(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-776(%rbp), %rcx        ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -792(%rbp)        ## 8-byte Spill
	jne	LBB153_1
## BB#2:
	movq	-784(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -632(%rbp)
	movq	-632(%rbp), %rax
	movq	%rax, -640(%rbp)
	movl	-620(%rbp), %ecx
	imull	-624(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-632(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -104(%rbp)
	movq	-104(%rbp), %rax
	movsd	8(%rax), %xmm0
	movsd	%xmm0, -648(%rbp)
	movl	-624(%rbp), %ecx
	shll	$1, %ecx
	movl	%ecx, -652(%rbp)
	movl	-624(%rbp), %ecx
	movl	%ecx, -656(%rbp)
LBB153_3:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$0, -656(%rbp)
	jbe	LBB153_6
## BB#4:                                ##   in Loop: Header=BB153_3 Depth=1
	leaq	-768(%rbp), %rax
	leaq	-96(%rbp), %rcx
	leaq	-752(%rbp), %rdx
	leaq	-736(%rbp), %rsi
	movsd	LCPI153_0(%rip), %xmm0
	leaq	-80(%rbp), %rdi
	movl	-624(%rbp), %r8d
	movl	%r8d, %r9d
	movq	-616(%rbp), %r10
	shlq	$4, %r9
	addq	%r9, %r10
	movq	-632(%rbp), %r9
	movq	%rdi, -800(%rbp)        ## 8-byte Spill
	movq	%r10, %rdi
	movq	%rsi, -808(%rbp)        ## 8-byte Spill
	movq	%r9, %rsi
	movq	%rax, -816(%rbp)        ## 8-byte Spill
	movq	%rcx, -824(%rbp)        ## 8-byte Spill
	movq	%rdx, -832(%rbp)        ## 8-byte Spill
	movsd	%xmm0, -840(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -672(%rbp)
	movsd	%xmm1, -664(%rbp)
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rcx
	movq	%rcx, -72(%rbp)
	movq	%rax, -80(%rbp)
	leaq	-64(%rbp), %rax
	movl	-652(%rbp), %r8d
	movl	%r8d, %ecx
	movq	-616(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	-640(%rbp), %rsi
	movq	%rdx, %rdi
	movq	%rax, -848(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -688(%rbp)
	movsd	%xmm1, -680(%rbp)
	movq	-688(%rbp), %rax
	movq	-680(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-800(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -176(%rbp)
	movq	-848(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -184(%rbp)
	movq	-176(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	8(%rdx), %rdx
	movq	%rdx, -160(%rbp)
	movq	%rsi, -168(%rbp)
	movq	-184(%rbp), %rdx
	leaq	-168(%rbp), %rsi
	movq	%rsi, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-144(%rbp), %rsi
	movq	%rdx, -136(%rbp)
	movsd	(%rdx), %xmm0
	movsd	(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-152(%rbp), %rdx
	movq	%rdx, -128(%rbp)
	movsd	8(%rdx), %xmm0
	movsd	8(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-168(%rbp), %xmm0
	movsd	-160(%rbp), %xmm1
	movsd	%xmm0, -704(%rbp)
	movsd	%xmm1, -696(%rbp)
	movq	-704(%rbp), %rdx
	movq	-696(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	%rdx, -96(%rbp)
	movsd	-648(%rbp), %xmm0
	leaq	-96(%rbp), %rdx
	movq	%rdx, -192(%rbp)
	movsd	%xmm0, -200(%rbp)
	movq	-192(%rbp), %rdx
	movsd	(%rdx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdx)
	movsd	-200(%rbp), %xmm0
	movsd	8(%rdx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rdx)
	movq	%rax, -256(%rbp)
	movq	%rcx, -264(%rbp)
	movq	-256(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	8(%rdx), %rdx
	movq	%rdx, -240(%rbp)
	movq	%rsi, -248(%rbp)
	movq	-264(%rbp), %rdx
	leaq	-248(%rbp), %rsi
	movq	%rsi, -224(%rbp)
	movq	%rdx, -232(%rbp)
	movq	-224(%rbp), %rsi
	movq	%rdx, -216(%rbp)
	movsd	(%rdx), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-232(%rbp), %rdx
	movq	%rdx, -208(%rbp)
	movsd	8(%rdx), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-248(%rbp), %xmm0
	movsd	-240(%rbp), %xmm1
	movsd	%xmm0, -720(%rbp)
	movsd	%xmm1, -712(%rbp)
	movq	-720(%rbp), %rdx
	movq	%rdx, -48(%rbp)
	movq	-712(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movl	-624(%rbp), %r8d
	movl	%r8d, %edx
	movq	-616(%rbp), %rsi
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movq	-616(%rbp), %rdx
	movq	%rdx, -272(%rbp)
	movq	-272(%rbp), %rdx
	movsd	(%rdx), %xmm0
	movq	-824(%rbp), %rdx        ## 8-byte Reload
	addq	$48, %rdx
	movq	%rdx, -280(%rbp)
	movq	-280(%rbp), %rdx
	movsd	-840(%rbp), %xmm1       ## 8-byte Reload
	mulsd	(%rdx), %xmm1
	subsd	%xmm1, %xmm0
	movq	-616(%rbp), %rdx
	movq	%rdx, -288(%rbp)
	movq	-288(%rbp), %rdx
	movsd	8(%rdx), %xmm1
	movq	-824(%rbp), %rdx        ## 8-byte Reload
	addq	$48, %rdx
	movq	%rdx, -296(%rbp)
	movq	-296(%rbp), %rdx
	movsd	-840(%rbp), %xmm2       ## 8-byte Reload
	mulsd	8(%rdx), %xmm2
	subsd	%xmm2, %xmm1
	movq	-808(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -328(%rbp)
	movsd	%xmm0, -336(%rbp)
	movsd	%xmm1, -344(%rbp)
	movq	-328(%rbp), %rdi
	movsd	-336(%rbp), %xmm0
	movsd	-344(%rbp), %xmm1
	movq	%rdi, -304(%rbp)
	movsd	%xmm0, -312(%rbp)
	movsd	%xmm1, -320(%rbp)
	movq	-304(%rbp), %rdi
	movsd	-312(%rbp), %xmm0
	movsd	%xmm0, (%rdi)
	movsd	-320(%rbp), %xmm0
	movsd	%xmm0, 8(%rdi)
	movq	-736(%rbp), %rdi
	movq	%rdi, (%rsi)
	movq	-728(%rbp), %rdi
	movq	%rdi, 8(%rsi)
	movq	-616(%rbp), %rsi
	movq	-824(%rbp), %rdi        ## 8-byte Reload
	addq	$48, %rdi
	movq	%rsi, -368(%rbp)
	movq	%rdi, -376(%rbp)
	movq	-368(%rbp), %rsi
	movq	-376(%rbp), %rdi
	movq	%rdi, -360(%rbp)
	movq	-360(%rbp), %rdi
	movsd	(%rdi), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-376(%rbp), %rdi
	movq	%rdi, -352(%rbp)
	movq	-352(%rbp), %rdi
	movsd	8(%rdi), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movl	-652(%rbp), %r8d
	movl	%r8d, %esi
	movq	-616(%rbp), %rdi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movl	-624(%rbp), %r8d
	movl	%r8d, %esi
	movq	-616(%rbp), %r9
	shlq	$4, %rsi
	addq	%rsi, %r9
	movq	%r9, -384(%rbp)
	movq	-384(%rbp), %rsi
	movsd	(%rsi), %xmm0
	movq	-824(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -392(%rbp)
	movq	-392(%rbp), %r9
	addsd	8(%r9), %xmm0
	movl	-624(%rbp), %r8d
	movl	%r8d, %r9d
	movq	-616(%rbp), %r10
	shlq	$4, %r9
	addq	%r9, %r10
	movq	%r10, -400(%rbp)
	movq	-400(%rbp), %r9
	movsd	8(%r9), %xmm1
	movq	%rsi, -408(%rbp)
	movq	-408(%rbp), %r9
	subsd	(%r9), %xmm1
	movq	-832(%rbp), %r9         ## 8-byte Reload
	movq	%r9, -440(%rbp)
	movsd	%xmm0, -448(%rbp)
	movsd	%xmm1, -456(%rbp)
	movq	-440(%rbp), %r10
	movsd	-448(%rbp), %xmm0
	movsd	-456(%rbp), %xmm1
	movq	%r10, -416(%rbp)
	movsd	%xmm0, -424(%rbp)
	movsd	%xmm1, -432(%rbp)
	movq	-416(%rbp), %r10
	movsd	-424(%rbp), %xmm0
	movsd	%xmm0, (%r10)
	movsd	-432(%rbp), %xmm0
	movsd	%xmm0, 8(%r10)
	movq	-752(%rbp), %r10
	movq	%r10, (%rdi)
	movq	-744(%rbp), %r10
	movq	%r10, 8(%rdi)
	movl	-624(%rbp), %r8d
	movl	%r8d, %edi
	movq	-616(%rbp), %r10
	shlq	$4, %rdi
	addq	%rdi, %r10
	movq	%rsi, -464(%rbp)
	movq	-464(%rbp), %rdi
	movsd	8(%rdi), %xmm0
	movd	%xmm0, %rdi
	movabsq	$-9223372036854775808, %r11 ## imm = 0x8000000000000000
	xorq	%r11, %rdi
	movd	%rdi, %xmm0
	movq	%rsi, -472(%rbp)
	movq	-472(%rbp), %rdi
	movsd	(%rdi), %xmm1
	movq	-816(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -504(%rbp)
	movsd	%xmm0, -512(%rbp)
	movsd	%xmm1, -520(%rbp)
	movq	-504(%rbp), %r11
	movsd	-512(%rbp), %xmm0
	movsd	-520(%rbp), %xmm1
	movq	%r11, -480(%rbp)
	movsd	%xmm0, -488(%rbp)
	movsd	%xmm1, -496(%rbp)
	movq	-480(%rbp), %r11
	movsd	-488(%rbp), %xmm0
	movsd	%xmm0, (%r11)
	movsd	-496(%rbp), %xmm0
	movsd	%xmm0, 8(%r11)
	movq	%r10, -544(%rbp)
	movq	%rdi, -552(%rbp)
	movq	-544(%rbp), %r10
	movq	-552(%rbp), %r11
	movq	%r11, -536(%rbp)
	movq	-536(%rbp), %r11
	movsd	(%r11), %xmm0
	movsd	(%r10), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r10)
	movq	-552(%rbp), %r11
	movq	%r11, -528(%rbp)
	movq	-528(%rbp), %r11
	movsd	8(%r11), %xmm0
	movsd	8(%r10), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r10)
	movq	-616(%rbp), %r10
	addq	$16, %r10
	movq	%r10, -616(%rbp)
	movl	-620(%rbp), %r8d
	movq	-632(%rbp), %r10
	movl	%r8d, %r8d
	movl	%r8d, %r11d
	shlq	$4, %r11
	addq	%r11, %r10
	movq	%r10, -632(%rbp)
	movl	-620(%rbp), %r8d
	shll	$1, %r8d
	movq	-640(%rbp), %r10
	movl	%r8d, %r8d
	movl	%r8d, %r11d
	shlq	$4, %r11
	addq	%r11, %r10
	movq	%r10, -640(%rbp)
## BB#5:                                ##   in Loop: Header=BB153_3 Depth=1
	movl	-656(%rbp), %eax
	addl	$4294967295, %eax       ## imm = 0xFFFFFFFF
	movl	%eax, -656(%rbp)
	jmp	LBB153_3
LBB153_6:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-8(%rbp), %rax
	jne	LBB153_8
## BB#7:                                ## %SP_return
	addq	$848, %rsp              ## imm = 0x350
	popq	%rbp
	retq
LBB153_8:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_4EPS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_4EPS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_4EPS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_4EPS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp695:
	.cfi_def_cfa_offset 16
Ltmp696:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp697:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$984, %rsp              ## imm = 0x3D8
Ltmp698:
	.cfi_offset %rbx, -24
	leaq	-128(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -16(%rbp)
	movq	%rdi, -744(%rbp)
	movq	%rsi, -752(%rbp)
	movl	%edx, -756(%rbp)
	movl	%ecx, -760(%rbp)
	movq	-744(%rbp), %rsi
	movq	%rax, %rdi
	addq	$112, %rdi
	movq	%rdi, -936(%rbp)        ## 8-byte Spill
	movq	%rsi, -944(%rbp)        ## 8-byte Spill
	movq	%rax, -952(%rbp)        ## 8-byte Spill
LBB154_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-952(%rbp), %rax        ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -720(%rbp)
	movsd	%xmm0, -728(%rbp)
	movsd	%xmm0, -736(%rbp)
	movq	-720(%rbp), %rcx
	movsd	-728(%rbp), %xmm0
	movsd	-736(%rbp), %xmm1
	movq	%rcx, -696(%rbp)
	movsd	%xmm0, -704(%rbp)
	movsd	%xmm1, -712(%rbp)
	movq	-696(%rbp), %rcx
	movsd	-704(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-712(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-936(%rbp), %rcx        ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -952(%rbp)        ## 8-byte Spill
	jne	LBB154_1
## BB#2:
	movq	-944(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -368(%rbp)
	movq	-368(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -360(%rbp)
	movq	-360(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -768(%rbp)
	movl	-760(%rbp), %ecx
	shll	$1, %ecx
	movl	%ecx, -772(%rbp)
	imull	$3, -760(%rbp), %ecx
	movl	%ecx, -776(%rbp)
	movl	$0, -780(%rbp)
LBB154_3:                               ## =>This Inner Loop Header: Depth=1
	movl	-780(%rbp), %eax
	cmpl	-760(%rbp), %eax
	jae	LBB154_9
## BB#4:                                ##   in Loop: Header=BB154_3 Depth=1
	movb	$1, %al
	leaq	-128(%rbp), %rcx
	movl	-780(%rbp), %edx
	movl	-760(%rbp), %esi
	movl	%edx, %edi
	addl	%esi, %edi
	movl	%edi, %r8d
	movq	-752(%rbp), %r9
	shlq	$4, %r8
	addq	%r8, %r9
	movl	-756(%rbp), %esi
	imull	%esi, %edx
	movl	%edx, %r8d
	movq	-768(%rbp), %r10
	shlq	$4, %r8
	addq	%r8, %r10
	movq	%r9, %rdi
	movq	%r10, %rsi
	movb	%al, -953(%rbp)         ## 1-byte Spill
	movq	%rcx, -968(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -800(%rbp)
	movsd	%xmm1, -792(%rbp)
	movq	-800(%rbp), %rcx
	movq	-792(%rbp), %rsi
	movq	%rsi, -120(%rbp)
	movq	%rcx, -128(%rbp)
	leaq	-96(%rbp), %rcx
	movl	-780(%rbp), %edx
	movl	-776(%rbp), %r11d
	movl	%edx, %ebx
	addl	%r11d, %ebx
	movl	%ebx, %esi
	movq	-752(%rbp), %rdi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movl	-756(%rbp), %r11d
	imull	%r11d, %edx
	movl	%edx, %esi
	leal	(%rsi,%rsi,2), %edx
	movl	%edx, %esi
	movq	-768(%rbp), %r8
	shlq	$4, %rsi
	addq	%rsi, %r8
	movq	%r8, %rsi
	movq	%rcx, -976(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -816(%rbp)
	movsd	%xmm1, -808(%rbp)
	movq	-816(%rbp), %rcx
	movq	-808(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	%rcx, -96(%rbp)
	leaq	-128(%rbp), %rcx
	movq	%rcx, -184(%rbp)
	movq	-976(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -192(%rbp)
	movq	-184(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	8(%rcx), %rcx
	movq	%rcx, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	-192(%rbp), %rcx
	leaq	-176(%rbp), %rsi
	movq	%rsi, -152(%rbp)
	movq	%rcx, -160(%rbp)
	movq	-152(%rbp), %rsi
	movq	%rcx, -144(%rbp)
	movsd	(%rcx), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-160(%rbp), %rcx
	movq	%rcx, -136(%rbp)
	movsd	8(%rcx), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-176(%rbp), %xmm0
	movsd	-168(%rbp), %xmm1
	movsd	%xmm0, -832(%rbp)
	movsd	%xmm1, -824(%rbp)
	movq	-832(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	-824(%rbp), %rcx
	movq	%rcx, -72(%rbp)
	movq	-968(%rbp), %rcx        ## 8-byte Reload
	addq	$64, %rcx
	movb	-953(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	movq	%rcx, -984(%rbp)        ## 8-byte Spill
	jne	LBB154_5
	jmp	LBB154_6
LBB154_5:                               ##   in Loop: Header=BB154_3 Depth=1
	leaq	-848(%rbp), %rax
	leaq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$32, %rdx
	movq	%rdx, -200(%rbp)
	movq	-200(%rbp), %rdx
	movsd	8(%rdx), %xmm0
	movq	%rcx, -208(%rbp)
	movq	-208(%rbp), %rdx
	subsd	8(%rdx), %xmm0
	movq	%rcx, -216(%rbp)
	movq	-216(%rbp), %rdx
	movsd	(%rdx), %xmm1
	addq	$32, %rcx
	movq	%rcx, -224(%rbp)
	movq	-224(%rbp), %rcx
	subsd	(%rcx), %xmm1
	movq	%rax, -256(%rbp)
	movsd	%xmm0, -264(%rbp)
	movsd	%xmm1, -272(%rbp)
	movq	-256(%rbp), %rax
	movsd	-264(%rbp), %xmm0
	movsd	-272(%rbp), %xmm1
	movq	%rax, -232(%rbp)
	movsd	%xmm0, -240(%rbp)
	movsd	%xmm1, -248(%rbp)
	movq	-232(%rbp), %rax
	movsd	-240(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-248(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
	jmp	LBB154_7
LBB154_6:                               ##   in Loop: Header=BB154_3 Depth=1
	leaq	-848(%rbp), %rax
	leaq	-128(%rbp), %rcx
	movq	%rcx, -280(%rbp)
	movq	-280(%rbp), %rdx
	movsd	8(%rdx), %xmm0
	movq	%rcx, %rdx
	addq	$32, %rdx
	movq	%rdx, -288(%rbp)
	movq	-288(%rbp), %rdx
	subsd	8(%rdx), %xmm0
	movq	%rcx, %rdx
	addq	$32, %rdx
	movq	%rdx, -296(%rbp)
	movq	-296(%rbp), %rdx
	movsd	(%rdx), %xmm1
	movq	%rcx, -304(%rbp)
	movq	-304(%rbp), %rcx
	subsd	(%rcx), %xmm1
	movq	%rax, -336(%rbp)
	movsd	%xmm0, -344(%rbp)
	movsd	%xmm1, -352(%rbp)
	movq	-336(%rbp), %rax
	movsd	-344(%rbp), %xmm0
	movsd	-352(%rbp), %xmm1
	movq	%rax, -312(%rbp)
	movsd	%xmm0, -320(%rbp)
	movsd	%xmm1, -328(%rbp)
	movq	-312(%rbp), %rax
	movsd	-320(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-328(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
LBB154_7:                               ##   in Loop: Header=BB154_3 Depth=1
	movq	-848(%rbp), %rax
	movq	-840(%rbp), %rcx
	movq	-984(%rbp), %rdx        ## 8-byte Reload
	movq	%rcx, 8(%rdx)
	movq	%rax, (%rdx)
	leaq	-112(%rbp), %rax
	movl	-780(%rbp), %esi
	movl	-772(%rbp), %edi
	movl	%esi, %r8d
	addl	%edi, %r8d
	movl	%r8d, %ecx
	movq	-752(%rbp), %r9
	shlq	$4, %rcx
	addq	%rcx, %r9
	movl	-756(%rbp), %edi
	imull	%edi, %esi
	addl	%esi, %esi
	movl	%esi, %ecx
	movq	-768(%rbp), %r10
	shlq	$4, %rcx
	addq	%rcx, %r10
	movq	%r9, %rdi
	movq	%r10, %rsi
	movq	%rax, -992(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -864(%rbp)
	movsd	%xmm1, -856(%rbp)
	movq	-864(%rbp), %rax
	movq	-856(%rbp), %rcx
	movq	%rcx, -104(%rbp)
	movq	%rax, -112(%rbp)
	leaq	-48(%rbp), %rax
	movl	-780(%rbp), %r8d
	movl	%r8d, %ecx
	movq	-752(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	%rdx, -424(%rbp)
	movq	-992(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -432(%rbp)
	movq	-424(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	8(%rdx), %rdx
	movq	%rdx, -408(%rbp)
	movq	%rsi, -416(%rbp)
	movq	-432(%rbp), %rdx
	leaq	-416(%rbp), %rsi
	movq	%rsi, -392(%rbp)
	movq	%rdx, -400(%rbp)
	movq	-392(%rbp), %rsi
	movq	%rdx, -384(%rbp)
	movsd	(%rdx), %xmm0
	movsd	(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-400(%rbp), %rdx
	movq	%rdx, -376(%rbp)
	movsd	8(%rdx), %xmm0
	movsd	8(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-416(%rbp), %xmm0
	movsd	-408(%rbp), %xmm1
	movsd	%xmm0, -880(%rbp)
	movsd	%xmm1, -872(%rbp)
	movq	-880(%rbp), %rdx
	movq	-872(%rbp), %rsi
	movq	%rsi, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movl	-780(%rbp), %r8d
	movl	%r8d, %edx
	movq	-752(%rbp), %rsi
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movq	%rsi, -456(%rbp)
	movq	%rcx, -464(%rbp)
	movq	-456(%rbp), %rdx
	movq	%rcx, -448(%rbp)
	movsd	-112(%rbp), %xmm0
	movsd	(%rdx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdx)
	movq	-464(%rbp), %rsi
	movq	%rsi, -440(%rbp)
	movsd	8(%rsi), %xmm0
	movsd	8(%rdx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rdx)
	movl	-780(%rbp), %r8d
	movl	%r8d, %edx
	movl	%edx, %r8d
	movl	-772(%rbp), %r11d
	addl	%r11d, %r8d
	movl	%r8d, %esi
	movq	-752(%rbp), %rdi
	shlq	$4, %rsi
	shlq	$4, %rdx
	movq	%rdi, %r9
	addq	%rdx, %r9
	leaq	-80(%rbp), %rdx
	movq	%r9, -520(%rbp)
	movq	%rdx, -528(%rbp)
	movq	-520(%rbp), %r9
	movq	(%r9), %r10
	movq	8(%r9), %r9
	movq	%r9, -504(%rbp)
	movq	%r10, -512(%rbp)
	movq	-528(%rbp), %r9
	leaq	-512(%rbp), %r10
	movq	%r10, -488(%rbp)
	movq	%r9, -496(%rbp)
	movq	-488(%rbp), %r10
	movq	%r9, -480(%rbp)
	movsd	(%r9), %xmm0
	movsd	(%r10), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r10)
	movq	-496(%rbp), %r9
	movq	%r9, -472(%rbp)
	movsd	8(%r9), %xmm0
	movsd	8(%r10), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r10)
	movsd	-512(%rbp), %xmm0
	movsd	-504(%rbp), %xmm1
	movsd	%xmm0, -896(%rbp)
	movsd	%xmm1, -888(%rbp)
	movq	-896(%rbp), %r9
	movq	-888(%rbp), %r10
	movq	%r10, 8(%rdi,%rsi)
	movq	%r9, (%rdi,%rsi)
	movl	-780(%rbp), %r8d
	movl	%r8d, %esi
	movq	-752(%rbp), %rdi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movq	%rdi, -552(%rbp)
	movq	%rdx, -560(%rbp)
	movq	-552(%rbp), %rsi
	movq	%rdx, -544(%rbp)
	movsd	-80(%rbp), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-560(%rbp), %rdx
	movq	%rdx, -536(%rbp)
	movsd	8(%rdx), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movl	-780(%rbp), %r8d
	movl	-760(%rbp), %r11d
	addl	%r11d, %r8d
	movl	%r8d, %edx
	movq	-752(%rbp), %rsi
	shlq	$4, %rdx
	leaq	-64(%rbp), %rdi
	movq	%rax, -616(%rbp)
	movq	%rdi, -624(%rbp)
	movq	-616(%rbp), %r9
	movq	(%r9), %r10
	movq	8(%r9), %r9
	movq	%r9, -600(%rbp)
	movq	%r10, -608(%rbp)
	movq	-624(%rbp), %r9
	leaq	-608(%rbp), %r10
	movq	%r10, -584(%rbp)
	movq	%r9, -592(%rbp)
	movq	-584(%rbp), %r10
	movq	%r9, -576(%rbp)
	movsd	(%r9), %xmm0
	movsd	(%r10), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r10)
	movq	-592(%rbp), %r9
	movq	%r9, -568(%rbp)
	movsd	8(%r9), %xmm0
	movsd	8(%r10), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r10)
	movsd	-608(%rbp), %xmm0
	movsd	-600(%rbp), %xmm1
	movsd	%xmm0, -912(%rbp)
	movsd	%xmm1, -904(%rbp)
	movq	-912(%rbp), %r9
	movq	-904(%rbp), %r10
	movq	%r10, 8(%rsi,%rdx)
	movq	%r9, (%rsi,%rdx)
	movl	-780(%rbp), %r8d
	movl	-776(%rbp), %r11d
	addl	%r11d, %r8d
	movl	%r8d, %edx
	movq	-752(%rbp), %rsi
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movq	%rax, -680(%rbp)
	movq	%rdi, -688(%rbp)
	movq	-680(%rbp), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	movq	%rax, -664(%rbp)
	movq	%rdx, -672(%rbp)
	movq	-688(%rbp), %rax
	leaq	-672(%rbp), %rdx
	movq	%rdx, -648(%rbp)
	movq	%rax, -656(%rbp)
	movq	-648(%rbp), %rdx
	movq	%rax, -640(%rbp)
	movsd	(%rax), %xmm0
	movsd	(%rdx), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdx)
	movq	-656(%rbp), %rax
	movq	%rax, -632(%rbp)
	movsd	8(%rax), %xmm0
	movsd	8(%rdx), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rdx)
	movsd	-672(%rbp), %xmm0
	movsd	-664(%rbp), %xmm1
	movsd	%xmm0, -928(%rbp)
	movsd	%xmm1, -920(%rbp)
	movq	-928(%rbp), %rax
	movq	%rax, (%rsi)
	movq	-920(%rbp), %rax
	movq	%rax, 8(%rsi)
## BB#8:                                ##   in Loop: Header=BB154_3 Depth=1
	movl	-780(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -780(%rbp)
	jmp	LBB154_3
LBB154_9:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	LBB154_11
## BB#10:                               ## %SP_return
	addq	$984, %rsp              ## imm = 0x3D8
	popq	%rbx
	popq	%rbp
	retq
LBB154_11:                              ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__TEXT,__literal16,16byte_literals
	.align	4
LCPI155_0:
	.quad	-9223372036854775808    ## double -0.000000e+00
	.quad	-9223372036854775808    ## double -0.000000e+00
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_5EPS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_5EPS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_5EPS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_5EPS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp699:
	.cfi_def_cfa_offset 16
Ltmp700:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp701:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1800, %rsp             ## imm = 0x708
Ltmp702:
	.cfi_offset %rbx, -56
Ltmp703:
	.cfi_offset %r12, -48
Ltmp704:
	.cfi_offset %r13, -40
Ltmp705:
	.cfi_offset %r14, -32
Ltmp706:
	.cfi_offset %r15, -24
	leaq	-256(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -48(%rbp)
	movq	%rdi, -1384(%rbp)
	movq	%rsi, -1392(%rbp)
	movl	%edx, -1396(%rbp)
	movl	%ecx, -1400(%rbp)
	movq	-1384(%rbp), %rsi
	movq	%rax, %rdi
	addq	$208, %rdi
	movq	%rdi, -1784(%rbp)       ## 8-byte Spill
	movq	%rsi, -1792(%rbp)       ## 8-byte Spill
	movq	%rax, -1800(%rbp)       ## 8-byte Spill
LBB155_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-1800(%rbp), %rax       ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -1360(%rbp)
	movsd	%xmm0, -1368(%rbp)
	movsd	%xmm0, -1376(%rbp)
	movq	-1360(%rbp), %rcx
	movsd	-1368(%rbp), %xmm0
	movsd	-1376(%rbp), %xmm1
	movq	%rcx, -1336(%rbp)
	movsd	%xmm0, -1344(%rbp)
	movsd	%xmm1, -1352(%rbp)
	movq	-1336(%rbp), %rcx
	movsd	-1344(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-1352(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-1784(%rbp), %rcx       ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -1800(%rbp)       ## 8-byte Spill
	jne	LBB155_1
## BB#2:
	movq	-1792(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -304(%rbp)
	movq	-304(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -1408(%rbp)
	movl	-1396(%rbp), %ecx
	shll	$0, %ecx
	imull	-1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-1408(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -288(%rbp)
	movq	-288(%rbp), %rax
	movsd	(%rax), %xmm0
	movsd	%xmm0, -1416(%rbp)
	movl	-1396(%rbp), %ecx
	shll	$0, %ecx
	imull	-1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-1408(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -280(%rbp)
	movq	-280(%rbp), %rax
	movsd	8(%rax), %xmm0
	movsd	%xmm0, -1424(%rbp)
	movl	-1396(%rbp), %ecx
	shll	$1, %ecx
	imull	-1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-1408(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -272(%rbp)
	movq	-272(%rbp), %rax
	movsd	(%rax), %xmm0
	movsd	%xmm0, -1432(%rbp)
	movl	-1396(%rbp), %ecx
	shll	$1, %ecx
	imull	-1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-1408(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -264(%rbp)
	movq	-264(%rbp), %rax
	movsd	8(%rax), %xmm0
	movsd	%xmm0, -1440(%rbp)
	movq	-1392(%rbp), %rax
	movq	%rax, -1448(%rbp)
	movq	-1392(%rbp), %rax
	movl	-1400(%rbp), %ecx
	shll	$0, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1456(%rbp)
	movq	-1392(%rbp), %rax
	movl	-1400(%rbp), %ecx
	shll	$1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1464(%rbp)
	movq	-1392(%rbp), %rax
	imull	$3, -1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1472(%rbp)
	movq	-1392(%rbp), %rax
	movl	-1400(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1480(%rbp)
	movl	$0, -1484(%rbp)
LBB155_3:                               ## =>This Inner Loop Header: Depth=1
	movl	-1484(%rbp), %eax
	cmpl	-1400(%rbp), %eax
	jae	LBB155_6
## BB#4:                                ##   in Loop: Header=BB155_3 Depth=1
	movq	-1448(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	%rcx, -256(%rbp)
	leaq	-240(%rbp), %rax
	movq	-1456(%rbp), %rdi
	movl	-1396(%rbp), %edx
	movl	-1484(%rbp), %esi
	imull	%esi, %edx
	movl	%edx, %ecx
	movq	-1408(%rbp), %r8
	shlq	$4, %rcx
	addq	%rcx, %r8
	movq	%r8, %rsi
	movq	%rax, -1808(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -1504(%rbp)
	movsd	%xmm1, -1496(%rbp)
	movq	-1504(%rbp), %rax
	movq	-1496(%rbp), %rcx
	movq	%rcx, -232(%rbp)
	movq	%rax, -240(%rbp)
	leaq	-224(%rbp), %rax
	movq	-1464(%rbp), %rdi
	movl	-1396(%rbp), %edx
	movl	-1484(%rbp), %r9d
	imull	%r9d, %edx
	addl	%edx, %edx
	movl	%edx, %ecx
	movq	-1408(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movq	%rax, -1816(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -1520(%rbp)
	movsd	%xmm1, -1512(%rbp)
	movq	-1520(%rbp), %rax
	movq	-1512(%rbp), %rcx
	movq	%rcx, -216(%rbp)
	movq	%rax, -224(%rbp)
	leaq	-208(%rbp), %rax
	movq	-1472(%rbp), %rdi
	movl	-1396(%rbp), %edx
	movl	-1484(%rbp), %r9d
	imull	%r9d, %edx
	movl	%edx, %ecx
	leal	(%rcx,%rcx,2), %edx
	movl	%edx, %ecx
	movq	-1408(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movq	%rax, -1824(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -1536(%rbp)
	movsd	%xmm1, -1528(%rbp)
	movq	-1536(%rbp), %rax
	movq	-1528(%rbp), %rcx
	movq	%rcx, -200(%rbp)
	movq	%rax, -208(%rbp)
	leaq	-192(%rbp), %rax
	movq	-1480(%rbp), %rdi
	movl	-1396(%rbp), %edx
	movl	-1484(%rbp), %r9d
	imull	%r9d, %edx
	shll	$2, %edx
	movl	%edx, %ecx
	movq	-1408(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movq	%rax, -1832(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -1552(%rbp)
	movsd	%xmm1, -1544(%rbp)
	movq	-1552(%rbp), %rax
	movq	-1544(%rbp), %rcx
	movq	%rcx, -184(%rbp)
	movq	%rax, -192(%rbp)
	leaq	-144(%rbp), %rax
	movq	-1808(%rbp), %rcx       ## 8-byte Reload
	movq	%rcx, -360(%rbp)
	movq	-1832(%rbp), %rsi       ## 8-byte Reload
	movq	%rsi, -368(%rbp)
	movq	-360(%rbp), %rdi
	movq	(%rdi), %r8
	movq	8(%rdi), %rdi
	movq	%rdi, -344(%rbp)
	movq	%r8, -352(%rbp)
	movq	-368(%rbp), %rdi
	leaq	-352(%rbp), %r8
	movq	%r8, -328(%rbp)
	movq	%rdi, -336(%rbp)
	movq	-328(%rbp), %r8
	movq	%rdi, -320(%rbp)
	movsd	(%rdi), %xmm0
	movsd	(%r8), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r8)
	movq	-336(%rbp), %rdi
	movq	%rdi, -312(%rbp)
	movsd	8(%rdi), %xmm0
	movsd	8(%r8), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r8)
	movsd	-352(%rbp), %xmm0
	movsd	-344(%rbp), %xmm1
	movsd	%xmm0, -1568(%rbp)
	movsd	%xmm1, -1560(%rbp)
	movq	-1568(%rbp), %rdi
	movq	-1560(%rbp), %r8
	movq	%r8, -136(%rbp)
	movq	%rdi, -144(%rbp)
	leaq	-128(%rbp), %rdi
	movq	-1816(%rbp), %r8        ## 8-byte Reload
	movq	%r8, -424(%rbp)
	movq	-1824(%rbp), %r10       ## 8-byte Reload
	movq	%r10, -432(%rbp)
	movq	-424(%rbp), %r11
	movq	(%r11), %rbx
	movq	8(%r11), %r11
	movq	%r11, -408(%rbp)
	movq	%rbx, -416(%rbp)
	movq	-432(%rbp), %r11
	leaq	-416(%rbp), %rbx
	movq	%rbx, -392(%rbp)
	movq	%r11, -400(%rbp)
	movq	-392(%rbp), %rbx
	movq	%r11, -384(%rbp)
	movsd	(%r11), %xmm0
	movsd	(%rbx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rbx)
	movq	-400(%rbp), %r11
	movq	%r11, -376(%rbp)
	movsd	8(%r11), %xmm0
	movsd	8(%rbx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rbx)
	movsd	-416(%rbp), %xmm0
	movsd	-408(%rbp), %xmm1
	movsd	%xmm0, -1584(%rbp)
	movsd	%xmm1, -1576(%rbp)
	movq	-1584(%rbp), %r11
	movq	-1576(%rbp), %rbx
	movq	%rbx, -120(%rbp)
	movq	%r11, -128(%rbp)
	leaq	-112(%rbp), %r11
	movq	%r8, -488(%rbp)
	movq	%r10, -496(%rbp)
	movq	-488(%rbp), %rbx
	movq	(%rbx), %r14
	movq	8(%rbx), %rbx
	movq	%rbx, -472(%rbp)
	movq	%r14, -480(%rbp)
	movq	-496(%rbp), %rbx
	leaq	-480(%rbp), %r14
	movq	%r14, -456(%rbp)
	movq	%rbx, -464(%rbp)
	movq	-456(%rbp), %r14
	movq	%rbx, -448(%rbp)
	movsd	(%rbx), %xmm0
	movsd	(%r14), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r14)
	movq	-464(%rbp), %rbx
	movq	%rbx, -440(%rbp)
	movsd	8(%rbx), %xmm0
	movsd	8(%r14), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r14)
	movsd	-480(%rbp), %xmm0
	movsd	-472(%rbp), %xmm1
	movsd	%xmm0, -1600(%rbp)
	movsd	%xmm1, -1592(%rbp)
	movq	-1600(%rbp), %rbx
	movq	-1592(%rbp), %r14
	movq	%r14, -104(%rbp)
	movq	%rbx, -112(%rbp)
	leaq	-96(%rbp), %rbx
	movq	%rcx, -552(%rbp)
	movq	%rsi, -560(%rbp)
	movq	-552(%rbp), %r14
	movq	(%r14), %r15
	movq	8(%r14), %r14
	movq	%r14, -536(%rbp)
	movq	%r15, -544(%rbp)
	movq	-560(%rbp), %r14
	leaq	-544(%rbp), %r15
	movq	%r15, -520(%rbp)
	movq	%r14, -528(%rbp)
	movq	-520(%rbp), %r15
	movq	%r14, -512(%rbp)
	movsd	(%r14), %xmm0
	movsd	(%r15), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r15)
	movq	-528(%rbp), %r14
	movq	%r14, -504(%rbp)
	movsd	8(%r14), %xmm0
	movsd	8(%r15), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r15)
	movsd	-544(%rbp), %xmm0
	movsd	-536(%rbp), %xmm1
	movsd	%xmm0, -1616(%rbp)
	movsd	%xmm1, -1608(%rbp)
	movq	-1616(%rbp), %r14
	movq	-1608(%rbp), %r15
	movq	%r15, -88(%rbp)
	movq	%r14, -96(%rbp)
	movq	-1448(%rbp), %r14
	movq	%r14, -584(%rbp)
	movq	%rax, -592(%rbp)
	movq	-584(%rbp), %r14
	movq	%rax, -576(%rbp)
	movsd	-144(%rbp), %xmm0
	movsd	(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r14)
	movq	-592(%rbp), %r15
	movq	%r15, -568(%rbp)
	movsd	8(%r15), %xmm0
	movsd	8(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r14)
	movq	-1448(%rbp), %r14
	movq	%r14, -616(%rbp)
	movq	%rdi, -624(%rbp)
	movq	-616(%rbp), %r14
	movq	%rdi, -608(%rbp)
	movsd	-128(%rbp), %xmm0
	movsd	(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r14)
	movq	-624(%rbp), %r15
	movq	%r15, -600(%rbp)
	movsd	8(%r15), %xmm0
	movsd	8(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r14)
	leaq	-176(%rbp), %r14
	movq	%rax, -632(%rbp)
	movsd	-144(%rbp), %xmm0
	movsd	-1416(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movq	%rdi, -640(%rbp)
	movsd	-128(%rbp), %xmm1
	movsd	-1432(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movq	%rax, -648(%rbp)
	movsd	-136(%rbp), %xmm1
	movsd	-1416(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	movq	%rdi, -656(%rbp)
	movsd	-120(%rbp), %xmm2
	movsd	-1432(%rbp), %xmm3
	mulsd	%xmm3, %xmm2
	addsd	%xmm2, %xmm1
	leaq	-1648(%rbp), %r15
	movq	%r15, -688(%rbp)
	movsd	%xmm0, -696(%rbp)
	movsd	%xmm1, -704(%rbp)
	movq	-688(%rbp), %r12
	movsd	-696(%rbp), %xmm0
	movq	%r12, -664(%rbp)
	movsd	%xmm0, -672(%rbp)
	movsd	%xmm1, -680(%rbp)
	movq	-664(%rbp), %r12
	movsd	-672(%rbp), %xmm0
	movsd	%xmm0, (%r12)
	movsd	-680(%rbp), %xmm0
	movsd	%xmm0, 8(%r12)
	leaq	-256(%rbp), %r12
	movq	%r12, -760(%rbp)
	movq	%r15, -768(%rbp)
	movq	-760(%rbp), %r15
	movq	(%r15), %r13
	movq	8(%r15), %r15
	movq	%r15, -744(%rbp)
	movq	%r13, -752(%rbp)
	movq	-768(%rbp), %r15
	leaq	-752(%rbp), %r13
	movq	%r13, -728(%rbp)
	movq	%r15, -736(%rbp)
	movq	-728(%rbp), %r13
	movq	%r15, -720(%rbp)
	movsd	(%r15), %xmm0
	movsd	(%r13), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r13)
	movq	-736(%rbp), %r15
	movq	%r15, -712(%rbp)
	movsd	8(%r15), %xmm0
	movsd	8(%r13), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r13)
	movsd	-752(%rbp), %xmm0
	movsd	-744(%rbp), %xmm1
	movsd	%xmm0, -1632(%rbp)
	movsd	%xmm1, -1624(%rbp)
	movq	-1632(%rbp), %r15
	movq	-1624(%rbp), %r13
	movq	%r13, -168(%rbp)
	movq	%r15, -176(%rbp)
	leaq	-160(%rbp), %r15
	movq	%rbx, -776(%rbp)
	movsd	-88(%rbp), %xmm0
	movsd	-1424(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movq	%r11, -784(%rbp)
	movsd	-104(%rbp), %xmm1
	movsd	-1440(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movq	%rbx, -792(%rbp)
	movsd	-96(%rbp), %xmm1
	movsd	-1424(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	movsd	LCPI155_0(%rip), %xmm2
	xorpd	%xmm2, %xmm1
	movq	%r11, -800(%rbp)
	movsd	-112(%rbp), %xmm2
	movsd	-1440(%rbp), %xmm3
	mulsd	%xmm3, %xmm2
	subsd	%xmm2, %xmm1
	leaq	-1664(%rbp), %r13
	movq	%r13, -832(%rbp)
	movsd	%xmm0, -840(%rbp)
	movsd	%xmm1, -848(%rbp)
	movq	-832(%rbp), %r13
	movsd	-840(%rbp), %xmm0
	movq	%r13, -808(%rbp)
	movsd	%xmm0, -816(%rbp)
	movsd	%xmm1, -824(%rbp)
	movq	-808(%rbp), %r13
	movsd	-816(%rbp), %xmm0
	movsd	%xmm0, (%r13)
	movsd	-824(%rbp), %xmm0
	movsd	%xmm0, 8(%r13)
	movq	-1664(%rbp), %r13
	movq	-1656(%rbp), %rcx
	movq	%rcx, -152(%rbp)
	movq	%r13, -160(%rbp)
	movq	-1456(%rbp), %rcx
	movq	%r14, -904(%rbp)
	movq	%r15, -912(%rbp)
	movq	-904(%rbp), %r13
	movq	(%r13), %rsi
	movq	8(%r13), %r13
	movq	%r13, -888(%rbp)
	movq	%rsi, -896(%rbp)
	movq	-912(%rbp), %rsi
	leaq	-896(%rbp), %r13
	movq	%r13, -872(%rbp)
	movq	%rsi, -880(%rbp)
	movq	-872(%rbp), %r13
	movq	%rsi, -864(%rbp)
	movsd	(%rsi), %xmm0
	movsd	(%r13), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r13)
	movq	-880(%rbp), %rsi
	movq	%rsi, -856(%rbp)
	movsd	8(%rsi), %xmm0
	movsd	8(%r13), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r13)
	movsd	-896(%rbp), %xmm0
	movsd	-888(%rbp), %xmm1
	movsd	%xmm0, -1680(%rbp)
	movsd	%xmm1, -1672(%rbp)
	movq	-1680(%rbp), %rsi
	movq	-1672(%rbp), %r13
	movq	%r13, 8(%rcx)
	movq	%rsi, (%rcx)
	movq	-1480(%rbp), %rcx
	movq	%r14, -968(%rbp)
	movq	%r15, -976(%rbp)
	movq	-968(%rbp), %rsi
	movq	(%rsi), %r14
	movq	8(%rsi), %rsi
	movq	%rsi, -952(%rbp)
	movq	%r14, -960(%rbp)
	movq	-976(%rbp), %rsi
	leaq	-960(%rbp), %r14
	movq	%r14, -936(%rbp)
	movq	%rsi, -944(%rbp)
	movq	-936(%rbp), %r14
	movq	%rsi, -928(%rbp)
	movsd	(%rsi), %xmm0
	movsd	(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r14)
	movq	-944(%rbp), %rsi
	movq	%rsi, -920(%rbp)
	movsd	8(%rsi), %xmm0
	movsd	8(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r14)
	movsd	-960(%rbp), %xmm0
	movsd	-952(%rbp), %xmm1
	movsd	%xmm0, -1696(%rbp)
	movsd	%xmm1, -1688(%rbp)
	movq	-1696(%rbp), %rsi
	movq	-1688(%rbp), %r14
	movq	%r14, 8(%rcx)
	movq	%rsi, (%rcx)
	leaq	-80(%rbp), %rcx
	movq	%rax, -984(%rbp)
	movsd	-144(%rbp), %xmm0
	movsd	-1432(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movq	%rdi, -992(%rbp)
	movsd	-128(%rbp), %xmm1
	movsd	-1416(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movq	%rax, -1000(%rbp)
	movsd	-136(%rbp), %xmm1
	movsd	-1432(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	movq	%rdi, -1008(%rbp)
	movsd	-120(%rbp), %xmm2
	movsd	-1416(%rbp), %xmm3
	mulsd	%xmm3, %xmm2
	addsd	%xmm2, %xmm1
	leaq	-1728(%rbp), %rax
	movq	%rax, -1040(%rbp)
	movsd	%xmm0, -1048(%rbp)
	movsd	%xmm1, -1056(%rbp)
	movq	-1040(%rbp), %rsi
	movsd	-1048(%rbp), %xmm0
	movq	%rsi, -1016(%rbp)
	movsd	%xmm0, -1024(%rbp)
	movsd	%xmm1, -1032(%rbp)
	movq	-1016(%rbp), %rsi
	movsd	-1024(%rbp), %xmm0
	movsd	%xmm0, (%rsi)
	movsd	-1032(%rbp), %xmm0
	movsd	%xmm0, 8(%rsi)
	movq	%r12, -1112(%rbp)
	movq	%rax, -1120(%rbp)
	movq	-1112(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	%rax, -1096(%rbp)
	movq	%rsi, -1104(%rbp)
	movq	-1120(%rbp), %rax
	leaq	-1104(%rbp), %rsi
	movq	%rsi, -1080(%rbp)
	movq	%rax, -1088(%rbp)
	movq	-1080(%rbp), %rsi
	movq	%rax, -1072(%rbp)
	movsd	(%rax), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-1088(%rbp), %rax
	movq	%rax, -1064(%rbp)
	movsd	8(%rax), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-1104(%rbp), %xmm0
	movsd	-1096(%rbp), %xmm1
	movsd	%xmm0, -1712(%rbp)
	movsd	%xmm1, -1704(%rbp)
	movq	-1712(%rbp), %rax
	movq	-1704(%rbp), %rsi
	movq	%rsi, -72(%rbp)
	movq	%rax, -80(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rbx, -1128(%rbp)
	movsd	-88(%rbp), %xmm0
	movsd	-1440(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movq	%r11, -1136(%rbp)
	movsd	-104(%rbp), %xmm1
	movsd	-1424(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	subsd	%xmm0, %xmm1
	movq	%rbx, -1144(%rbp)
	movsd	-96(%rbp), %xmm0
	movsd	-1440(%rbp), %xmm2
	mulsd	%xmm2, %xmm0
	movq	%r11, -1152(%rbp)
	movsd	-112(%rbp), %xmm2
	movsd	-1424(%rbp), %xmm3
	mulsd	%xmm3, %xmm2
	subsd	%xmm2, %xmm0
	leaq	-1744(%rbp), %rsi
	movq	%rsi, -1184(%rbp)
	movsd	%xmm1, -1192(%rbp)
	movsd	%xmm0, -1200(%rbp)
	movq	-1184(%rbp), %rsi
	movsd	-1192(%rbp), %xmm1
	movq	%rsi, -1160(%rbp)
	movsd	%xmm1, -1168(%rbp)
	movsd	%xmm0, -1176(%rbp)
	movq	-1160(%rbp), %rsi
	movsd	-1168(%rbp), %xmm0
	movsd	%xmm0, (%rsi)
	movsd	-1176(%rbp), %xmm0
	movsd	%xmm0, 8(%rsi)
	movq	-1744(%rbp), %rsi
	movq	-1736(%rbp), %rdi
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-1464(%rbp), %rsi
	movq	%rcx, -1256(%rbp)
	movq	%rax, -1264(%rbp)
	movq	-1256(%rbp), %rdi
	movq	(%rdi), %r11
	movq	8(%rdi), %rdi
	movq	%rdi, -1240(%rbp)
	movq	%r11, -1248(%rbp)
	movq	-1264(%rbp), %rdi
	leaq	-1248(%rbp), %r11
	movq	%r11, -1224(%rbp)
	movq	%rdi, -1232(%rbp)
	movq	-1224(%rbp), %r11
	movq	%rdi, -1216(%rbp)
	movsd	(%rdi), %xmm0
	movsd	(%r11), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r11)
	movq	-1232(%rbp), %rdi
	movq	%rdi, -1208(%rbp)
	movsd	8(%rdi), %xmm0
	movsd	8(%r11), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r11)
	movsd	-1248(%rbp), %xmm0
	movsd	-1240(%rbp), %xmm1
	movsd	%xmm0, -1760(%rbp)
	movsd	%xmm1, -1752(%rbp)
	movq	-1760(%rbp), %rdi
	movq	-1752(%rbp), %r11
	movq	%r11, 8(%rsi)
	movq	%rdi, (%rsi)
	movq	-1472(%rbp), %rsi
	movq	%rcx, -1320(%rbp)
	movq	%rax, -1328(%rbp)
	movq	-1320(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rax, -1304(%rbp)
	movq	%rcx, -1312(%rbp)
	movq	-1328(%rbp), %rax
	leaq	-1312(%rbp), %rcx
	movq	%rcx, -1288(%rbp)
	movq	%rax, -1296(%rbp)
	movq	-1288(%rbp), %rcx
	movq	%rax, -1280(%rbp)
	movsd	(%rax), %xmm0
	movsd	(%rcx), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx)
	movq	-1296(%rbp), %rax
	movq	%rax, -1272(%rbp)
	movsd	8(%rax), %xmm0
	movsd	8(%rcx), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rcx)
	movsd	-1312(%rbp), %xmm0
	movsd	-1304(%rbp), %xmm1
	movsd	%xmm0, -1776(%rbp)
	movsd	%xmm1, -1768(%rbp)
	movq	-1776(%rbp), %rax
	movq	%rax, (%rsi)
	movq	-1768(%rbp), %rax
	movq	%rax, 8(%rsi)
	movq	-1448(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1448(%rbp)
	movq	-1456(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1456(%rbp)
	movq	-1464(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1464(%rbp)
	movq	-1472(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1472(%rbp)
	movq	-1480(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1480(%rbp)
## BB#5:                                ##   in Loop: Header=BB155_3 Depth=1
	movl	-1484(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1484(%rbp)
	jmp	LBB155_3
LBB155_6:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB155_8
## BB#7:                                ## %SP_return
	addq	$1800, %rsp             ## imm = 0x708
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB155_8:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_NEPS3_jjj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_NEPS3_jjj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_NEPS3_jjj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE11butterfly_NEPS3_jjj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp707:
	.cfi_def_cfa_offset 16
Ltmp708:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp709:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -64(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -84(%rbp)
	movq	-64(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -48(%rbp)
	movq	-48(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	%rdi, -96(%rbp)
	movq	%rsi, %rdi
	addq	$496, %rdi              ## imm = 0x1F0
	movl	-84(%rbp), %ecx
	movq	%rsi, -152(%rbp)        ## 8-byte Spill
	movl	%ecx, %esi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEE12set_min_sizeEj
	movq	-152(%rbp), %rdi        ## 8-byte Reload
	addq	$496, %rdi              ## imm = 0x1F0
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	%rdi, -104(%rbp)
	movl	$0, -108(%rbp)
LBB156_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB156_3 Depth 2
                                        ##     Child Loop BB156_7 Depth 2
                                        ##       Child Loop BB156_9 Depth 3
	movl	-108(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jae	LBB156_18
## BB#2:                                ##   in Loop: Header=BB156_1 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -116(%rbp)
LBB156_3:                               ##   Parent Loop BB156_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-116(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jae	LBB156_6
## BB#4:                                ##   in Loop: Header=BB156_3 Depth=2
	movl	-116(%rbp), %eax
	movl	%eax, %ecx
	movq	-104(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	-112(%rbp), %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movq	(%rsi), %rcx
	movq	%rcx, (%rdx)
	movq	8(%rsi), %rcx
	movq	%rcx, 8(%rdx)
	movl	-80(%rbp), %eax
	movl	-112(%rbp), %edi
	addl	%eax, %edi
	movl	%edi, -112(%rbp)
## BB#5:                                ##   in Loop: Header=BB156_3 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	LBB156_3
LBB156_6:                               ##   in Loop: Header=BB156_1 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -120(%rbp)
LBB156_7:                               ##   Parent Loop BB156_1 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB156_9 Depth 3
	movl	-120(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jae	LBB156_16
## BB#8:                                ##   in Loop: Header=BB156_7 Depth=2
	movl	-112(%rbp), %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	-104(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rsi, (%rdx)
	movq	8(%rcx), %rcx
	movq	%rcx, 8(%rdx)
	movl	$0, -124(%rbp)
	movl	$1, -128(%rbp)
LBB156_9:                               ##   Parent Loop BB156_1 Depth=1
                                        ##     Parent Loop BB156_7 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movl	-128(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jae	LBB156_14
## BB#10:                               ##   in Loop: Header=BB156_9 Depth=3
	movl	-76(%rbp), %eax
	imull	-112(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	-152(%rbp), %rdx        ## 8-byte Reload
	cmpl	(%rdx), %eax
	jb	LBB156_12
## BB#11:                               ##   in Loop: Header=BB156_9 Depth=3
	movq	-152(%rbp), %rax        ## 8-byte Reload
	movl	(%rax), %ecx
	movl	-124(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -124(%rbp)
LBB156_12:                              ##   in Loop: Header=BB156_9 Depth=3
	movl	-112(%rbp), %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	-128(%rbp), %eax
	movl	%eax, %ecx
	movq	-104(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	movq	-96(%rbp), %rdi
	shlq	$4, %rcx
	addq	%rcx, %rdi
	movq	%rdi, -160(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-160(%rbp), %rsi        ## 8-byte Reload
	movq	%rdx, -168(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	leaq	-144(%rbp), %rcx
	movsd	%xmm0, -144(%rbp)
	movsd	%xmm1, -136(%rbp)
	movq	-168(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movsd	(%rdx), %xmm0
	movsd	(%rcx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx)
	movq	-40(%rbp), %rdx
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdx
	movsd	8(%rdx), %xmm0
	movsd	8(%rcx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rcx)
## BB#13:                               ##   in Loop: Header=BB156_9 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	LBB156_9
LBB156_14:                              ##   in Loop: Header=BB156_7 Depth=2
	movl	-80(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
## BB#15:                               ##   in Loop: Header=BB156_7 Depth=2
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	LBB156_7
LBB156_16:                              ##   in Loop: Header=BB156_1 Depth=1
	jmp	LBB156_17
LBB156_17:                              ##   in Loop: Header=BB156_1 Depth=1
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	LBB156_1
LBB156_18:
	addq	$176, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayINSt3__17complexIdEEE12set_min_sizeEj
	.weak_def_can_be_hidden	__ZN4arma8podarrayINSt3__17complexIdEEE12set_min_sizeEj
	.align	4, 0x90
__ZN4arma8podarrayINSt3__17complexIdEEE12set_min_sizeEj: ## @_ZN4arma8podarrayINSt3__17complexIdEEE12set_min_sizeEj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp710:
	.cfi_def_cfa_offset 16
Ltmp711:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp712:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	cmpl	(%rdi), %esi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	jbe	LBB157_2
## BB#1:
	movl	-12(%rbp), %esi
	movq	-24(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN4arma8podarrayINSt3__17complexIdEEE9init_warmEj
LBB157_2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI158_0:
	.quad	9218868437227405312     ## double +Inf
LCPI158_4:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__literal16,16byte_literals
	.align	4
LCPI158_1:
	.quad	9223372036854775807     ## double nan
	.quad	9223372036854775807     ## double nan
LCPI158_2:
	.quad	-9223372036854775808    ## double -0.000000e+00
	.quad	0                       ## double 0.000000e+00
LCPI158_3:
	.quad	9223372036854775807     ## double nan
	.quad	0                       ## double 0.000000e+00
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	.weak_def_can_be_hidden	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	.align	4, 0x90
__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_: ## @_ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp713:
	.cfi_def_cfa_offset 16
Ltmp714:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp715:
	.cfi_def_cfa_register %rbp
	subq	$600, %rsp              ## imm = 0x258
	movq	%rdi, -632(%rbp)
	movq	%rsi, -640(%rbp)
	movq	-632(%rbp), %rsi
	movq	%rsi, -608(%rbp)
	movq	-608(%rbp), %rsi
	movsd	(%rsi), %xmm0
	movsd	%xmm0, -648(%rbp)
	movq	-632(%rbp), %rsi
	movq	%rsi, -432(%rbp)
	movq	-432(%rbp), %rsi
	movsd	8(%rsi), %xmm0
	movsd	%xmm0, -656(%rbp)
	movq	-640(%rbp), %rsi
	movq	%rsi, -400(%rbp)
	movq	-400(%rbp), %rsi
	movsd	(%rsi), %xmm0
	movsd	%xmm0, -664(%rbp)
	movq	-640(%rbp), %rsi
	movq	%rsi, -368(%rbp)
	movq	-368(%rbp), %rsi
	movsd	8(%rsi), %xmm0
	movsd	%xmm0, -672(%rbp)
	movsd	-648(%rbp), %xmm0
	mulsd	-664(%rbp), %xmm0
	movsd	%xmm0, -680(%rbp)
	movsd	-656(%rbp), %xmm0
	mulsd	-672(%rbp), %xmm0
	movsd	%xmm0, -688(%rbp)
	movsd	-648(%rbp), %xmm0
	mulsd	-672(%rbp), %xmm0
	movsd	%xmm0, -696(%rbp)
	movsd	-656(%rbp), %xmm0
	mulsd	-664(%rbp), %xmm0
	movsd	%xmm0, -704(%rbp)
	movsd	-680(%rbp), %xmm0
	subsd	-688(%rbp), %xmm0
	movsd	%xmm0, -712(%rbp)
	movsd	-696(%rbp), %xmm0
	addsd	-704(%rbp), %xmm0
	movsd	%xmm0, -720(%rbp)
	movsd	-712(%rbp), %xmm0
	movsd	%xmm0, -336(%rbp)
	movsd	-336(%rbp), %xmm0
	movsd	%xmm0, -328(%rbp)
	movsd	-328(%rbp), %xmm0
	movsd	%xmm0, -320(%rbp)
	movsd	-320(%rbp), %xmm0
	ucomisd	-320(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_1
	jmp	LBB158_33
LBB158_1:
	movsd	-720(%rbp), %xmm0
	movsd	%xmm0, -240(%rbp)
	movsd	-240(%rbp), %xmm0
	movsd	%xmm0, -232(%rbp)
	movsd	-232(%rbp), %xmm0
	movsd	%xmm0, -224(%rbp)
	movsd	-224(%rbp), %xmm0
	ucomisd	-224(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_2
	jmp	LBB158_33
LBB158_2:
	movsd	LCPI158_0(%rip), %xmm0
	movb	$0, -721(%rbp)
	movsd	-648(%rbp), %xmm1
	movsd	%xmm1, -192(%rbp)
	movsd	-192(%rbp), %xmm1
	movsd	%xmm1, -184(%rbp)
	movsd	-184(%rbp), %xmm1
	movsd	%xmm1, -176(%rbp)
	movsd	-176(%rbp), %xmm1
	movsd	LCPI158_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB158_4
## BB#3:
	movsd	LCPI158_0(%rip), %xmm0
	movsd	-656(%rbp), %xmm1
	movsd	%xmm1, -168(%rbp)
	movsd	-168(%rbp), %xmm1
	movsd	%xmm1, -160(%rbp)
	movsd	-160(%rbp), %xmm1
	movsd	%xmm1, -152(%rbp)
	movsd	-152(%rbp), %xmm1
	movsd	LCPI158_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB158_4
	jmp	LBB158_9
LBB158_4:
	movsd	LCPI158_4(%rip), %xmm0
	xorps	%xmm1, %xmm1
	movsd	LCPI158_0(%rip), %xmm2
	movsd	-648(%rbp), %xmm3
	movsd	%xmm3, -144(%rbp)
	movsd	-144(%rbp), %xmm3
	movsd	%xmm3, -136(%rbp)
	movsd	-136(%rbp), %xmm3
	movsd	%xmm3, -128(%rbp)
	movsd	-128(%rbp), %xmm3
	movsd	LCPI158_1(%rip), %xmm4
	andpd	%xmm4, %xmm3
	cmpeqsd	%xmm2, %xmm3
	movaps	%xmm3, %xmm4
	andpd	%xmm0, %xmm4
	andnpd	%xmm1, %xmm3
	orpd	%xmm4, %xmm3
	movsd	-648(%rbp), %xmm4
	movsd	LCPI158_2(%rip), %xmm5
	andpd	%xmm5, %xmm4
	movsd	LCPI158_3(%rip), %xmm5
	andpd	%xmm5, %xmm3
	orpd	%xmm4, %xmm3
	movsd	%xmm3, -648(%rbp)
	movsd	-656(%rbp), %xmm3
	movsd	%xmm3, -120(%rbp)
	movsd	-120(%rbp), %xmm3
	movsd	%xmm3, -112(%rbp)
	movsd	-112(%rbp), %xmm3
	movsd	%xmm3, -104(%rbp)
	movsd	-104(%rbp), %xmm3
	movsd	LCPI158_1(%rip), %xmm4
	andpd	%xmm4, %xmm3
	cmpeqsd	%xmm2, %xmm3
	movaps	%xmm3, %xmm2
	andpd	%xmm0, %xmm2
	andnpd	%xmm1, %xmm3
	orpd	%xmm2, %xmm3
	movsd	-656(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	LCPI158_3(%rip), %xmm1
	andpd	%xmm1, %xmm3
	orpd	%xmm0, %xmm3
	movsd	%xmm3, -656(%rbp)
	movsd	-664(%rbp), %xmm0
	movsd	%xmm0, -96(%rbp)
	movsd	-96(%rbp), %xmm0
	movsd	%xmm0, -88(%rbp)
	movsd	-88(%rbp), %xmm0
	movsd	%xmm0, -80(%rbp)
	movsd	-80(%rbp), %xmm0
	ucomisd	-80(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_5
	jmp	LBB158_6
LBB158_5:
	movsd	-664(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -664(%rbp)
LBB158_6:
	movsd	-672(%rbp), %xmm0
	movsd	%xmm0, -48(%rbp)
	movsd	-48(%rbp), %xmm0
	movsd	%xmm0, -40(%rbp)
	movsd	-40(%rbp), %xmm0
	movsd	%xmm0, -32(%rbp)
	movsd	-32(%rbp), %xmm0
	ucomisd	-32(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_7
	jmp	LBB158_8
LBB158_7:
	movsd	-672(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -672(%rbp)
LBB158_8:
	movb	$1, -721(%rbp)
LBB158_9:
	movsd	LCPI158_0(%rip), %xmm0
	movsd	-664(%rbp), %xmm1
	movsd	%xmm1, -24(%rbp)
	movsd	-24(%rbp), %xmm1
	movsd	%xmm1, -16(%rbp)
	movsd	-16(%rbp), %xmm1
	movsd	%xmm1, -8(%rbp)
	movsd	-8(%rbp), %xmm1
	movsd	LCPI158_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB158_11
## BB#10:
	movsd	LCPI158_0(%rip), %xmm0
	movsd	-672(%rbp), %xmm1
	movsd	%xmm1, -72(%rbp)
	movsd	-72(%rbp), %xmm1
	movsd	%xmm1, -64(%rbp)
	movsd	-64(%rbp), %xmm1
	movsd	%xmm1, -56(%rbp)
	movsd	-56(%rbp), %xmm1
	movsd	LCPI158_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB158_11
	jmp	LBB158_16
LBB158_11:
	movsd	LCPI158_4(%rip), %xmm0
	xorps	%xmm1, %xmm1
	movsd	LCPI158_0(%rip), %xmm2
	movsd	-664(%rbp), %xmm3
	movsd	%xmm3, -216(%rbp)
	movsd	-216(%rbp), %xmm3
	movsd	%xmm3, -208(%rbp)
	movsd	-208(%rbp), %xmm3
	movsd	%xmm3, -200(%rbp)
	movsd	-200(%rbp), %xmm3
	movsd	LCPI158_1(%rip), %xmm4
	andpd	%xmm4, %xmm3
	cmpeqsd	%xmm2, %xmm3
	movaps	%xmm3, %xmm4
	andpd	%xmm0, %xmm4
	andnpd	%xmm1, %xmm3
	orpd	%xmm4, %xmm3
	movsd	-664(%rbp), %xmm4
	movsd	LCPI158_2(%rip), %xmm5
	andpd	%xmm5, %xmm4
	movsd	LCPI158_3(%rip), %xmm5
	andpd	%xmm5, %xmm3
	orpd	%xmm4, %xmm3
	movsd	%xmm3, -664(%rbp)
	movsd	-672(%rbp), %xmm3
	movsd	%xmm3, -264(%rbp)
	movsd	-264(%rbp), %xmm3
	movsd	%xmm3, -256(%rbp)
	movsd	-256(%rbp), %xmm3
	movsd	%xmm3, -248(%rbp)
	movsd	-248(%rbp), %xmm3
	movsd	LCPI158_1(%rip), %xmm4
	andpd	%xmm4, %xmm3
	cmpeqsd	%xmm2, %xmm3
	movaps	%xmm3, %xmm2
	andpd	%xmm0, %xmm2
	andnpd	%xmm1, %xmm3
	orpd	%xmm2, %xmm3
	movsd	-672(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	LCPI158_3(%rip), %xmm1
	andpd	%xmm1, %xmm3
	orpd	%xmm0, %xmm3
	movsd	%xmm3, -672(%rbp)
	movsd	-648(%rbp), %xmm0
	movsd	%xmm0, -288(%rbp)
	movsd	-288(%rbp), %xmm0
	movsd	%xmm0, -280(%rbp)
	movsd	-280(%rbp), %xmm0
	movsd	%xmm0, -272(%rbp)
	movsd	-272(%rbp), %xmm0
	ucomisd	-272(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_12
	jmp	LBB158_13
LBB158_12:
	movsd	-648(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -648(%rbp)
LBB158_13:
	movsd	-656(%rbp), %xmm0
	movsd	%xmm0, -312(%rbp)
	movsd	-312(%rbp), %xmm0
	movsd	%xmm0, -304(%rbp)
	movsd	-304(%rbp), %xmm0
	movsd	%xmm0, -296(%rbp)
	movsd	-296(%rbp), %xmm0
	ucomisd	-296(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_14
	jmp	LBB158_15
LBB158_14:
	movsd	-656(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -656(%rbp)
LBB158_15:
	movb	$1, -721(%rbp)
LBB158_16:
	testb	$1, -721(%rbp)
	jne	LBB158_30
## BB#17:
	movsd	LCPI158_0(%rip), %xmm0
	movsd	-680(%rbp), %xmm1
	movsd	%xmm1, -360(%rbp)
	movsd	-360(%rbp), %xmm1
	movsd	%xmm1, -352(%rbp)
	movsd	-352(%rbp), %xmm1
	movsd	%xmm1, -344(%rbp)
	movsd	-344(%rbp), %xmm1
	movsd	LCPI158_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB158_21
## BB#18:
	movsd	LCPI158_0(%rip), %xmm0
	movsd	-688(%rbp), %xmm1
	movsd	%xmm1, -392(%rbp)
	movsd	-392(%rbp), %xmm1
	movsd	%xmm1, -384(%rbp)
	movsd	-384(%rbp), %xmm1
	movsd	%xmm1, -376(%rbp)
	movsd	-376(%rbp), %xmm1
	movsd	LCPI158_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB158_21
## BB#19:
	movsd	LCPI158_0(%rip), %xmm0
	movsd	-696(%rbp), %xmm1
	movsd	%xmm1, -424(%rbp)
	movsd	-424(%rbp), %xmm1
	movsd	%xmm1, -416(%rbp)
	movsd	-416(%rbp), %xmm1
	movsd	%xmm1, -408(%rbp)
	movsd	-408(%rbp), %xmm1
	movsd	LCPI158_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB158_21
## BB#20:
	movsd	LCPI158_0(%rip), %xmm0
	movsd	-704(%rbp), %xmm1
	movsd	%xmm1, -456(%rbp)
	movsd	-456(%rbp), %xmm1
	movsd	%xmm1, -448(%rbp)
	movsd	-448(%rbp), %xmm1
	movsd	%xmm1, -440(%rbp)
	movsd	-440(%rbp), %xmm1
	movsd	LCPI158_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB158_21
	jmp	LBB158_30
LBB158_21:
	movsd	-648(%rbp), %xmm0
	movsd	%xmm0, -480(%rbp)
	movsd	-480(%rbp), %xmm0
	movsd	%xmm0, -472(%rbp)
	movsd	-472(%rbp), %xmm0
	movsd	%xmm0, -464(%rbp)
	movsd	-464(%rbp), %xmm0
	ucomisd	-464(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_22
	jmp	LBB158_23
LBB158_22:
	movsd	-648(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -648(%rbp)
LBB158_23:
	movsd	-656(%rbp), %xmm0
	movsd	%xmm0, -504(%rbp)
	movsd	-504(%rbp), %xmm0
	movsd	%xmm0, -496(%rbp)
	movsd	-496(%rbp), %xmm0
	movsd	%xmm0, -488(%rbp)
	movsd	-488(%rbp), %xmm0
	ucomisd	-488(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_24
	jmp	LBB158_25
LBB158_24:
	movsd	-656(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -656(%rbp)
LBB158_25:
	movsd	-664(%rbp), %xmm0
	movsd	%xmm0, -528(%rbp)
	movsd	-528(%rbp), %xmm0
	movsd	%xmm0, -520(%rbp)
	movsd	-520(%rbp), %xmm0
	movsd	%xmm0, -512(%rbp)
	movsd	-512(%rbp), %xmm0
	ucomisd	-512(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_26
	jmp	LBB158_27
LBB158_26:
	movsd	-664(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -664(%rbp)
LBB158_27:
	movsd	-672(%rbp), %xmm0
	movsd	%xmm0, -552(%rbp)
	movsd	-552(%rbp), %xmm0
	movsd	%xmm0, -544(%rbp)
	movsd	-544(%rbp), %xmm0
	movsd	%xmm0, -536(%rbp)
	movsd	-536(%rbp), %xmm0
	ucomisd	-536(%rbp), %xmm0
	setne	%al
	setp	%cl
	orb	%cl, %al
	testb	$1, %al
	jne	LBB158_28
	jmp	LBB158_29
LBB158_28:
	movsd	-672(%rbp), %xmm0
	movsd	LCPI158_2(%rip), %xmm1
	andpd	%xmm1, %xmm0
	movsd	%xmm0, -672(%rbp)
LBB158_29:
	movb	$1, -721(%rbp)
LBB158_30:
	testb	$1, -721(%rbp)
	je	LBB158_32
## BB#31:
	movsd	LCPI158_0(%rip), %xmm0
	movsd	-648(%rbp), %xmm1
	mulsd	-664(%rbp), %xmm1
	movsd	-656(%rbp), %xmm2
	mulsd	-672(%rbp), %xmm2
	subsd	%xmm2, %xmm1
	movaps	%xmm0, %xmm2
	mulsd	%xmm1, %xmm2
	movsd	%xmm2, -712(%rbp)
	movsd	-648(%rbp), %xmm1
	mulsd	-672(%rbp), %xmm1
	movsd	-656(%rbp), %xmm2
	mulsd	-664(%rbp), %xmm2
	addsd	%xmm2, %xmm1
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, -720(%rbp)
LBB158_32:
	jmp	LBB158_33
LBB158_33:
	movsd	-712(%rbp), %xmm0
	movsd	-720(%rbp), %xmm1
	leaq	-624(%rbp), %rax
	movq	%rax, -584(%rbp)
	movsd	%xmm0, -592(%rbp)
	movsd	%xmm1, -600(%rbp)
	movq	-584(%rbp), %rax
	movsd	-592(%rbp), %xmm0
	movq	%rax, -560(%rbp)
	movsd	%xmm0, -568(%rbp)
	movsd	%xmm1, -576(%rbp)
	movq	-560(%rbp), %rax
	movsd	-568(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-576(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
	movsd	-624(%rbp), %xmm0
	movsd	-616(%rbp), %xmm1
	addq	$600, %rsp              ## imm = 0x258
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayINSt3__17complexIdEEE9init_warmEj
	.weak_def_can_be_hidden	__ZN4arma8podarrayINSt3__17complexIdEEE9init_warmEj
	.align	4, 0x90
__ZN4arma8podarrayINSt3__17complexIdEEE9init_warmEj: ## @_ZN4arma8podarrayINSt3__17complexIdEEE9init_warmEj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp716:
	.cfi_def_cfa_offset 16
Ltmp717:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp718:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rdi
	movl	(%rdi), %esi
	cmpl	-28(%rbp), %esi
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	jne	LBB159_2
## BB#1:
	jmp	LBB159_8
LBB159_2:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	cmpl	$16, (%rax)
	jbe	LBB159_4
## BB#3:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	movq	16(%rax), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdi
	callq	_free
LBB159_4:
	cmpl	$16, -28(%rbp)
	ja	LBB159_6
## BB#5:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rax
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movq	%rax, 16(%rcx)
	jmp	LBB159_7
LBB159_6:
	movl	-28(%rbp), %edi
	callq	__ZN4arma6memory7acquireINSt3__17complexIdEEEEPT_j
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movq	%rax, 16(%rcx)
LBB159_7:
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx)
LBB159_8:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma9op_fft_cx15copy_vec_unwrapINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j
	.weak_def_can_be_hidden	__ZN4arma9op_fft_cx15copy_vec_unwrapINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j
	.align	4, 0x90
__ZN4arma9op_fft_cx15copy_vec_unwrapINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j: ## @_ZN4arma9op_fft_cx15copy_vec_unwrapINS_3ColINSt3__17complexIdEEEEEEvPNS_5ProxyIT_E9elem_typeERKS9_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp719:
	.cfi_def_cfa_offset 16
Ltmp720:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp721:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	-64(%rbp), %rax
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movq	-48(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rax, %rdi
	callq	__ZN4arma6unwrapINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
	movq	-40(%rbp), %rax
	movq	-64(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	movq	16(%rsi), %rsi
	movl	-52(%rbp), %edx
	movq	%rax, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	cmpl	$16, -20(%rbp)
	ja	LBB160_2
## BB#1:
	jmp	LBB160_2
LBB160_2:                               ## %_ZN4arma8arrayops4copyINSt3__17complexIdEEEEvPT_PKS5_j.exit
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	shlq	$4, %rsi
	movq	%rax, %rdi
	movq	%rsi, -72(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	movq	-72(%rbp), %rdx         ## 8-byte Reload
	callq	_memcpy
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8arrayops11inplace_setINSt3__17complexIdEEEEvPT_S5_j
	.weak_def_can_be_hidden	__ZN4arma8arrayops11inplace_setINSt3__17complexIdEEEEvPT_S5_j
	.align	4, 0x90
__ZN4arma8arrayops11inplace_setINSt3__17complexIdEEEEvPT_S5_j: ## @_ZN4arma8arrayops11inplace_setINSt3__17complexIdEEEEvPT_S5_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp722:
	.cfi_def_cfa_offset 16
Ltmp723:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp724:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movsd	%xmm0, -128(%rbp)
	movsd	%xmm1, -120(%rbp)
	movq	%rdi, -136(%rbp)
	movl	%esi, -140(%rbp)
	cmpl	$16, -140(%rbp)
	ja	LBB161_3
## BB#1:
	xorl	%eax, %eax
	movb	%al, %cl
	testb	$1, %cl
	jne	LBB161_2
	jmp	LBB161_3
LBB161_2:
	movq	-136(%rbp), %rdi
	movq	-128(%rbp), %rax
	movq	%rax, -160(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -152(%rbp)
	movl	-140(%rbp), %esi
	movsd	-160(%rbp), %xmm0
	movsd	-152(%rbp), %xmm1
	callq	__ZN4arma8arrayops17inplace_set_smallINSt3__17complexIdEEEEvPT_S5_j
	jmp	LBB161_12
LBB161_3:
	xorl	%eax, %eax
	movb	%al, %cl
	leaq	-176(%rbp), %rdx
	leaq	-128(%rbp), %rsi
	xorps	%xmm0, %xmm0
	movq	%rdx, -96(%rbp)
	movsd	%xmm0, -104(%rbp)
	movsd	%xmm0, -112(%rbp)
	movq	-96(%rbp), %rdi
	movsd	-104(%rbp), %xmm0
	movsd	-112(%rbp), %xmm1
	movq	%rdi, -72(%rbp)
	movsd	%xmm0, -80(%rbp)
	movsd	%xmm1, -88(%rbp)
	movq	-72(%rbp), %rdi
	movsd	-80(%rbp), %xmm0
	movsd	%xmm0, (%rdi)
	movsd	-88(%rbp), %xmm0
	movsd	%xmm0, 8(%rdi)
	movq	%rsi, -56(%rbp)
	movq	%rdx, -64(%rbp)
	movq	-56(%rbp), %rdx
	movq	%rdx, -48(%rbp)
	movq	-48(%rbp), %rdx
	movsd	(%rdx), %xmm0
	movq	-64(%rbp), %rdx
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	ucomisd	(%rdx), %xmm0
	movb	%cl, -209(%rbp)         ## 1-byte Spill
	jne	LBB161_5
	jp	LBB161_5
## BB#4:
	movq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movsd	8(%rax), %xmm0
	movq	-64(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	ucomisd	8(%rax), %xmm0
	sete	%cl
	setnp	%dl
	andb	%dl, %cl
	movb	%cl, -209(%rbp)         ## 1-byte Spill
LBB161_5:                               ## %_ZNSt3__1eqIdEEbRKNS_7complexIT_EES5_.exit
	movb	-209(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB161_6
	jmp	LBB161_7
LBB161_6:
	xorl	%esi, %esi
	movq	-136(%rbp), %rax
	movl	-140(%rbp), %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	movq	%rax, %rdi
	callq	_memset
	jmp	LBB161_11
LBB161_7:
	xorl	%eax, %eax
	movb	%al, %cl
	movq	-136(%rbp), %rdx
	movq	%rdx, -16(%rbp)
	testb	$1, %cl
	jne	LBB161_8
	jmp	LBB161_9
LBB161_8:
	leaq	-136(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-136(%rbp), %rdi
	movq	-128(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -184(%rbp)
	movl	-140(%rbp), %esi
	movsd	-192(%rbp), %xmm0
	movsd	-184(%rbp), %xmm1
	callq	__ZN4arma8arrayops16inplace_set_baseINSt3__17complexIdEEEEvPT_S5_j
	jmp	LBB161_10
LBB161_9:
	movq	-136(%rbp), %rdi
	movq	-128(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -200(%rbp)
	movl	-140(%rbp), %esi
	movsd	-208(%rbp), %xmm0
	movsd	-200(%rbp), %xmm1
	callq	__ZN4arma8arrayops16inplace_set_baseINSt3__17complexIdEEEEvPT_S5_j
LBB161_10:
	jmp	LBB161_11
LBB161_11:
	jmp	LBB161_12
LBB161_12:
	addq	$224, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8arrayops17inplace_set_smallINSt3__17complexIdEEEEvPT_S5_j
	.weak_def_can_be_hidden	__ZN4arma8arrayops17inplace_set_smallINSt3__17complexIdEEEEvPT_S5_j
	.align	4, 0x90
__ZN4arma8arrayops17inplace_set_smallINSt3__17complexIdEEEEvPT_S5_j: ## @_ZN4arma8arrayops17inplace_set_smallINSt3__17complexIdEEEEvPT_S5_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp725:
	.cfi_def_cfa_offset 16
Ltmp726:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp727:
	.cfi_def_cfa_register %rbp
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -8(%rbp)
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	decl	%esi
	movl	%esi, %edi
	subl	$15, %esi
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movl	%esi, -44(%rbp)         ## 4-byte Spill
	ja	LBB162_17
## BB#19:
	leaq	LJTI162_0(%rip), %rax
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB162_1:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 240(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 248(%rax)
LBB162_2:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 224(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 232(%rax)
LBB162_3:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 208(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 216(%rax)
LBB162_4:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 192(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 200(%rax)
LBB162_5:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 176(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 184(%rax)
LBB162_6:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 160(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 168(%rax)
LBB162_7:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 144(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 152(%rax)
LBB162_8:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 128(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 136(%rax)
LBB162_9:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 112(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 120(%rax)
LBB162_10:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 96(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 104(%rax)
LBB162_11:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 80(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 88(%rax)
LBB162_12:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 64(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 72(%rax)
LBB162_13:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 48(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 56(%rax)
LBB162_14:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 32(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 40(%rax)
LBB162_15:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 24(%rax)
LBB162_16:
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-8(%rbp), %rcx
	movq	%rcx, 8(%rax)
LBB162_17:
	jmp	LBB162_18
LBB162_18:
	popq	%rbp
	retq
	.cfi_endproc
	.align	2, 0x90
L162_0_set_16 = LBB162_16-LJTI162_0
L162_0_set_15 = LBB162_15-LJTI162_0
L162_0_set_14 = LBB162_14-LJTI162_0
L162_0_set_13 = LBB162_13-LJTI162_0
L162_0_set_12 = LBB162_12-LJTI162_0
L162_0_set_11 = LBB162_11-LJTI162_0
L162_0_set_10 = LBB162_10-LJTI162_0
L162_0_set_9 = LBB162_9-LJTI162_0
L162_0_set_8 = LBB162_8-LJTI162_0
L162_0_set_7 = LBB162_7-LJTI162_0
L162_0_set_6 = LBB162_6-LJTI162_0
L162_0_set_5 = LBB162_5-LJTI162_0
L162_0_set_4 = LBB162_4-LJTI162_0
L162_0_set_3 = LBB162_3-LJTI162_0
L162_0_set_2 = LBB162_2-LJTI162_0
L162_0_set_1 = LBB162_1-LJTI162_0
LJTI162_0:
	.long	L162_0_set_16
	.long	L162_0_set_15
	.long	L162_0_set_14
	.long	L162_0_set_13
	.long	L162_0_set_12
	.long	L162_0_set_11
	.long	L162_0_set_10
	.long	L162_0_set_9
	.long	L162_0_set_8
	.long	L162_0_set_7
	.long	L162_0_set_6
	.long	L162_0_set_5
	.long	L162_0_set_4
	.long	L162_0_set_3
	.long	L162_0_set_2
	.long	L162_0_set_1

	.globl	__ZN4arma8arrayops16inplace_set_baseINSt3__17complexIdEEEEvPT_S5_j
	.weak_def_can_be_hidden	__ZN4arma8arrayops16inplace_set_baseINSt3__17complexIdEEEEvPT_S5_j
	.align	4, 0x90
__ZN4arma8arrayops16inplace_set_baseINSt3__17complexIdEEEEvPT_S5_j: ## @_ZN4arma8arrayops16inplace_set_baseINSt3__17complexIdEEEEvPT_S5_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp728:
	.cfi_def_cfa_offset 16
Ltmp729:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp730:
	.cfi_def_cfa_register %rbp
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -8(%rbp)
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	$0, -32(%rbp)
LBB163_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jae	LBB163_4
## BB#2:                                ##   in Loop: Header=BB163_1 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, %ecx
	movq	-24(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	-16(%rbp), %rcx
	movq	%rcx, (%rdx)
	movq	-8(%rbp), %rcx
	movq	%rcx, 8(%rdx)
## BB#3:                                ##   in Loop: Header=BB163_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	LBB163_1
LBB163_4:
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayINSt3__17complexIdEEE9init_coldEj
	.weak_def_can_be_hidden	__ZN4arma8podarrayINSt3__17complexIdEEE9init_coldEj
	.align	4, 0x90
__ZN4arma8podarrayINSt3__17complexIdEEE9init_coldEj: ## @_ZN4arma8podarrayINSt3__17complexIdEEE9init_coldEj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp731:
	.cfi_def_cfa_offset 16
Ltmp732:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp733:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	cmpl	$16, -12(%rbp)
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	ja	LBB164_2
## BB#1:
	movq	-24(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rax
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	movq	%rax, 16(%rcx)
	jmp	LBB164_3
LBB164_2:
	movl	-12(%rbp), %edi
	callq	__ZN4arma6memory7acquireINSt3__17complexIdEEEEPT_j
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	movq	%rax, 16(%rcx)
LBB164_3:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI165_0:
	.quad	-4616189618054758400    ## double -1
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC2Ej
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC2Ej
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC2Ej: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EEC2Ej
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin165:
	.cfi_lsda 16, Lexception165
## BB#0:
	pushq	%rbp
Ltmp754:
	.cfi_def_cfa_offset 16
Ltmp755:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp756:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -72(%rbp)
	movl	%esi, -76(%rbp)
	movq	-72(%rbp), %rdi
	movq	%rdi, -160(%rbp)        ## 8-byte Spill
	callq	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EEC2Ej
	movq	-160(%rbp), %rdi        ## 8-byte Reload
	addq	$304, %rdi              ## imm = 0x130
Ltmp734:
	movq	%rdi, -168(%rbp)        ## 8-byte Spill
	callq	__ZN4arma8podarrayIjEC1Ev
Ltmp735:
	jmp	LBB165_1
LBB165_1:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	addq	$400, %rax              ## imm = 0x190
Ltmp737:
	movq	%rax, %rdi
	movq	%rax, -176(%rbp)        ## 8-byte Spill
	callq	__ZN4arma8podarrayIjEC1Ev
Ltmp738:
	jmp	LBB165_2
LBB165_2:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	addq	$496, %rax              ## imm = 0x1F0
Ltmp740:
	movq	%rax, %rdi
	movq	%rax, -184(%rbp)        ## 8-byte Spill
	callq	__ZN4arma8podarrayINSt3__17complexIdEEEC1Ev
Ltmp741:
	jmp	LBB165_3
LBB165_3:
Ltmp743:
	movq	-160(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb0EEEjv
Ltmp744:
	movl	%eax, -188(%rbp)        ## 4-byte Spill
	jmp	LBB165_4
LBB165_4:
	movl	-188(%rbp), %eax        ## 4-byte Reload
	movl	%eax, -96(%rbp)
	movq	-160(%rbp), %rcx        ## 8-byte Reload
	addq	$304, %rcx              ## imm = 0x130
Ltmp745:
	movq	%rcx, %rdi
	movl	%eax, %esi
	callq	__ZN4arma8podarrayIjE8set_sizeEj
Ltmp746:
	jmp	LBB165_5
LBB165_5:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	addq	$400, %rax              ## imm = 0x190
	movl	-96(%rbp), %esi
Ltmp747:
	movq	%rax, %rdi
	callq	__ZN4arma8podarrayIjE8set_sizeEj
Ltmp748:
	jmp	LBB165_6
LBB165_6:
Ltmp749:
	movq	-160(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb1EEEjv
Ltmp750:
	movl	%eax, -192(%rbp)        ## 4-byte Spill
	jmp	LBB165_7
LBB165_7:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -200(%rbp)        ## 8-byte Spill
## BB#8:
	movq	-200(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -104(%rbp)
	movsd	LCPI165_0(%rip), %xmm0
	callq	_acos
	addsd	%xmm0, %xmm0
	movq	-160(%rbp), %rax        ## 8-byte Reload
	movl	(%rax), %ecx
	movl	%ecx, %edx
	cvtsi2sdq	%rdx, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -112(%rbp)
	movl	$0, -116(%rbp)
LBB165_9:                               ## =>This Inner Loop Header: Depth=1
	movl	-116(%rbp), %eax
	movq	-160(%rbp), %rcx        ## 8-byte Reload
	cmpl	(%rcx), %eax
	jae	LBB165_18
## BB#10:                               ##   in Loop: Header=BB165_9 Depth=1
	xorps	%xmm0, %xmm0
	leaq	-152(%rbp), %rax
	movl	-116(%rbp), %ecx
	movl	%ecx, %edx
	movq	-104(%rbp), %rsi
	movq	%rdx, %rdi
	shlq	$4, %rdi
	addq	%rdi, %rsi
	cvtsi2sdq	%rdx, %xmm1
	mulsd	-112(%rbp), %xmm1
	movq	%rax, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm1, -48(%rbp)
	movq	-32(%rbp), %rax
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rax, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rax
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
	movq	%rsi, -208(%rbp)        ## 8-byte Spill
## BB#11:                               ##   in Loop: Header=BB165_9 Depth=1
Ltmp751:
	leaq	-152(%rbp), %rdi
	callq	__ZNSt3__13expIdEENS_7complexIT_EERKS3_
Ltmp752:
	movsd	%xmm1, -216(%rbp)       ## 8-byte Spill
	movsd	%xmm0, -224(%rbp)       ## 8-byte Spill
	jmp	LBB165_12
LBB165_12:                              ##   in Loop: Header=BB165_9 Depth=1
	movsd	-224(%rbp), %xmm0       ## 8-byte Reload
	movsd	%xmm0, -136(%rbp)
	movsd	-216(%rbp), %xmm0       ## 8-byte Reload
	movsd	%xmm0, -128(%rbp)
	movq	-136(%rbp), %rax
	movq	-208(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, (%rcx)
	movq	-128(%rbp), %rax
	movq	%rax, 8(%rcx)
## BB#13:                               ##   in Loop: Header=BB165_9 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	LBB165_9
LBB165_14:
Ltmp736:
	movl	%edx, %ecx
	movq	%rax, -88(%rbp)
	movl	%ecx, -92(%rbp)
	jmp	LBB165_21
LBB165_15:
Ltmp739:
	movl	%edx, %ecx
	movq	%rax, -88(%rbp)
	movl	%ecx, -92(%rbp)
	jmp	LBB165_20
LBB165_16:
Ltmp742:
	movl	%edx, %ecx
	movq	%rax, -88(%rbp)
	movl	%ecx, -92(%rbp)
	jmp	LBB165_19
LBB165_17:
Ltmp753:
	movl	%edx, %ecx
	movq	%rax, -88(%rbp)
	movl	%ecx, -92(%rbp)
	movq	-184(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	jmp	LBB165_19
LBB165_18:
	addq	$224, %rsp
	popq	%rbp
	retq
LBB165_19:
	movq	-176(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma8podarrayIjED1Ev
LBB165_20:
	movq	-168(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma8podarrayIjED1Ev
LBB165_21:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EED2Ev
## BB#22:
	movq	-88(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end165:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table165:
Lexception165:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\320"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	78                      ## Call site table length
Lset225 = Leh_func_begin165-Leh_func_begin165 ## >> Call Site 1 <<
	.long	Lset225
Lset226 = Ltmp734-Leh_func_begin165     ##   Call between Leh_func_begin165 and Ltmp734
	.long	Lset226
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset227 = Ltmp734-Leh_func_begin165     ## >> Call Site 2 <<
	.long	Lset227
Lset228 = Ltmp735-Ltmp734               ##   Call between Ltmp734 and Ltmp735
	.long	Lset228
Lset229 = Ltmp736-Leh_func_begin165     ##     jumps to Ltmp736
	.long	Lset229
	.byte	0                       ##   On action: cleanup
Lset230 = Ltmp737-Leh_func_begin165     ## >> Call Site 3 <<
	.long	Lset230
Lset231 = Ltmp738-Ltmp737               ##   Call between Ltmp737 and Ltmp738
	.long	Lset231
Lset232 = Ltmp739-Leh_func_begin165     ##     jumps to Ltmp739
	.long	Lset232
	.byte	0                       ##   On action: cleanup
Lset233 = Ltmp740-Leh_func_begin165     ## >> Call Site 4 <<
	.long	Lset233
Lset234 = Ltmp741-Ltmp740               ##   Call between Ltmp740 and Ltmp741
	.long	Lset234
Lset235 = Ltmp742-Leh_func_begin165     ##     jumps to Ltmp742
	.long	Lset235
	.byte	0                       ##   On action: cleanup
Lset236 = Ltmp743-Leh_func_begin165     ## >> Call Site 5 <<
	.long	Lset236
Lset237 = Ltmp752-Ltmp743               ##   Call between Ltmp743 and Ltmp752
	.long	Lset237
Lset238 = Ltmp753-Leh_func_begin165     ##     jumps to Ltmp753
	.long	Lset238
	.byte	0                       ##   On action: cleanup
Lset239 = Ltmp752-Leh_func_begin165     ## >> Call Site 6 <<
	.long	Lset239
Lset240 = Leh_func_end165-Ltmp752       ##   Call between Ltmp752 and Leh_func_end165
	.long	Lset240
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EEC2Ej
	.weak_def_can_be_hidden	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EEC2Ej
	.align	4, 0x90
__ZN4arma5storeINSt3__17complexIdEELj0ELb0EEC2Ej: ## @_ZN4arma5storeINSt3__17complexIdEELj0ELb0EEC2Ej
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin166:
	.cfi_lsda 16, Lexception166
## BB#0:
	pushq	%rbp
Ltmp760:
	.cfi_def_cfa_offset 16
Ltmp761:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp762:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	%esi, (%rdi)
	movq	%rdi, %rax
	addq	$16, %rax
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -48(%rbp)         ## 8-byte Spill
	callq	__ZN4arma8podarrayINSt3__17complexIdEEEC1Ev
	movq	-40(%rbp), %rax         ## 8-byte Reload
	movl	(%rax), %esi
Ltmp757:
	movq	-48(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN4arma8podarrayINSt3__17complexIdEEE8set_sizeEj
Ltmp758:
	jmp	LBB166_1
LBB166_1:
	addq	$48, %rsp
	popq	%rbp
	retq
LBB166_2:
Ltmp759:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-48(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
## BB#3:
	movq	-24(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end166:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table166:
Lexception166:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset241 = Leh_func_begin166-Leh_func_begin166 ## >> Call Site 1 <<
	.long	Lset241
Lset242 = Ltmp757-Leh_func_begin166     ##   Call between Leh_func_begin166 and Ltmp757
	.long	Lset242
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset243 = Ltmp757-Leh_func_begin166     ## >> Call Site 2 <<
	.long	Lset243
Lset244 = Ltmp758-Ltmp757               ##   Call between Ltmp757 and Ltmp758
	.long	Lset244
Lset245 = Ltmp759-Leh_func_begin166     ##     jumps to Ltmp759
	.long	Lset245
	.byte	0                       ##   On action: cleanup
Lset246 = Ltmp758-Leh_func_begin166     ## >> Call Site 3 <<
	.long	Lset246
Lset247 = Leh_func_end166-Ltmp758       ##   Call between Ltmp758 and Leh_func_end166
	.long	Lset247
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma8podarrayIjEC1Ev
	.weak_def_can_be_hidden	__ZN4arma8podarrayIjEC1Ev
	.align	4, 0x90
__ZN4arma8podarrayIjEC1Ev:              ## @_ZN4arma8podarrayIjEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp763:
	.cfi_def_cfa_offset 16
Ltmp764:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp765:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma8podarrayIjEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayINSt3__17complexIdEEEC1Ev
	.weak_def_can_be_hidden	__ZN4arma8podarrayINSt3__17complexIdEEEC1Ev
	.align	4, 0x90
__ZN4arma8podarrayINSt3__17complexIdEEEC1Ev: ## @_ZN4arma8podarrayINSt3__17complexIdEEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp766:
	.cfi_def_cfa_offset 16
Ltmp767:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp768:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb0EEEjv
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb0EEEjv
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb0EEEjv: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb0EEEjv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp769:
	.cfi_def_cfa_offset 16
Ltmp770:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp771:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	$0, -12(%rbp)
	movl	(%rdi), %eax
	movl	%eax, -16(%rbp)
	movl	$4, -20(%rbp)
LBB169_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB169_3 Depth 2
	cmpl	$2, -16(%rbp)
	jb	LBB169_13
## BB#2:                                ##   in Loop: Header=BB169_1 Depth=1
	jmp	LBB169_3
LBB169_3:                               ##   Parent Loop BB169_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	xorl	%edx, %edx
	divl	-20(%rbp)
	cmpl	$0, %edx
	jbe	LBB169_11
## BB#4:                                ##   in Loop: Header=BB169_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	movl	%ecx, -28(%rbp)         ## 4-byte Spill
	je	LBB169_6
	jmp	LBB169_14
LBB169_14:                              ##   in Loop: Header=BB169_3 Depth=2
	movl	-24(%rbp), %eax         ## 4-byte Reload
	subl	$2, %eax
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	jne	LBB169_7
	jmp	LBB169_5
LBB169_5:                               ##   in Loop: Header=BB169_3 Depth=2
	movl	$3, -20(%rbp)
	jmp	LBB169_8
LBB169_6:                               ##   in Loop: Header=BB169_3 Depth=2
	movl	$2, -20(%rbp)
	jmp	LBB169_8
LBB169_7:                               ##   in Loop: Header=BB169_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
LBB169_8:                               ##   in Loop: Header=BB169_3 Depth=2
	movl	-20(%rbp), %eax
	imull	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jbe	LBB169_10
## BB#9:                                ##   in Loop: Header=BB169_3 Depth=2
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
LBB169_10:                              ##   in Loop: Header=BB169_3 Depth=2
	jmp	LBB169_3
LBB169_11:                              ##   in Loop: Header=BB169_1 Depth=1
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %ecx
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	xorl	%edx, %edx
	movl	-36(%rbp), %ecx         ## 4-byte Reload
	divl	%ecx
	movl	%eax, -16(%rbp)
## BB#12:                               ##   in Loop: Header=BB169_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	LBB169_1
LBB169_13:
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayIjE8set_sizeEj
	.weak_def_can_be_hidden	__ZN4arma8podarrayIjE8set_sizeEj
	.align	4, 0x90
__ZN4arma8podarrayIjE8set_sizeEj:       ## @_ZN4arma8podarrayIjE8set_sizeEj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp772:
	.cfi_def_cfa_offset 16
Ltmp773:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp774:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	__ZN4arma8podarrayIjE9init_warmEj
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb1EEEjv
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb1EEEjv
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb1EEEjv: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb1ELj0EE10calc_radixILb1EEEjv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp775:
	.cfi_def_cfa_offset 16
Ltmp776:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp777:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rdi
	movl	$0, -60(%rbp)
	movl	(%rdi), %eax
	movl	%eax, -64(%rbp)
	movl	$4, -68(%rbp)
	movq	%rdi, -80(%rbp)         ## 8-byte Spill
LBB171_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB171_3 Depth 2
	cmpl	$2, -64(%rbp)
	jb	LBB171_13
## BB#2:                                ##   in Loop: Header=BB171_1 Depth=1
	jmp	LBB171_3
LBB171_3:                               ##   Parent Loop BB171_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	xorl	%edx, %edx
	divl	-68(%rbp)
	cmpl	$0, %edx
	jbe	LBB171_11
## BB#4:                                ##   in Loop: Header=BB171_3 Depth=2
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	movl	%ecx, -88(%rbp)         ## 4-byte Spill
	je	LBB171_6
	jmp	LBB171_14
LBB171_14:                              ##   in Loop: Header=BB171_3 Depth=2
	movl	-84(%rbp), %eax         ## 4-byte Reload
	subl	$2, %eax
	movl	%eax, -92(%rbp)         ## 4-byte Spill
	jne	LBB171_7
	jmp	LBB171_5
LBB171_5:                               ##   in Loop: Header=BB171_3 Depth=2
	movl	$3, -68(%rbp)
	jmp	LBB171_8
LBB171_6:                               ##   in Loop: Header=BB171_3 Depth=2
	movl	$2, -68(%rbp)
	jmp	LBB171_8
LBB171_7:                               ##   in Loop: Header=BB171_3 Depth=2
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -68(%rbp)
LBB171_8:                               ##   in Loop: Header=BB171_3 Depth=2
	movl	-68(%rbp), %eax
	imull	-68(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jbe	LBB171_10
## BB#9:                                ##   in Loop: Header=BB171_3 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -68(%rbp)
LBB171_10:                              ##   in Loop: Header=BB171_3 Depth=2
	jmp	LBB171_3
LBB171_11:                              ##   in Loop: Header=BB171_1 Depth=1
	movl	-68(%rbp), %eax
	movl	-64(%rbp), %ecx
	movl	%eax, -96(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	xorl	%edx, %edx
	movl	-96(%rbp), %ecx         ## 4-byte Reload
	divl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	movq	-80(%rbp), %rsi         ## 8-byte Reload
	addq	$304, %rsi              ## imm = 0x130
	movl	-60(%rbp), %edi
	movq	%rsi, -40(%rbp)
	movl	%edi, -44(%rbp)
	movq	-40(%rbp), %rsi
	movl	-44(%rbp), %edi
	movl	%edi, %r8d
	movq	16(%rsi), %rsi
	shlq	$2, %r8
	addq	%r8, %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	movl	%eax, (%rsi)
	movl	-68(%rbp), %eax
	movq	-80(%rbp), %rsi         ## 8-byte Reload
	addq	$400, %rsi              ## imm = 0x190
	movl	-60(%rbp), %edi
	movq	%rsi, -16(%rbp)
	movl	%edi, -20(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edi
	movl	%edi, %r8d
	movq	16(%rsi), %rsi
	shlq	$2, %r8
	addq	%r8, %rsi
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movl	%eax, (%rsi)
## BB#12:                               ##   in Loop: Header=BB171_1 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB171_1
LBB171_13:
	movl	-60(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI172_0:
	.quad	9218868437227405312     ## double +Inf
LCPI172_2:
	.quad	9221120237041090560     ## double NaN
LCPI172_3:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__literal16,16byte_literals
	.align	4
LCPI172_1:
	.quad	9223372036854775807     ## double nan
	.quad	9223372036854775807     ## double nan
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__13expIdEENS_7complexIT_EERKS3_
	.weak_def_can_be_hidden	__ZNSt3__13expIdEENS_7complexIT_EERKS3_
	.align	4, 0x90
__ZNSt3__13expIdEENS_7complexIT_EERKS3_: ## @_ZNSt3__13expIdEENS_7complexIT_EERKS3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp778:
	.cfi_def_cfa_offset 16
Ltmp779:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp780:
	.cfi_def_cfa_register %rbp
	subq	$352, %rsp              ## imm = 0x160
	movsd	LCPI172_0(%rip), %xmm0
	movq	%rdi, -296(%rbp)
	movq	-296(%rbp), %rdi
	movq	%rdi, -272(%rbp)
	movq	-272(%rbp), %rdi
	movsd	8(%rdi), %xmm1
	movsd	%xmm1, -304(%rbp)
	movq	-296(%rbp), %rdi
	movq	%rdi, -88(%rbp)
	movq	-88(%rbp), %rdi
	movsd	(%rdi), %xmm1
	movsd	%xmm1, -56(%rbp)
	movsd	-56(%rbp), %xmm1
	movsd	%xmm1, -48(%rbp)
	movsd	-48(%rbp), %xmm1
	movsd	%xmm1, -40(%rbp)
	movsd	-40(%rbp), %xmm1
	movsd	LCPI172_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB172_1
	jmp	LBB172_16
LBB172_1:
	xorps	%xmm0, %xmm0
	movq	-296(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	ucomisd	(%rax), %xmm0
	jbe	LBB172_7
## BB#2:
	xorl	%eax, %eax
	movb	%al, %cl
	movsd	-304(%rbp), %xmm0
	movsd	%xmm0, -24(%rbp)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, -16(%rbp)
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, -8(%rbp)
	movsd	-8(%rbp), %xmm0
	ucomisd	-8(%rbp), %xmm0
	movb	%cl, -313(%rbp)         ## 1-byte Spill
	jne	LBB172_4
	jp	LBB172_4
## BB#3:
	movsd	LCPI172_0(%rip), %xmm0
	movsd	-8(%rbp), %xmm1
	movsd	LCPI172_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	setne	%al
	setp	%cl
	orb	%cl, %al
	movb	%al, -313(%rbp)         ## 1-byte Spill
LBB172_4:                               ## %_Z8isfiniteIdENSt3__19enable_ifIXsr3std13is_arithmeticIT_EE5valueEbE4typeES2_.exit1
	movb	-313(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB172_6
## BB#5:
	movsd	LCPI172_3(%rip), %xmm0
	movsd	%xmm0, -304(%rbp)
LBB172_6:
	jmp	LBB172_15
LBB172_7:
	xorps	%xmm0, %xmm0
	movsd	-304(%rbp), %xmm1
	ucomisd	%xmm0, %xmm1
	jne	LBB172_8
	jp	LBB172_8
	jmp	LBB172_11
LBB172_8:
	xorl	%eax, %eax
	movb	%al, %cl
	movsd	-304(%rbp), %xmm0
	movsd	%xmm0, -80(%rbp)
	movsd	-80(%rbp), %xmm0
	movsd	%xmm0, -72(%rbp)
	movsd	-72(%rbp), %xmm0
	movsd	%xmm0, -64(%rbp)
	movsd	-64(%rbp), %xmm0
	ucomisd	-64(%rbp), %xmm0
	movb	%cl, -314(%rbp)         ## 1-byte Spill
	jne	LBB172_10
	jp	LBB172_10
## BB#9:
	movsd	LCPI172_0(%rip), %xmm0
	movsd	-64(%rbp), %xmm1
	movsd	LCPI172_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	setne	%al
	setp	%cl
	orb	%cl, %al
	movb	%al, -314(%rbp)         ## 1-byte Spill
LBB172_10:                              ## %_Z8isfiniteIdENSt3__19enable_ifIXsr3std13is_arithmeticIT_EE5valueEbE4typeES2_.exit
	movb	-314(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB172_14
LBB172_11:
	movsd	LCPI172_0(%rip), %xmm0
	movsd	-304(%rbp), %xmm1
	movsd	%xmm1, -112(%rbp)
	movsd	-112(%rbp), %xmm1
	movsd	%xmm1, -104(%rbp)
	movsd	-104(%rbp), %xmm1
	movsd	%xmm1, -96(%rbp)
	movsd	-96(%rbp), %xmm1
	movsd	LCPI172_1(%rip), %xmm2
	andpd	%xmm2, %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	testb	$1, %al
	jne	LBB172_12
	jmp	LBB172_13
LBB172_12:
	movsd	LCPI172_2(%rip), %xmm0
	movsd	%xmm0, -304(%rbp)
LBB172_13:
	leaq	-288(%rbp), %rax
	movq	-296(%rbp), %rcx
	movq	%rcx, -120(%rbp)
	movq	-120(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movsd	-304(%rbp), %xmm1
	movq	%rax, -152(%rbp)
	movsd	%xmm0, -160(%rbp)
	movsd	%xmm1, -168(%rbp)
	movq	-152(%rbp), %rax
	movsd	-160(%rbp), %xmm0
	movsd	-168(%rbp), %xmm1
	movq	%rax, -128(%rbp)
	movsd	%xmm0, -136(%rbp)
	movsd	%xmm1, -144(%rbp)
	movq	-128(%rbp), %rax
	movsd	-136(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-144(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
	jmp	LBB172_21
LBB172_14:
	jmp	LBB172_15
LBB172_15:
	jmp	LBB172_20
LBB172_16:
	movq	-296(%rbp), %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movsd	(%rax), %xmm0
	movsd	%xmm0, -200(%rbp)
	movsd	-200(%rbp), %xmm0
	movsd	%xmm0, -192(%rbp)
	movsd	-192(%rbp), %xmm0
	movsd	%xmm0, -184(%rbp)
	movsd	-184(%rbp), %xmm0
	ucomisd	-184(%rbp), %xmm0
	setne	%cl
	setp	%dl
	orb	%dl, %cl
	testb	$1, %cl
	jne	LBB172_17
	jmp	LBB172_19
LBB172_17:
	xorps	%xmm0, %xmm0
	movq	-296(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movsd	8(%rax), %xmm1
	ucomisd	%xmm0, %xmm1
	jne	LBB172_19
	jp	LBB172_19
## BB#18:
	movq	-296(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rcx, -288(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -280(%rbp)
	jmp	LBB172_21
LBB172_19:
	jmp	LBB172_20
LBB172_20:
	movq	-296(%rbp), %rax
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	movsd	(%rax), %xmm0
	callq	_exp
	leaq	-288(%rbp), %rax
	movsd	%xmm0, -312(%rbp)
	movsd	-312(%rbp), %xmm0
	movsd	-304(%rbp), %xmm1
	movsd	%xmm0, -328(%rbp)       ## 8-byte Spill
	movaps	%xmm1, %xmm0
	movq	%rax, -336(%rbp)        ## 8-byte Spill
	callq	_cos
	movsd	-328(%rbp), %xmm1       ## 8-byte Reload
	mulsd	%xmm0, %xmm1
	movsd	-312(%rbp), %xmm0
	movsd	-304(%rbp), %xmm2
	movsd	%xmm0, -344(%rbp)       ## 8-byte Spill
	movaps	%xmm2, %xmm0
	movsd	%xmm1, -352(%rbp)       ## 8-byte Spill
	callq	_sin
	movsd	-344(%rbp), %xmm1       ## 8-byte Reload
	mulsd	%xmm0, %xmm1
	movq	-336(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -248(%rbp)
	movsd	-352(%rbp), %xmm0       ## 8-byte Reload
	movsd	%xmm0, -256(%rbp)
	movsd	%xmm1, -264(%rbp)
	movq	-248(%rbp), %rcx
	movsd	-256(%rbp), %xmm0
	movsd	-264(%rbp), %xmm1
	movq	%rcx, -224(%rbp)
	movsd	%xmm0, -232(%rbp)
	movsd	%xmm1, -240(%rbp)
	movq	-224(%rbp), %rcx
	movsd	-232(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-240(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
LBB172_21:
	movsd	-288(%rbp), %xmm0
	movsd	-280(%rbp), %xmm1
	addq	$352, %rsp              ## imm = 0x160
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayIjE9init_warmEj
	.weak_def_can_be_hidden	__ZN4arma8podarrayIjE9init_warmEj
	.align	4, 0x90
__ZN4arma8podarrayIjE9init_warmEj:      ## @_ZN4arma8podarrayIjE9init_warmEj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp781:
	.cfi_def_cfa_offset 16
Ltmp782:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp783:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rdi
	movl	(%rdi), %esi
	cmpl	-28(%rbp), %esi
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	jne	LBB173_2
## BB#1:
	jmp	LBB173_8
LBB173_2:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	cmpl	$16, (%rax)
	jbe	LBB173_4
## BB#3:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	movq	16(%rax), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdi
	callq	_free
LBB173_4:
	cmpl	$16, -28(%rbp)
	ja	LBB173_6
## BB#5:
	movq	-40(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rax
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movq	%rax, 16(%rcx)
	jmp	LBB173_7
LBB173_6:
	movl	-28(%rbp), %edi
	callq	__ZN4arma6memory7acquireIjEEPT_j
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movq	%rax, 16(%rcx)
LBB173_7:
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movl	%eax, (%rdx)
LBB173_8:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma6memory7acquireIjEEPT_j
	.weak_def_can_be_hidden	__ZN4arma6memory7acquireIjEEPT_j
	.align	4, 0x90
__ZN4arma6memory7acquireIjEEPT_j:       ## @_ZN4arma6memory7acquireIjEEPT_j
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp784:
	.cfi_def_cfa_offset 16
Ltmp785:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp786:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	$-1, %rax
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %edi
	movl	%edi, %ecx
	shrq	$2, %rax
	cmpq	%rax, %rcx
	seta	%dl
	movzbl	%dl, %edi
	andl	$1, %edi
	leaq	L_.str39(%rip), %rsi
	callq	__ZN4arma10arma_checkIA53_cEEvbRKT_
	movl	-4(%rbp), %edi
	movl	%edi, %eax
	shlq	$2, %rax
	movq	%rax, %rdi
	callq	_malloc
	movq	%rax, -16(%rbp)
	cmpl	$0, -4(%rbp)
	jbe	LBB174_2
## BB#1:
	cmpq	$0, -16(%rbp)
	sete	%al
	movzbl	%al, %ecx
	andl	$1, %ecx
	leaq	L_.str40(%rip), %rsi
	movl	%ecx, %edi
	callq	__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_
LBB174_2:
	movq	-16(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayINSt3__17complexIdEEEC2Ev
	.weak_def_can_be_hidden	__ZN4arma8podarrayINSt3__17complexIdEEEC2Ev
	.align	4, 0x90
__ZN4arma8podarrayINSt3__17complexIdEEEC2Ev: ## @_ZN4arma8podarrayINSt3__17complexIdEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp787:
	.cfi_def_cfa_offset 16
Ltmp788:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp789:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rdi
	movl	$0, (%rdi)
	movq	$0, 16(%rdi)
	addq	$32, %rdi
	movq	%rdi, %rax
	addq	$256, %rax              ## imm = 0x100
	movq	%rax, -64(%rbp)         ## 8-byte Spill
	movq	%rdi, -72(%rbp)         ## 8-byte Spill
LBB175_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-72(%rbp), %rax         ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm0, -48(%rbp)
	movq	-32(%rbp), %rcx
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rcx, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rcx
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-64(%rbp), %rcx         ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	jne	LBB175_1
## BB#2:
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayIjEC2Ev
	.weak_def_can_be_hidden	__ZN4arma8podarrayIjEC2Ev
	.align	4, 0x90
__ZN4arma8podarrayIjEC2Ev:              ## @_ZN4arma8podarrayIjEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp790:
	.cfi_def_cfa_offset 16
Ltmp791:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp792:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	$0, (%rdi)
	movq	$0, 16(%rdi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma8podarrayINSt3__17complexIdEEE8set_sizeEj
	.weak_def_can_be_hidden	__ZN4arma8podarrayINSt3__17complexIdEEE8set_sizeEj
	.align	4, 0x90
__ZN4arma8podarrayINSt3__17complexIdEEE8set_sizeEj: ## @_ZN4arma8podarrayINSt3__17complexIdEEE8set_sizeEj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp793:
	.cfi_def_cfa_offset 16
Ltmp794:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp795:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEE9init_warmEj
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC2ERKS5_
	.weak_def_can_be_hidden	__ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC2ERKS5_
	.align	4, 0x90
__ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC2ERKS5_: ## @_ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC2ERKS5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp796:
	.cfi_def_cfa_offset 16
Ltmp797:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp798:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED2Ev
	.weak_def_can_be_hidden	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED2Ev
	.align	4, 0x90
__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED2Ev: ## @_ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp799:
	.cfi_def_cfa_offset 16
Ltmp800:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp801:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC1ERKS8_
	.weak_def_can_be_hidden	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC1ERKS8_
	.align	4, 0x90
__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC1ERKS8_: ## @_ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC1ERKS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp802:
	.cfi_def_cfa_offset 16
Ltmp803:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp804:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC2ERKS8_
	.weak_def_can_be_hidden	__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC2ERKS8_
	.align	4, 0x90
__ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC2ERKS8_: ## @_ZN4arma4mtOpIdNS_2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEENS_7op_realEEC2ERKS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp805:
	.cfi_def_cfa_offset 16
Ltmp806:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp807:
	.cfi_def_cfa_register %rbp
	xorps	%xmm0, %xmm0
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdi
	movq	%rdi, (%rsi)
	addq	$16, %rsi
	movq	%rsi, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm0, -48(%rbp)
	movq	-32(%rbp), %rsi
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rsi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rsi
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rsi)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED2Ev
	.weak_def_can_be_hidden	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED2Ev
	.align	4, 0x90
__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED2Ev: ## @_ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp808:
	.cfi_def_cfa_offset 16
Ltmp809:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp810:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC1ERKS5_jj
	.weak_def_can_be_hidden	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC1ERKS5_jj
	.align	4, 0x90
__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC1ERKS5_jj: ## @_ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC1ERKS5_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp811:
	.cfi_def_cfa_offset 16
Ltmp812:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp813:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movq	-16(%rbp), %rsi
	callq	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC2ERKS5_jj
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC2ERKS5_jj
	.weak_def_can_be_hidden	__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC2ERKS5_jj
	.align	4, 0x90
__ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC2ERKS5_jj: ## @_ZN4arma2OpINS_3ColINSt3__17complexIdEEEENS_10op_ifft_cxEEC2ERKS5_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp814:
	.cfi_def_cfa_offset 16
Ltmp815:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp816:
	.cfi_def_cfa_register %rbp
	xorps	%xmm0, %xmm0
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -72(%rbp)
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdi
	movq	%rdi, (%rsi)
	movq	%rsi, %rdi
	addq	$16, %rdi
	movq	%rdi, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm0, -48(%rbp)
	movq	-32(%rbp), %rdi
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rdi)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rdi)
	movl	-68(%rbp), %ecx
	movl	%ecx, 32(%rsi)
	movl	-72(%rbp), %ecx
	movl	%ecx, 48(%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIS3_EENS6_IdEENS_16glue_mixed_schurEEERKS4_RKNS_6mtGlueIS3_T_T0_T1_EE
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIS3_EENS6_IdEENS_16glue_mixed_schurEEERKS4_RKNS_6mtGlueIS3_T_T0_T1_EE
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIS3_EENS6_IdEENS_16glue_mixed_schurEEERKS4_RKNS_6mtGlueIS3_T_T0_T1_EE: ## @_ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIS3_EENS6_IdEENS_16glue_mixed_schurEEERKS4_RKNS_6mtGlueIS3_T_T0_T1_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp817:
	.cfi_def_cfa_offset 16
Ltmp818:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp819:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	movq	%rax, %rsi
	callq	__ZN4arma16glue_mixed_schur5applyINS_3ColINSt3__17complexIdEEEENS2_IdEEEEvRNS_3MatINS_11eT_promoterIT_T0_E2eTEEERKNS_6mtGlueISD_SA_SB_S0_EE
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma16glue_mixed_schur5applyINS_3ColINSt3__17complexIdEEEENS2_IdEEEEvRNS_3MatINS_11eT_promoterIT_T0_E2eTEEERKNS_6mtGlueISD_SA_SB_S0_EE
	.weak_def_can_be_hidden	__ZN4arma16glue_mixed_schur5applyINS_3ColINSt3__17complexIdEEEENS2_IdEEEEvRNS_3MatINS_11eT_promoterIT_T0_E2eTEEERKNS_6mtGlueISD_SA_SB_S0_EE
	.align	4, 0x90
__ZN4arma16glue_mixed_schur5applyINS_3ColINSt3__17complexIdEEEENS2_IdEEEEvRNS_3MatINS_11eT_promoterIT_T0_E2eTEEERKNS_6mtGlueISD_SA_SB_S0_EE: ## @_ZN4arma16glue_mixed_schur5applyINS_3ColINSt3__17complexIdEEEENS2_IdEEEEvRNS_3MatINS_11eT_promoterIT_T0_E2eTEEERKNS_6mtGlueISD_SA_SB_S0_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp820:
	.cfi_def_cfa_offset 16
Ltmp821:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp822:
	.cfi_def_cfa_register %rbp
	subq	$368, %rsp              ## imm = 0x170
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	%rdi, -256(%rbp)
	movq	%rsi, -264(%rbp)
	callq	__ZN4arma12promote_typeINSt3__17complexIdEEdE5checkEv
	leaq	-32(%rbp), %rdi
	movq	-264(%rbp), %rax
	movq	(%rax), %rsi
	callq	__ZN4arma5ProxyINS_3ColINSt3__17complexIdEEEEEC1ERKS5_
	leaq	-48(%rbp), %rdi
	movq	-264(%rbp), %rax
	movq	16(%rax), %rsi
	callq	__ZN4arma5ProxyINS_3ColIdEEEC1ERKS2_
	leaq	-32(%rbp), %rdi
	leaq	-48(%rbp), %rsi
	leaq	L_.str41(%rip), %rdx
	callq	__ZN4arma21arma_assert_same_sizeINS_3ColINSt3__17complexIdEEEENS1_IdEEEEvRKNS_5ProxyIT_EERKNS7_IT0_EEPKc
	leaq	-32(%rbp), %rax
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rdx
	movq	(%rdx), %rdx
	movl	(%rdx), %ecx
	movl	%ecx, -268(%rbp)
	movq	%rax, -56(%rbp)
	movl	$1, -272(%rbp)
	movq	-256(%rbp), %rdi
	movl	-268(%rbp), %esi
	movl	-272(%rbp), %edx
	callq	__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
	xorl	%ecx, %ecx
	movb	%cl, %r8b
	leaq	-48(%rbp), %rax
	leaq	-32(%rbp), %rdi
	movq	-256(%rbp), %r9
	movq	%r9, -64(%rbp)
	movq	-64(%rbp), %r9
	movq	16(%r9), %r9
	movq	%r9, -280(%rbp)
	movq	-256(%rbp), %r9
	movl	8(%r9), %ecx
	movl	%ecx, -284(%rbp)
	movb	$0, -285(%rbp)
	movq	%rdi, -80(%rbp)
	movq	-80(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	%rdi, -296(%rbp)
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -304(%rbp)
	movq	-280(%rbp), %rax
	movq	%rax, -104(%rbp)
	testb	$1, %r8b
	jne	LBB186_1
	jmp	LBB186_6
LBB186_1:
	leaq	-280(%rbp), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -308(%rbp)
LBB186_2:                               ## =>This Inner Loop Header: Depth=1
	movl	-308(%rbp), %eax
	cmpl	-284(%rbp), %eax
	jae	LBB186_5
## BB#3:                                ##   in Loop: Header=BB186_2 Depth=1
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	movq	-280(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	-296(%rbp), %rsi
	addq	%rcx, %rsi
	movq	%rsi, -120(%rbp)
	movl	-308(%rbp), %eax
	movl	%eax, %ecx
	movq	-304(%rbp), %rdi
	movsd	(%rdi,%rcx,8), %xmm0
	movsd	%xmm0, -128(%rbp)
	movsd	%xmm0, -336(%rbp)
	movq	%rsi, -168(%rbp)
	leaq	-336(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	movq	-168(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	8(%rcx), %rcx
	movq	%rcx, -152(%rbp)
	movq	%rsi, -160(%rbp)
	movq	-176(%rbp), %rcx
	movsd	(%rcx), %xmm0
	leaq	-160(%rbp), %rcx
	movq	%rcx, -136(%rbp)
	movsd	%xmm0, -144(%rbp)
	movq	-136(%rbp), %rcx
	movsd	(%rcx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx)
	movsd	-144(%rbp), %xmm0
	movsd	8(%rcx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rcx)
	movsd	-160(%rbp), %xmm0
	movsd	-152(%rbp), %xmm1
	movsd	%xmm0, -328(%rbp)
	movsd	%xmm1, -320(%rbp)
	movq	-328(%rbp), %rcx
	movq	%rcx, (%rdx)
	movq	-320(%rbp), %rcx
	movq	%rcx, 8(%rdx)
## BB#4:                                ##   in Loop: Header=BB186_2 Depth=1
	movl	-308(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -308(%rbp)
	jmp	LBB186_2
LBB186_5:
	jmp	LBB186_11
LBB186_6:
	movl	$0, -340(%rbp)
LBB186_7:                               ## =>This Inner Loop Header: Depth=1
	movl	-340(%rbp), %eax
	cmpl	-284(%rbp), %eax
	jae	LBB186_10
## BB#8:                                ##   in Loop: Header=BB186_7 Depth=1
	movl	-340(%rbp), %eax
	movl	%eax, %ecx
	movq	-280(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	-296(%rbp), %rsi
	addq	%rcx, %rsi
	movq	%rsi, -184(%rbp)
	movl	-340(%rbp), %eax
	movl	%eax, %ecx
	movq	-304(%rbp), %rdi
	movsd	(%rdi,%rcx,8), %xmm0
	movsd	%xmm0, -192(%rbp)
	movsd	%xmm0, -368(%rbp)
	movq	%rsi, -232(%rbp)
	leaq	-368(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	-232(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	8(%rcx), %rcx
	movq	%rcx, -216(%rbp)
	movq	%rsi, -224(%rbp)
	movq	-240(%rbp), %rcx
	movsd	(%rcx), %xmm0
	leaq	-224(%rbp), %rcx
	movq	%rcx, -200(%rbp)
	movsd	%xmm0, -208(%rbp)
	movq	-200(%rbp), %rcx
	movsd	(%rcx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx)
	movsd	-208(%rbp), %xmm0
	movsd	8(%rcx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rcx)
	movsd	-224(%rbp), %xmm0
	movsd	-216(%rbp), %xmm1
	movsd	%xmm0, -360(%rbp)
	movsd	%xmm1, -352(%rbp)
	movq	-360(%rbp), %rcx
	movq	%rcx, (%rdx)
	movq	-352(%rbp), %rcx
	movq	%rcx, 8(%rdx)
## BB#9:                                ##   in Loop: Header=BB186_7 Depth=1
	movl	-340(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -340(%rbp)
	jmp	LBB186_7
LBB186_10:
	jmp	LBB186_11
LBB186_11:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-8(%rbp), %rax
	jne	LBB186_13
## BB#12:                               ## %SP_return
	addq	$368, %rsp              ## imm = 0x170
	popq	%rbp
	retq
LBB186_13:                              ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.globl	__ZN4arma12promote_typeINSt3__17complexIdEEdE5checkEv
	.weak_def_can_be_hidden	__ZN4arma12promote_typeINSt3__17complexIdEEdE5checkEv
	.align	4, 0x90
__ZN4arma12promote_typeINSt3__17complexIdEEdE5checkEv: ## @_ZN4arma12promote_typeINSt3__17complexIdEEdE5checkEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp823:
	.cfi_def_cfa_offset 16
Ltmp824:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp825:
	.cfi_def_cfa_register %rbp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma5ProxyINS_3ColIdEEEC1ERKS2_
	.weak_def_can_be_hidden	__ZN4arma5ProxyINS_3ColIdEEEC1ERKS2_
	.align	4, 0x90
__ZN4arma5ProxyINS_3ColIdEEEC1ERKS2_:   ## @_ZN4arma5ProxyINS_3ColIdEEEC1ERKS2_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp826:
	.cfi_def_cfa_offset 16
Ltmp827:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp828:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN4arma5ProxyINS_3ColIdEEEC2ERKS2_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma21arma_assert_same_sizeINS_3ColINSt3__17complexIdEEEENS1_IdEEEEvRKNS_5ProxyIT_EERKNS7_IT0_EEPKc
	.weak_def_can_be_hidden	__ZN4arma21arma_assert_same_sizeINS_3ColINSt3__17complexIdEEEENS1_IdEEEEvRKNS_5ProxyIT_EERKNS7_IT0_EEPKc
	.align	4, 0x90
__ZN4arma21arma_assert_same_sizeINS_3ColINSt3__17complexIdEEEENS1_IdEEEEvRKNS_5ProxyIT_EERKNS7_IT0_EEPKc: ## @_ZN4arma21arma_assert_same_sizeINS_3ColINSt3__17complexIdEEEENS1_IdEEEEvRKNS_5ProxyIT_EERKNS7_IT0_EEPKc
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin189:
	.cfi_lsda 16, Lexception189
## BB#0:
	pushq	%rbp
Ltmp832:
	.cfi_def_cfa_offset 16
Ltmp833:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp834:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-40(%rbp), %rdx
	movq	%rdx, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	(%rdx), %rdx
	movl	(%rdx), %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rdx
	movq	%rdx, -24(%rbp)
	movl	$1, -64(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	(%rdx), %rdx
	movl	(%rdx), %eax
	movl	%eax, -68(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rdx, -8(%rbp)
	movl	$1, -72(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jne	LBB189_2
## BB#1:
	movl	-64(%rbp), %eax
	cmpl	-72(%rbp), %eax
	je	LBB189_5
LBB189_2:
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movq	-56(%rbp), %r9
	leaq	-96(%rbp), %rax
	movq	%rax, %rdi
	movq	%rax, -120(%rbp)        ## 8-byte Spill
	callq	__ZN4armaL25arma_incompat_size_stringEjjjjPKc
Ltmp829:
	movq	-120(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4armaL9arma_stopINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_
Ltmp830:
	jmp	LBB189_3
LBB189_3:
	leaq	-96(%rbp), %rdi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	jmp	LBB189_5
LBB189_4:
Ltmp831:
	leaq	-96(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -104(%rbp)
	movl	%ecx, -108(%rbp)
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	jmp	LBB189_6
LBB189_5:
	addq	$128, %rsp
	popq	%rbp
	retq
LBB189_6:
	movq	-104(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end189:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table189:
Lexception189:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset248 = Leh_func_begin189-Leh_func_begin189 ## >> Call Site 1 <<
	.long	Lset248
Lset249 = Ltmp829-Leh_func_begin189     ##   Call between Leh_func_begin189 and Ltmp829
	.long	Lset249
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset250 = Ltmp829-Leh_func_begin189     ## >> Call Site 2 <<
	.long	Lset250
Lset251 = Ltmp830-Ltmp829               ##   Call between Ltmp829 and Ltmp830
	.long	Lset251
Lset252 = Ltmp831-Leh_func_begin189     ##     jumps to Ltmp831
	.long	Lset252
	.byte	0                       ##   On action: cleanup
Lset253 = Ltmp830-Leh_func_begin189     ## >> Call Site 3 <<
	.long	Lset253
Lset254 = Leh_func_end189-Ltmp830       ##   Call between Ltmp830 and Leh_func_end189
	.long	Lset254
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
__ZN4armaL9arma_stopINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_: ## @_ZN4armaL9arma_stopINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin190:
	.cfi_lsda 16, Lexception190
## BB#0:
	pushq	%rbp
Ltmp843:
	.cfi_def_cfa_offset 16
Ltmp844:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp845:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	callq	__ZN4arma15get_stream_err1Ev
	movq	%rax, -16(%rbp)
	movl	$10, %ecx
	movq	%rax, %rdi
	movl	%ecx, %esi
	movl	%ecx, -60(%rbp)         ## 4-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	movq	-16(%rbp), %rdi
	leaq	L_.str33(%rip), %rsi
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	callq	__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE
	movq	%rax, %rdi
	movl	-60(%rbp), %esi         ## 4-byte Reload
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	movq	-16(%rbp), %rdi
	movl	-60(%rbp), %esi         ## 4-byte Reload
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
	movq	-16(%rbp), %rdi
	movq	%rax, -88(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv
	movl	$16, %ecx
	movl	%ecx, %edi
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	callq	___cxa_allocate_exception
	movq	%rax, %rdi
	movb	$1, -53(%rbp)
	movq	-8(%rbp), %rsi
Ltmp835:
	leaq	-40(%rbp), %rdx
	movq	%rdi, -104(%rbp)        ## 8-byte Spill
	movq	%rdx, %rdi
	movq	%rax, -112(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_
Ltmp836:
	jmp	LBB190_1
LBB190_1:
Ltmp838:
	leaq	-40(%rbp), %rsi
	movq	-112(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt11logic_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE
Ltmp839:
	jmp	LBB190_2
LBB190_2:
	movb	$0, -53(%rbp)
Ltmp840:
	movq	__ZTISt11logic_error@GOTPCREL(%rip), %rsi
	movq	__ZNSt11logic_errorD1Ev@GOTPCREL(%rip), %rdx
	movq	-104(%rbp), %rdi        ## 8-byte Reload
	callq	___cxa_throw
Ltmp841:
	jmp	LBB190_9
LBB190_3:
Ltmp837:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
	jmp	LBB190_5
LBB190_4:
Ltmp842:
	leaq	-40(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
LBB190_5:
	testb	$1, -53(%rbp)
	jne	LBB190_6
	jmp	LBB190_7
LBB190_6:
	movq	-104(%rbp), %rdi        ## 8-byte Reload
	callq	___cxa_free_exception
LBB190_7:
	jmp	LBB190_8
LBB190_8:
	movq	-48(%rbp), %rdi
	callq	__Unwind_Resume
LBB190_9:
	.cfi_endproc
Leh_func_end190:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table190:
Lexception190:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\266\200\200"          ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	52                      ## Call site table length
Lset255 = Leh_func_begin190-Leh_func_begin190 ## >> Call Site 1 <<
	.long	Lset255
Lset256 = Ltmp835-Leh_func_begin190     ##   Call between Leh_func_begin190 and Ltmp835
	.long	Lset256
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset257 = Ltmp835-Leh_func_begin190     ## >> Call Site 2 <<
	.long	Lset257
Lset258 = Ltmp836-Ltmp835               ##   Call between Ltmp835 and Ltmp836
	.long	Lset258
Lset259 = Ltmp837-Leh_func_begin190     ##     jumps to Ltmp837
	.long	Lset259
	.byte	0                       ##   On action: cleanup
Lset260 = Ltmp838-Leh_func_begin190     ## >> Call Site 3 <<
	.long	Lset260
Lset261 = Ltmp841-Ltmp838               ##   Call between Ltmp838 and Ltmp841
	.long	Lset261
Lset262 = Ltmp842-Leh_func_begin190     ##     jumps to Ltmp842
	.long	Lset262
	.byte	0                       ##   On action: cleanup
Lset263 = Ltmp841-Leh_func_begin190     ## >> Call Site 4 <<
	.long	Lset263
Lset264 = Leh_func_end190-Ltmp841       ##   Call between Ltmp841 and Leh_func_end190
	.long	Lset264
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__text,regular,pure_instructions
__ZN4armaL25arma_incompat_size_stringEjjjjPKc: ## @_ZN4armaL25arma_incompat_size_stringEjjjjPKc
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin191:
	.cfi_lsda 16, Lexception191
## BB#0:
	pushq	%rbp
Ltmp876:
	.cfi_def_cfa_offset 16
Ltmp877:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp878:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$888, %rsp              ## imm = 0x378
Ltmp879:
	.cfi_offset %rbx, -40
Ltmp880:
	.cfi_offset %r14, -32
Ltmp881:
	.cfi_offset %r15, -24
	movq	%rdi, %rax
	movl	%esi, -424(%rbp)
	movl	%edx, -428(%rbp)
	movl	%ecx, -432(%rbp)
	movl	%r8d, -436(%rbp)
	movq	%r9, -448(%rbp)
	leaq	-728(%rbp), %r9
	movq	%r9, -400(%rbp)
	movl	$24, -404(%rbp)
	movq	-400(%rbp), %r9
	movq	%r9, %r10
	subq	$-128, %r10
	movq	%r10, -392(%rbp)
	movq	%r10, -384(%rbp)
	movq	__ZTVNSt3__18ios_baseE@GOTPCREL(%rip), %r10
	addq	$16, %r10
	movq	%r10, 128(%r9)
	movq	__ZTVNSt3__19basic_iosIcNS_11char_traitsIcEEEE@GOTPCREL(%rip), %r10
	addq	$16, %r10
	movq	%r10, 128(%r9)
	movq	__ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE@GOTPCREL(%rip), %r10
	movq	%r10, %r11
	addq	$24, %r11
	movq	%r11, (%r9)
	movq	%r10, %r11
	addq	$104, %r11
	movq	%r11, 128(%r9)
	addq	$64, %r10
	movq	%r10, 16(%r9)
	movq	%r9, %r10
	addq	$24, %r10
	movq	%r9, -96(%rbp)
	movq	__ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE@GOTPCREL(%rip), %r11
	addq	$8, %r11
	movq	%r11, -104(%rbp)
	movq	%r10, -112(%rbp)
	movq	-96(%rbp), %r11
	movq	-104(%rbp), %rbx
	movq	%rbx, %r14
	addq	$8, %r14
	movq	%r11, -72(%rbp)
	movq	%r14, -80(%rbp)
	movq	%r10, -88(%rbp)
	movq	-72(%rbp), %r10
	movq	-80(%rbp), %r14
	movq	(%r14), %r15
	movq	%r15, (%r10)
	movq	8(%r14), %r14
	movq	-24(%r15), %r15
	movq	%r14, (%r10,%r15)
	movq	$0, 8(%r10)
	movq	(%r10), %r14
	movq	-24(%r14), %r14
	addq	%r14, %r10
	movq	-88(%rbp), %r14
	movq	%r10, -56(%rbp)
	movq	%r14, -64(%rbp)
	movq	-56(%rbp), %r10
Ltmp846:
	movq	%rdi, -752(%rbp)        ## 8-byte Spill
	movq	%r10, %rdi
	movq	%r14, %rsi
	movq	%rax, -760(%rbp)        ## 8-byte Spill
	movq	%r10, -768(%rbp)        ## 8-byte Spill
	movq	%r9, -776(%rbp)         ## 8-byte Spill
	movq	%rbx, -784(%rbp)        ## 8-byte Spill
	movq	%r11, -792(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__18ios_base4initEPv
Ltmp847:
	jmp	LBB191_1
LBB191_1:                               ## %_ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEEC2EPNS_15basic_streambufIcS2_EE.exit.i
	movq	-768(%rbp), %rax        ## 8-byte Reload
	movq	$0, 136(%rax)
	movl	$-1, 144(%rax)
	movq	-792(%rbp), %rcx        ## 8-byte Reload
	addq	$16, %rcx
	movq	-784(%rbp), %rdx        ## 8-byte Reload
	addq	$24, %rdx
	movq	%rcx, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-40(%rbp), %rcx
	movq	-784(%rbp), %rdx        ## 8-byte Reload
	movq	24(%rdx), %rsi
	movq	%rsi, (%rcx)
	movq	32(%rdx), %rdi
	movq	-24(%rsi), %rsi
	movq	%rdi, (%rcx,%rsi)
	movq	(%rdx), %rcx
	movq	-792(%rbp), %rsi        ## 8-byte Reload
	movq	%rcx, (%rsi)
	movq	40(%rdx), %rdi
	movq	-24(%rcx), %rcx
	movq	%rdi, (%rsi,%rcx)
	movq	48(%rdx), %rcx
	movq	%rcx, 16(%rsi)
	movq	__ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE@GOTPCREL(%rip), %rcx
	movq	%rcx, %rdi
	addq	$24, %rdi
	movq	-776(%rbp), %r8         ## 8-byte Reload
	movq	%rdi, (%r8)
	movq	%rcx, %rdi
	addq	$104, %rdi
	movq	%rdi, 128(%r8)
	addq	$64, %rcx
	movq	%rcx, 16(%r8)
	addq	$24, %r8
	movl	-404(%rbp), %r9d
	movq	%r8, -368(%rbp)
	movl	%r9d, -372(%rbp)
	movq	-368(%rbp), %rcx
	movq	%rcx, -312(%rbp)
	movl	%r9d, -316(%rbp)
	movq	-312(%rbp), %rcx
Ltmp849:
	movq	%rcx, %rdi
	movq	%rcx, -800(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev
Ltmp850:
	jmp	LBB191_2
LBB191_2:                               ## %.noexc.i
	movq	__ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE@GOTPCREL(%rip), %rax
	addq	$16, %rax
	movq	-800(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, (%rcx)
	addq	$64, %rcx
	movq	%rcx, -304(%rbp)
	movq	-304(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-288(%rbp), %rdx
	movq	%rdx, -280(%rbp)
	movq	-280(%rbp), %rdx
	movq	%rdx, -272(%rbp)
	movq	-272(%rbp), %rdx
	movq	%rdx, -264(%rbp)
	movq	%rax, -240(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, -248(%rbp)
	movl	$0, -252(%rbp)
	movq	%rcx, -808(%rbp)        ## 8-byte Spill
LBB191_3:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$3, -252(%rbp)
	jae	LBB191_5
## BB#4:                                ##   in Loop: Header=BB191_3 Depth=1
	movl	-252(%rbp), %eax
	movl	%eax, %ecx
	movq	-248(%rbp), %rdx
	movq	$0, (%rdx,%rcx,8)
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	LBB191_3
LBB191_5:                               ## %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1Ev.exit.i.i.i
	leaq	-344(%rbp), %rax
	movq	-800(%rbp), %rcx        ## 8-byte Reload
	movq	$0, 88(%rcx)
	movl	-316(%rbp), %edx
	movl	%edx, 96(%rcx)
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rsi
	movq	%rsi, -192(%rbp)
	movq	-192(%rbp), %rsi
	movq	%rsi, -184(%rbp)
	movq	-184(%rbp), %rsi
	movq	%rsi, -176(%rbp)
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -160(%rbp)
	movl	$0, -164(%rbp)
LBB191_6:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$3, -164(%rbp)
	jae	LBB191_8
## BB#7:                                ##   in Loop: Header=BB191_6 Depth=1
	movl	-164(%rbp), %eax
	movl	%eax, %ecx
	movq	-160(%rbp), %rdx
	movq	$0, (%rdx,%rcx,8)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	jmp	LBB191_6
LBB191_8:                               ## %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1Ev.exit3.i.i.i
Ltmp852:
	leaq	-344(%rbp), %rsi
	movq	-800(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE
Ltmp853:
	jmp	LBB191_14
LBB191_9:
Ltmp854:
	movl	%edx, %ecx
	movq	%rax, -352(%rbp)
	movl	%ecx, -356(%rbp)
	leaq	-344(%rbp), %rdi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	movq	-808(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	movq	-800(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev
	movq	-352(%rbp), %rax
	movl	-356(%rbp), %ecx
	movq	%rax, -816(%rbp)        ## 8-byte Spill
	movl	%ecx, -820(%rbp)        ## 4-byte Spill
	jmp	LBB191_12
LBB191_10:
Ltmp848:
	movl	%edx, %ecx
	movq	%rax, -416(%rbp)
	movl	%ecx, -420(%rbp)
	jmp	LBB191_13
LBB191_11:
Ltmp851:
	movl	%edx, %ecx
	movq	%rax, -816(%rbp)        ## 8-byte Spill
	movl	%ecx, -820(%rbp)        ## 4-byte Spill
	jmp	LBB191_12
LBB191_12:                              ## %.body.i
	movl	-820(%rbp), %eax        ## 4-byte Reload
	movq	-816(%rbp), %rcx        ## 8-byte Reload
	movq	__ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE@GOTPCREL(%rip), %rdx
	addq	$8, %rdx
	movq	%rcx, -416(%rbp)
	movl	%eax, -420(%rbp)
	movq	-776(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	callq	__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev
LBB191_13:
	movq	-776(%rbp), %rax        ## 8-byte Reload
	addq	$128, %rax
	movq	%rax, %rdi
	callq	__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev
	movq	-416(%rbp), %rax
	movq	%rax, -832(%rbp)        ## 8-byte Spill
	jmp	LBB191_28
LBB191_14:                              ## %_ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEC1Ej.exit
	leaq	-344(%rbp), %rdi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	leaq	-712(%rbp), %rdi
	movq	-448(%rbp), %rsi
Ltmp855:
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp856:
	movq	%rax, -840(%rbp)        ## 8-byte Spill
	jmp	LBB191_15
LBB191_15:
Ltmp857:
	leaq	L_.str42(%rip), %rsi
	movq	-840(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp858:
	movq	%rax, -848(%rbp)        ## 8-byte Spill
	jmp	LBB191_16
LBB191_16:
	movl	-424(%rbp), %esi
Ltmp859:
	movq	-848(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj
Ltmp860:
	movq	%rax, -856(%rbp)        ## 8-byte Spill
	jmp	LBB191_17
LBB191_17:
Ltmp861:
	movl	$120, %esi
	movq	-856(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
Ltmp862:
	movq	%rax, -864(%rbp)        ## 8-byte Spill
	jmp	LBB191_18
LBB191_18:
	movl	-428(%rbp), %esi
Ltmp863:
	movq	-864(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj
Ltmp864:
	movq	%rax, -872(%rbp)        ## 8-byte Spill
	jmp	LBB191_19
LBB191_19:
Ltmp865:
	leaq	L_.str43(%rip), %rsi
	movq	-872(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
Ltmp866:
	movq	%rax, -880(%rbp)        ## 8-byte Spill
	jmp	LBB191_20
LBB191_20:
	movl	-432(%rbp), %esi
Ltmp867:
	movq	-880(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj
Ltmp868:
	movq	%rax, -888(%rbp)        ## 8-byte Spill
	jmp	LBB191_21
LBB191_21:
Ltmp869:
	movl	$120, %esi
	movq	-888(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c
Ltmp870:
	movq	%rax, -896(%rbp)        ## 8-byte Spill
	jmp	LBB191_22
LBB191_22:
	movl	-436(%rbp), %esi
Ltmp871:
	movq	-896(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEj
Ltmp872:
	movq	%rax, -904(%rbp)        ## 8-byte Spill
	jmp	LBB191_23
LBB191_23:
	leaq	-728(%rbp), %rax
	movq	%rax, -32(%rbp)
	leaq	-704(%rbp), %rsi
Ltmp873:
	movq	-752(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv
Ltmp874:
	jmp	LBB191_24
LBB191_24:                              ## %_ZNKSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv.exit
	jmp	LBB191_25
LBB191_25:
	leaq	-728(%rbp), %rdi
	movl	$1, -744(%rbp)
	callq	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	movq	-760(%rbp), %rax        ## 8-byte Reload
	addq	$888, %rsp              ## imm = 0x378
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB191_26:
Ltmp875:
	leaq	-728(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -736(%rbp)
	movl	%ecx, -740(%rbp)
	callq	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
## BB#27:
	movq	-736(%rbp), %rax
	movq	%rax, -832(%rbp)        ## 8-byte Spill
LBB191_28:                              ## %unwind_resume
	movq	-832(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end191:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table191:
Lexception191:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\303\200"              ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	65                      ## Call site table length
Lset265 = Ltmp846-Leh_func_begin191     ## >> Call Site 1 <<
	.long	Lset265
Lset266 = Ltmp847-Ltmp846               ##   Call between Ltmp846 and Ltmp847
	.long	Lset266
Lset267 = Ltmp848-Leh_func_begin191     ##     jumps to Ltmp848
	.long	Lset267
	.byte	0                       ##   On action: cleanup
Lset268 = Ltmp849-Leh_func_begin191     ## >> Call Site 2 <<
	.long	Lset268
Lset269 = Ltmp850-Ltmp849               ##   Call between Ltmp849 and Ltmp850
	.long	Lset269
Lset270 = Ltmp851-Leh_func_begin191     ##     jumps to Ltmp851
	.long	Lset270
	.byte	0                       ##   On action: cleanup
Lset271 = Ltmp852-Leh_func_begin191     ## >> Call Site 3 <<
	.long	Lset271
Lset272 = Ltmp853-Ltmp852               ##   Call between Ltmp852 and Ltmp853
	.long	Lset272
Lset273 = Ltmp854-Leh_func_begin191     ##     jumps to Ltmp854
	.long	Lset273
	.byte	0                       ##   On action: cleanup
Lset274 = Ltmp855-Leh_func_begin191     ## >> Call Site 4 <<
	.long	Lset274
Lset275 = Ltmp874-Ltmp855               ##   Call between Ltmp855 and Ltmp874
	.long	Lset275
Lset276 = Ltmp875-Leh_func_begin191     ##     jumps to Ltmp875
	.long	Lset276
	.byte	0                       ##   On action: cleanup
Lset277 = Ltmp874-Leh_func_begin191     ## >> Call Site 5 <<
	.long	Lset277
Lset278 = Leh_func_end191-Ltmp874       ##   Call between Ltmp874 and Leh_func_end191
	.long	Lset278
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.weak_def_can_be_hidden	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.align	4, 0x90
__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev: ## @_ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp882:
	.cfi_def_cfa_offset 16
Ltmp883:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp884:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	__ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE@GOTPCREL(%rip), %rsi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
	movq	-16(%rbp), %rsi         ## 8-byte Reload
	addq	$128, %rsi
	movq	%rsi, %rdi
	callq	__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
	.weak_def_can_be_hidden	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
	.align	4, 0x90
__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev: ## @_ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp885:
	.cfi_def_cfa_offset 16
Ltmp886:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp887:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rax
	movq	%rax, (%rsi)
	movq	64(%rdi), %rax
	movq	(%rsi), %rcx
	movq	-24(%rcx), %rcx
	movq	%rax, (%rsi,%rcx)
	movq	72(%rdi), %rax
	movq	%rax, 16(%rsi)
	movq	%rsi, %rax
	addq	$24, %rax
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	addq	$8, %rcx
	movq	%rax, %rdi
	movq	%rcx, %rsi
	callq	__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.weak_def_can_be_hidden	__ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.align	4, 0x90
__ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev: ## @_ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp888:
	.cfi_def_cfa_offset 16
Ltmp889:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp890:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$-16, %rdi
	callq	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.weak_def_can_be_hidden	__ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.align	4, 0x90
__ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev: ## @_ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp891:
	.cfi_def_cfa_offset 16
Ltmp892:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp893:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	(%rdi), %rdi
	addq	-24(%rdi), %rax
	movq	%rax, %rdi
	callq	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.weak_def_can_be_hidden	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.align	4, 0x90
__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev: ## @_ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp894:
	.cfi_def_cfa_offset 16
Ltmp895:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp896:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	callq	__ZdlPv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.weak_def_can_be_hidden	__ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.align	4, 0x90
__ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev: ## @_ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp897:
	.cfi_def_cfa_offset 16
Ltmp898:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp899:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$-16, %rdi
	callq	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.weak_def_can_be_hidden	__ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.align	4, 0x90
__ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev: ## @_ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp900:
	.cfi_def_cfa_offset 16
Ltmp901:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp902:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	movq	(%rdi), %rdi
	addq	-24(%rdi), %rax
	movq	%rax, %rdi
	callq	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.weak_def_can_be_hidden	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.align	4, 0x90
__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev: ## @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp903:
	.cfi_def_cfa_offset 16
Ltmp904:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp905:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
	.weak_def_can_be_hidden	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
	.align	4, 0x90
__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev: ## @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp906:
	.cfi_def_cfa_offset 16
Ltmp907:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp908:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	__ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE@GOTPCREL(%rip), %rax
	addq	$16, %rax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rax, (%rdi)
	movq	%rdi, %rax
	addq	$64, %rax
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.weak_def_can_be_hidden	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.align	4, 0x90
__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev: ## @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp909:
	.cfi_def_cfa_offset 16
Ltmp910:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp911:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	callq	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	callq	__ZdlPv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj
	.weak_def_can_be_hidden	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj
	.align	4, 0x90
__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj: ## @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp912:
	.cfi_def_cfa_offset 16
Ltmp913:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp914:
	.cfi_def_cfa_register %rbp
	subq	$800, %rsp              ## imm = 0x320
	movq	%rdi, %rax
	movq	%rsi, -624(%rbp)
	movq	%rdx, -632(%rbp)
	movl	%ecx, -636(%rbp)
	movl	%r8d, -640(%rbp)
	movq	-624(%rbp), %rdx
	movq	88(%rdx), %rsi
	movq	%rdx, %r9
	movq	%r9, -616(%rbp)
	movq	-616(%rbp), %r9
	cmpq	48(%r9), %rsi
	movq	%rax, -656(%rbp)        ## 8-byte Spill
	movq	%rdi, -664(%rbp)        ## 8-byte Spill
	movq	%rdx, -672(%rbp)        ## 8-byte Spill
	jae	LBB202_2
## BB#1:
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	-672(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, 88(%rcx)
LBB202_2:
	movl	-640(%rbp), %eax
	andl	$24, %eax
	cmpl	$0, %eax
	jne	LBB202_4
## BB#3:
	xorl	%esi, %esi
	movl	$128, %eax
	movl	%eax, %edx
	movq	-664(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -32(%rbp)
	movq	$-1, -40(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %r8
	movq	%rdi, -16(%rbp)
	movq	%r8, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, %r8
	movq	%rdi, -680(%rbp)        ## 8-byte Spill
	movq	%r8, %rdi
	callq	_memset
	movq	-24(%rbp), %rcx
	movq	-680(%rbp), %rdx        ## 8-byte Reload
	movq	%rcx, 128(%rdx)
	jmp	LBB202_37
LBB202_4:
	movl	-640(%rbp), %eax
	andl	$24, %eax
	cmpl	$24, %eax
	jne	LBB202_7
## BB#5:
	cmpl	$1, -636(%rbp)
	jne	LBB202_7
## BB#6:
	xorl	%esi, %esi
	movl	$128, %eax
	movl	%eax, %edx
	movq	-664(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -64(%rbp)
	movq	$-1, -72(%rbp)
	movq	-64(%rbp), %rdi
	movq	-72(%rbp), %r8
	movq	%rdi, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	-48(%rbp), %rdi
	movq	%rdi, %r8
	movq	%rdi, -688(%rbp)        ## 8-byte Spill
	movq	%r8, %rdi
	callq	_memset
	movq	-56(%rbp), %rcx
	movq	-688(%rbp), %rdx        ## 8-byte Reload
	movq	%rcx, 128(%rdx)
	jmp	LBB202_37
LBB202_7:
	movl	-636(%rbp), %eax
	movl	%eax, %ecx
	subl	$2, %ecx
	movl	%eax, -692(%rbp)        ## 4-byte Spill
	movl	%ecx, -696(%rbp)        ## 4-byte Spill
	je	LBB202_13
	jmp	LBB202_38
LBB202_38:
	movl	-692(%rbp), %eax        ## 4-byte Reload
	subl	$1, %eax
	movl	%eax, -700(%rbp)        ## 4-byte Spill
	je	LBB202_9
	jmp	LBB202_39
LBB202_39:
	movl	-692(%rbp), %eax        ## 4-byte Reload
	testl	%eax, %eax
	jne	LBB202_17
	jmp	LBB202_8
LBB202_8:
	movq	$0, -648(%rbp)
	jmp	LBB202_18
LBB202_9:
	movl	-640(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	LBB202_11
## BB#10:
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-672(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -88(%rbp)
	movq	-88(%rbp), %rcx
	movq	16(%rcx), %rcx
	subq	%rcx, %rax
	movq	%rax, -648(%rbp)
	jmp	LBB202_12
LBB202_11:
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	48(%rax), %rax
	movq	-672(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	40(%rcx), %rcx
	subq	%rcx, %rax
	movq	%rax, -648(%rbp)
LBB202_12:
	jmp	LBB202_18
LBB202_13:
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	88(%rax), %rcx
	addq	$64, %rax
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rdx
	movq	%rdx, -192(%rbp)
	movq	-192(%rbp), %rdx
	movq	%rdx, -184(%rbp)
	movq	-184(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rcx, -712(%rbp)        ## 8-byte Spill
	movq	%rax, -720(%rbp)        ## 8-byte Spill
	je	LBB202_15
## BB#14:
	movq	-720(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, -120(%rbp)
	movq	-120(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -728(%rbp)        ## 8-byte Spill
	jmp	LBB202_16
LBB202_15:
	movq	-720(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rcx
	movq	%rcx, -168(%rbp)
	movq	-168(%rbp), %rcx
	movq	%rcx, -160(%rbp)
	movq	-160(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -152(%rbp)
	movq	-152(%rbp), %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, -728(%rbp)        ## 8-byte Spill
LBB202_16:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit1
	movq	-728(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	-712(%rbp), %rcx        ## 8-byte Reload
	subq	%rax, %rcx
	movq	%rcx, -648(%rbp)
	jmp	LBB202_18
LBB202_17:
	xorl	%esi, %esi
	movl	$128, %eax
	movl	%eax, %edx
	movq	-664(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -240(%rbp)
	movq	$-1, -248(%rbp)
	movq	-240(%rbp), %rdi
	movq	-248(%rbp), %r8
	movq	%rdi, -224(%rbp)
	movq	%r8, -232(%rbp)
	movq	-224(%rbp), %rdi
	movq	%rdi, %r8
	movq	%rdi, -736(%rbp)        ## 8-byte Spill
	movq	%r8, %rdi
	callq	_memset
	movq	-232(%rbp), %rcx
	movq	-736(%rbp), %rdx        ## 8-byte Reload
	movq	%rcx, 128(%rdx)
	jmp	LBB202_37
LBB202_18:
	movq	-632(%rbp), %rax
	movq	-648(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -648(%rbp)
	cmpq	$0, -648(%rbp)
	jl	LBB202_23
## BB#19:
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	88(%rax), %rcx
	addq	$64, %rax
	movq	%rax, -360(%rbp)
	movq	-360(%rbp), %rax
	movq	%rax, -352(%rbp)
	movq	-352(%rbp), %rax
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rdx
	movq	%rdx, -336(%rbp)
	movq	-336(%rbp), %rdx
	movq	%rdx, -328(%rbp)
	movq	-328(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rcx, -744(%rbp)        ## 8-byte Spill
	movq	%rax, -752(%rbp)        ## 8-byte Spill
	je	LBB202_21
## BB#20:
	movq	-752(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rcx
	movq	%rcx, -272(%rbp)
	movq	-272(%rbp), %rcx
	movq	%rcx, -264(%rbp)
	movq	-264(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -760(%rbp)        ## 8-byte Spill
	jmp	LBB202_22
LBB202_21:
	movq	-752(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -320(%rbp)
	movq	-320(%rbp), %rcx
	movq	%rcx, -312(%rbp)
	movq	-312(%rbp), %rcx
	movq	%rcx, -304(%rbp)
	movq	-304(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -296(%rbp)
	movq	-296(%rbp), %rcx
	movq	%rcx, -288(%rbp)
	movq	-288(%rbp), %rcx
	movq	%rcx, -760(%rbp)        ## 8-byte Spill
LBB202_22:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit
	movq	-760(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rax
	movq	-744(%rbp), %rcx        ## 8-byte Reload
	subq	%rax, %rcx
	cmpq	-648(%rbp), %rcx
	jge	LBB202_24
LBB202_23:
	xorl	%esi, %esi
	movl	$128, %eax
	movl	%eax, %edx
	movq	-664(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -384(%rbp)
	movq	$-1, -392(%rbp)
	movq	-384(%rbp), %rdi
	movq	-392(%rbp), %r8
	movq	%rdi, -368(%rbp)
	movq	%r8, -376(%rbp)
	movq	-368(%rbp), %rdi
	movq	%rdi, %r8
	movq	%rdi, -768(%rbp)        ## 8-byte Spill
	movq	%r8, %rdi
	callq	_memset
	movq	-376(%rbp), %rcx
	movq	-768(%rbp), %rdx        ## 8-byte Reload
	movq	%rcx, 128(%rdx)
	jmp	LBB202_37
LBB202_24:
	cmpq	$0, -648(%rbp)
	je	LBB202_32
## BB#25:
	movl	-640(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	LBB202_28
## BB#26:
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -400(%rbp)
	movq	-400(%rbp), %rax
	cmpq	$0, 24(%rax)
	jne	LBB202_28
## BB#27:
	xorl	%esi, %esi
	movl	$128, %eax
	movl	%eax, %edx
	movq	-664(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -424(%rbp)
	movq	$-1, -432(%rbp)
	movq	-424(%rbp), %rdi
	movq	-432(%rbp), %r8
	movq	%rdi, -408(%rbp)
	movq	%r8, -416(%rbp)
	movq	-408(%rbp), %rdi
	movq	%rdi, %r8
	movq	%rdi, -776(%rbp)        ## 8-byte Spill
	movq	%r8, %rdi
	callq	_memset
	movq	-416(%rbp), %rcx
	movq	-776(%rbp), %rdx        ## 8-byte Reload
	movq	%rcx, 128(%rdx)
	jmp	LBB202_37
LBB202_28:
	movl	-640(%rbp), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	je	LBB202_31
## BB#29:
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -440(%rbp)
	movq	-440(%rbp), %rax
	cmpq	$0, 48(%rax)
	jne	LBB202_31
## BB#30:
	xorl	%esi, %esi
	movl	$128, %eax
	movl	%eax, %edx
	movq	-664(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -464(%rbp)
	movq	$-1, -472(%rbp)
	movq	-464(%rbp), %rdi
	movq	-472(%rbp), %r8
	movq	%rdi, -448(%rbp)
	movq	%r8, -456(%rbp)
	movq	-448(%rbp), %rdi
	movq	%rdi, %r8
	movq	%rdi, -784(%rbp)        ## 8-byte Spill
	movq	%r8, %rdi
	callq	_memset
	movq	-456(%rbp), %rcx
	movq	-784(%rbp), %rdx        ## 8-byte Reload
	movq	%rcx, 128(%rdx)
	jmp	LBB202_37
LBB202_31:
	jmp	LBB202_32
LBB202_32:
	movl	-640(%rbp), %eax
	andl	$8, %eax
	cmpl	$0, %eax
	je	LBB202_34
## BB#33:
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	-672(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -480(%rbp)
	movq	-480(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	-672(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -488(%rbp)
	movq	-488(%rbp), %rdx
	movq	16(%rdx), %rdx
	addq	-648(%rbp), %rdx
	movq	-672(%rbp), %rsi        ## 8-byte Reload
	movq	88(%rsi), %rdi
	movq	%rax, -496(%rbp)
	movq	%rcx, -504(%rbp)
	movq	%rdx, -512(%rbp)
	movq	%rdi, -520(%rbp)
	movq	-496(%rbp), %rax
	movq	-504(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movq	-512(%rbp), %rcx
	movq	%rcx, 24(%rax)
	movq	-520(%rbp), %rcx
	movq	%rcx, 32(%rax)
LBB202_34:
	movl	-640(%rbp), %eax
	andl	$16, %eax
	cmpl	$0, %eax
	je	LBB202_36
## BB#35:
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	-672(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -528(%rbp)
	movq	-528(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	-672(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -536(%rbp)
	movq	-536(%rbp), %rdx
	movq	56(%rdx), %rdx
	movq	%rax, -544(%rbp)
	movq	%rcx, -552(%rbp)
	movq	%rdx, -560(%rbp)
	movq	-544(%rbp), %rax
	movq	-552(%rbp), %rcx
	movq	%rcx, 48(%rax)
	movq	%rcx, 40(%rax)
	movq	-560(%rbp), %rcx
	movq	%rcx, 56(%rax)
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	-648(%rbp), %rcx
	movl	%ecx, %esi
	movq	%rax, -568(%rbp)
	movl	%esi, -572(%rbp)
	movq	-568(%rbp), %rax
	movl	-572(%rbp), %esi
	movq	48(%rax), %rcx
	movslq	%esi, %rdx
	addq	%rdx, %rcx
	movq	%rcx, 48(%rax)
LBB202_36:
	xorl	%esi, %esi
	movl	$128, %eax
	movl	%eax, %edx
	movq	-648(%rbp), %rcx
	movq	-664(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -600(%rbp)
	movq	%rcx, -608(%rbp)
	movq	-600(%rbp), %rcx
	movq	-608(%rbp), %r8
	movq	%rcx, -584(%rbp)
	movq	%r8, -592(%rbp)
	movq	-584(%rbp), %rcx
	movq	%rcx, %r8
	movq	%r8, %rdi
	movq	%rcx, -792(%rbp)        ## 8-byte Spill
	callq	_memset
	movq	-592(%rbp), %rcx
	movq	-792(%rbp), %rdx        ## 8-byte Reload
	movq	%rcx, 128(%rdx)
LBB202_37:
	movq	-656(%rbp), %rax        ## 8-byte Reload
	addq	$800, %rsp              ## imm = 0x320
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj
	.weak_def_can_be_hidden	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj
	.align	4, 0x90
__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj: ## @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp915:
	.cfi_def_cfa_offset 16
Ltmp916:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp917:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	leaq	16(%rbp), %rcx
	xorl	%r8d, %r8d
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movq	-16(%rbp), %rsi
	movq	(%rsi), %r9
	movq	32(%r9), %r9
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	128(%rcx), %rdx
	movl	-20(%rbp), %r10d
	movl	%r8d, %ecx
	movl	%r10d, %r8d
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	callq	*%r9
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv
	.weak_def_can_be_hidden	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv
	.align	4, 0x90
__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv: ## @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp918:
	.cfi_def_cfa_offset 16
Ltmp919:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp920:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -120(%rbp)
	movq	-120(%rbp), %rdi
	movq	88(%rdi), %rax
	movq	%rdi, %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	cmpq	48(%rcx), %rax
	movq	%rdi, -128(%rbp)        ## 8-byte Spill
	jae	LBB204_2
## BB#1:
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, 88(%rcx)
LBB204_2:
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movl	96(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	LBB204_8
## BB#3:
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	32(%rax), %rax
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	cmpq	88(%rcx), %rax
	jae	LBB204_5
## BB#4:
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	-128(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	24(%rdx), %rdx
	movq	-128(%rbp), %rsi        ## 8-byte Reload
	movq	88(%rsi), %rdi
	movq	%rax, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rdi, -64(%rbp)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movq	-56(%rbp), %rcx
	movq	%rcx, 24(%rax)
	movq	-64(%rbp), %rcx
	movq	%rcx, 32(%rax)
LBB204_5:
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -80(%rbp)
	movq	-80(%rbp), %rcx
	cmpq	32(%rcx), %rax
	jae	LBB204_7
## BB#6:
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movb	(%rax), %cl
	movb	%cl, -89(%rbp)
	movzbl	-89(%rbp), %edx
	movl	%edx, -108(%rbp)
	jmp	LBB204_9
LBB204_7:
	jmp	LBB204_8
LBB204_8:
	movl	$-1, -108(%rbp)
LBB204_9:
	movl	-108(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi
	.weak_def_can_be_hidden	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi
	.align	4, 0x90
__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi: ## @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp921:
	.cfi_def_cfa_offset 16
Ltmp922:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp923:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -200(%rbp)
	movl	%esi, -204(%rbp)
	movq	-200(%rbp), %rdi
	movq	88(%rdi), %rax
	movq	%rdi, %rcx
	movq	%rcx, -184(%rbp)
	movq	-184(%rbp), %rcx
	cmpq	48(%rcx), %rax
	movq	%rdi, -216(%rbp)        ## 8-byte Spill
	jae	LBB205_2
## BB#1:
	movq	-216(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movq	-216(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, 88(%rcx)
LBB205_2:
	movq	-216(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	16(%rax), %rax
	movq	-216(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	cmpq	24(%rcx), %rax
	jae	LBB205_12
## BB#3:
	movl	-204(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$-1, -32(%rbp)
	movl	-28(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jne	LBB205_8
## BB#4:
	movq	-216(%rbp), %rax        ## 8-byte Reload
	movq	-216(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	-216(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	24(%rdx), %rdx
	addq	$-1, %rdx
	movq	-216(%rbp), %rsi        ## 8-byte Reload
	movq	88(%rsi), %rdi
	movq	%rax, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rdi, -80(%rbp)
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movq	-72(%rbp), %rcx
	movq	%rcx, 24(%rax)
	movq	-80(%rbp), %rcx
	movq	%rcx, 32(%rax)
	movl	-204(%rbp), %r8d
	movl	%r8d, -92(%rbp)
	movl	-92(%rbp), %r8d
	movl	%r8d, -84(%rbp)
	movl	$-1, -88(%rbp)
	movl	-84(%rbp), %r8d
	cmpl	-88(%rbp), %r8d
	jne	LBB205_6
## BB#5:
	xorl	%eax, %eax
	movl	%eax, -220(%rbp)        ## 4-byte Spill
	jmp	LBB205_7
LBB205_6:
	movl	-92(%rbp), %eax
	movl	%eax, -220(%rbp)        ## 4-byte Spill
LBB205_7:                               ## %_ZNSt3__111char_traitsIcE7not_eofEi.exit
	movl	-220(%rbp), %eax        ## 4-byte Reload
	movl	%eax, -188(%rbp)
	jmp	LBB205_13
LBB205_8:
	movq	-216(%rbp), %rax        ## 8-byte Reload
	movl	96(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	LBB205_10
## BB#9:
	movl	-204(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	movb	%al, %cl
	movq	-216(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -104(%rbp)
	movq	-104(%rbp), %rdx
	movq	24(%rdx), %rdx
	movb	-1(%rdx), %sil
	movb	%cl, -105(%rbp)
	movb	%sil, -106(%rbp)
	movsbl	-105(%rbp), %eax
	movsbl	-106(%rbp), %edi
	cmpl	%edi, %eax
	jne	LBB205_11
LBB205_10:
	movq	-216(%rbp), %rax        ## 8-byte Reload
	movq	-216(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -120(%rbp)
	movq	-120(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	-216(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -128(%rbp)
	movq	-128(%rbp), %rdx
	movq	24(%rdx), %rdx
	addq	$-1, %rdx
	movq	-216(%rbp), %rsi        ## 8-byte Reload
	movq	88(%rsi), %rdi
	movq	%rax, -136(%rbp)
	movq	%rcx, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	%rdi, -160(%rbp)
	movq	-136(%rbp), %rax
	movq	-144(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movq	-152(%rbp), %rcx
	movq	%rcx, 24(%rax)
	movq	-160(%rbp), %rcx
	movq	%rcx, 32(%rax)
	movl	-204(%rbp), %r8d
	movl	%r8d, -164(%rbp)
	movl	-164(%rbp), %r8d
	movb	%r8b, %r9b
	movq	%rsi, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	24(%rax), %rax
	movb	%r9b, (%rax)
	movl	-204(%rbp), %r8d
	movl	%r8d, -188(%rbp)
	jmp	LBB205_13
LBB205_11:
	jmp	LBB205_12
LBB205_12:
	movl	$-1, -188(%rbp)
LBB205_13:
	movl	-188(%rbp), %eax
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi
	.weak_def_can_be_hidden	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi
	.align	4, 0x90
__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi: ## @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin206:
	.cfi_lsda 16, Lexception206
## BB#0:
	pushq	%rbp
Ltmp929:
	.cfi_def_cfa_offset 16
Ltmp930:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp931:
	.cfi_def_cfa_register %rbp
	subq	$912, %rsp              ## imm = 0x390
	movq	%rdi, -648(%rbp)
	movl	%esi, -652(%rbp)
	movq	-648(%rbp), %rdi
	movl	-652(%rbp), %esi
	movl	%esi, -596(%rbp)
	movl	$-1, -600(%rbp)
	movl	-596(%rbp), %esi
	cmpl	-600(%rbp), %esi
	movq	%rdi, -736(%rbp)        ## 8-byte Spill
	je	LBB206_38
## BB#1:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-736(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	16(%rcx), %rcx
	subq	%rcx, %rax
	movq	%rax, -664(%rbp)
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-736(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	cmpq	56(%rcx), %rax
	jne	LBB206_26
## BB#2:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movl	96(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	jne	LBB206_4
## BB#3:
	movl	$-1, -636(%rbp)
	jmp	LBB206_42
LBB206_4:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	48(%rax), %rax
	movq	%rax, -744(%rbp)        ## 8-byte Spill
## BB#5:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -752(%rbp)        ## 8-byte Spill
## BB#6:
	movq	-744(%rbp), %rax        ## 8-byte Reload
	movq	-752(%rbp), %rcx        ## 8-byte Reload
	subq	%rcx, %rax
	movq	%rax, -672(%rbp)
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movq	88(%rax), %rdx
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rdx, -760(%rbp)        ## 8-byte Spill
	movq	%rax, -768(%rbp)        ## 8-byte Spill
## BB#7:
	movq	-760(%rbp), %rax        ## 8-byte Reload
	movq	-768(%rbp), %rcx        ## 8-byte Reload
	subq	%rcx, %rax
	movq	%rax, -696(%rbp)
	movq	-736(%rbp), %rax        ## 8-byte Reload
	addq	$64, %rax
Ltmp924:
	xorl	%esi, %esi
	movq	%rax, %rdi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc
Ltmp925:
	jmp	LBB206_8
LBB206_8:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	addq	$64, %rax
	movq	-736(%rbp), %rcx        ## 8-byte Reload
	addq	$64, %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rdx
	movq	%rdx, -88(%rbp)
	movq	-88(%rbp), %rdx
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rax, -776(%rbp)        ## 8-byte Spill
	movq	%rcx, -784(%rbp)        ## 8-byte Spill
	je	LBB206_10
## BB#9:
	movq	-784(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rcx
	andq	$-2, %rcx
	movq	%rcx, -792(%rbp)        ## 8-byte Spill
	jmp	LBB206_11
LBB206_10:
	movl	$23, %eax
	movl	%eax, %ecx
	movq	%rcx, -792(%rbp)        ## 8-byte Spill
	jmp	LBB206_11
LBB206_11:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityEv.exit
	movq	-792(%rbp), %rax        ## 8-byte Reload
	decq	%rax
	movq	-776(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -120(%rbp)
	movq	%rax, -128(%rbp)
	movq	-120(%rbp), %rdi
Ltmp926:
	xorl	%edx, %edx
	movq	%rax, %rsi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc
Ltmp927:
	jmp	LBB206_12
LBB206_12:                              ## %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEm.exit
	jmp	LBB206_13
LBB206_13:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	addq	$64, %rax
	movq	%rax, -240(%rbp)
	movq	-240(%rbp), %rax
	movq	%rax, -232(%rbp)
	movq	-232(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	-224(%rbp), %rcx
	movq	%rcx, -216(%rbp)
	movq	-216(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	-208(%rbp), %rcx
	movzbl	(%rcx), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movq	%rax, -800(%rbp)        ## 8-byte Spill
	je	LBB206_15
## BB#14:
	movq	-800(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rcx
	movq	%rcx, -152(%rbp)
	movq	-152(%rbp), %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -808(%rbp)        ## 8-byte Spill
	jmp	LBB206_16
LBB206_15:
	movq	-800(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rcx
	movq	%rcx, -192(%rbp)
	movq	-192(%rbp), %rcx
	movq	%rcx, -184(%rbp)
	movq	-184(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -176(%rbp)
	movq	-176(%rbp), %rcx
	movq	%rcx, -168(%rbp)
	movq	-168(%rbp), %rcx
	movq	%rcx, -808(%rbp)        ## 8-byte Spill
LBB206_16:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit2
	movq	-808(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -704(%rbp)
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movq	-704(%rbp), %rcx
	movq	-704(%rbp), %rdx
	movq	-736(%rbp), %rsi        ## 8-byte Reload
	addq	$64, %rsi
	movq	%rsi, -320(%rbp)
	movq	-320(%rbp), %rsi
	movq	%rsi, -312(%rbp)
	movq	-312(%rbp), %rdi
	movq	%rdi, -304(%rbp)
	movq	-304(%rbp), %rdi
	movq	%rdi, -296(%rbp)
	movq	-296(%rbp), %rdi
	movzbl	(%rdi), %r8d
	andl	$1, %r8d
	cmpl	$0, %r8d
	movq	%rax, -816(%rbp)        ## 8-byte Spill
	movq	%rcx, -824(%rbp)        ## 8-byte Spill
	movq	%rdx, -832(%rbp)        ## 8-byte Spill
	movq	%rsi, -840(%rbp)        ## 8-byte Spill
	je	LBB206_18
## BB#17:
	movq	-840(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rcx
	movq	%rcx, -256(%rbp)
	movq	-256(%rbp), %rcx
	movq	%rcx, -248(%rbp)
	movq	-248(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -848(%rbp)        ## 8-byte Spill
	jmp	LBB206_19
LBB206_18:
	movq	-840(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -288(%rbp)
	movq	-288(%rbp), %rcx
	movq	%rcx, -280(%rbp)
	movq	-280(%rbp), %rcx
	movq	%rcx, -272(%rbp)
	movq	-272(%rbp), %rcx
	movzbl	(%rcx), %edx
	sarl	$1, %edx
	movslq	%edx, %rcx
	movq	%rcx, -848(%rbp)        ## 8-byte Spill
LBB206_19:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv.exit
	movq	-848(%rbp), %rax        ## 8-byte Reload
	movq	-832(%rbp), %rcx        ## 8-byte Reload
	addq	%rax, %rcx
	movq	-816(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -328(%rbp)
	movq	-824(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -336(%rbp)
	movq	%rcx, -344(%rbp)
	movq	-328(%rbp), %rcx
	movq	-336(%rbp), %rsi
	movq	%rsi, 48(%rcx)
	movq	%rsi, 40(%rcx)
	movq	-344(%rbp), %rsi
	movq	%rsi, 56(%rcx)
## BB#20:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movq	-672(%rbp), %rcx
	movl	%ecx, %edx
	movq	%rax, -352(%rbp)
	movl	%edx, -356(%rbp)
	movq	-352(%rbp), %rax
	movl	-356(%rbp), %edx
	movq	48(%rax), %rcx
	movslq	%edx, %rsi
	addq	%rsi, %rcx
	movq	%rcx, 48(%rax)
## BB#21:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -368(%rbp)
	movq	-368(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -856(%rbp)        ## 8-byte Spill
## BB#22:
	movq	-856(%rbp), %rax        ## 8-byte Reload
	addq	-696(%rbp), %rax
	movq	-736(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, 88(%rcx)
	jmp	LBB206_25
LBB206_23:
Ltmp928:
	movl	%edx, %ecx
	movq	%rax, -680(%rbp)
	movl	%ecx, -684(%rbp)
## BB#24:
	movq	-680(%rbp), %rdi
	callq	___cxa_begin_catch
	movl	$-1, -636(%rbp)
	movl	$1, -708(%rbp)
	movq	%rax, -864(%rbp)        ## 8-byte Spill
	callq	___cxa_end_catch
	jmp	LBB206_42
LBB206_25:
	jmp	LBB206_26
LBB206_26:
	leaq	-408(%rbp), %rax
	leaq	-720(%rbp), %rcx
	movq	-736(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -376(%rbp)
	movq	-376(%rbp), %rdx
	movq	48(%rdx), %rdx
	addq	$1, %rdx
	movq	%rdx, -720(%rbp)
	movq	-736(%rbp), %rdx        ## 8-byte Reload
	addq	$88, %rdx
	movq	%rcx, -432(%rbp)
	movq	%rdx, -440(%rbp)
	movq	-432(%rbp), %rcx
	movq	-440(%rbp), %rdx
	movq	%rcx, -416(%rbp)
	movq	%rdx, -424(%rbp)
	movq	-416(%rbp), %rcx
	movq	-424(%rbp), %rdx
	movq	%rax, -384(%rbp)
	movq	%rcx, -392(%rbp)
	movq	%rdx, -400(%rbp)
	movq	-392(%rbp), %rax
	movq	(%rax), %rax
	movq	-400(%rbp), %rcx
	cmpq	(%rcx), %rax
	jae	LBB206_28
## BB#27:
	movq	-424(%rbp), %rax
	movq	%rax, -872(%rbp)        ## 8-byte Spill
	jmp	LBB206_29
LBB206_28:
	movq	-416(%rbp), %rax
	movq	%rax, -872(%rbp)        ## 8-byte Spill
LBB206_29:                              ## %_ZNSt3__13maxIPcEERKT_S4_S4_.exit
	movq	-872(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rax
	movq	-736(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, 88(%rcx)
	movl	96(%rcx), %edx
	andl	$8, %edx
	cmpl	$0, %edx
	je	LBB206_34
## BB#30:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	addq	$64, %rax
	movq	%rax, -560(%rbp)
	movq	-560(%rbp), %rax
	movq	%rax, -552(%rbp)
	movq	-552(%rbp), %rax
	movq	%rax, -544(%rbp)
	movq	-544(%rbp), %rcx
	movq	%rcx, -536(%rbp)
	movq	-536(%rbp), %rcx
	movq	%rcx, -528(%rbp)
	movq	-528(%rbp), %rcx
	movzbl	(%rcx), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movq	%rax, -880(%rbp)        ## 8-byte Spill
	je	LBB206_32
## BB#31:
	movq	-880(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -480(%rbp)
	movq	-480(%rbp), %rcx
	movq	%rcx, -472(%rbp)
	movq	-472(%rbp), %rcx
	movq	%rcx, -464(%rbp)
	movq	-464(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -888(%rbp)        ## 8-byte Spill
	jmp	LBB206_33
LBB206_32:
	movq	-880(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -520(%rbp)
	movq	-520(%rbp), %rcx
	movq	%rcx, -512(%rbp)
	movq	-512(%rbp), %rcx
	movq	%rcx, -504(%rbp)
	movq	-504(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -496(%rbp)
	movq	-496(%rbp), %rcx
	movq	%rcx, -488(%rbp)
	movq	-488(%rbp), %rcx
	movq	%rcx, -888(%rbp)        ## 8-byte Spill
LBB206_33:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit
	movq	-888(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -728(%rbp)
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movq	-728(%rbp), %rcx
	movq	-728(%rbp), %rdx
	addq	-664(%rbp), %rdx
	movq	-736(%rbp), %rsi        ## 8-byte Reload
	movq	88(%rsi), %rdi
	movq	%rax, -568(%rbp)
	movq	%rcx, -576(%rbp)
	movq	%rdx, -584(%rbp)
	movq	%rdi, -592(%rbp)
	movq	-568(%rbp), %rax
	movq	-576(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movq	-584(%rbp), %rcx
	movq	%rcx, 24(%rax)
	movq	-592(%rbp), %rcx
	movq	%rcx, 32(%rax)
LBB206_34:
	movq	-736(%rbp), %rax        ## 8-byte Reload
	movl	-652(%rbp), %ecx
	movb	%cl, %dl
	movq	%rax, -616(%rbp)
	movb	%dl, -617(%rbp)
	movq	-616(%rbp), %rax
	movq	48(%rax), %rsi
	cmpq	56(%rax), %rsi
	movq	%rax, -896(%rbp)        ## 8-byte Spill
	jne	LBB206_36
## BB#35:
	movq	-896(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	104(%rcx), %rcx
	movb	-617(%rbp), %dl
	movb	%dl, -602(%rbp)
	movzbl	-602(%rbp), %esi
	movq	%rax, %rdi
	callq	*%rcx
	movl	%eax, -608(%rbp)
	jmp	LBB206_37
LBB206_36:
	movb	-617(%rbp), %al
	movq	-896(%rbp), %rcx        ## 8-byte Reload
	movq	48(%rcx), %rdx
	movq	%rdx, %rsi
	addq	$1, %rsi
	movq	%rsi, 48(%rcx)
	movb	%al, (%rdx)
	movb	-617(%rbp), %al
	movb	%al, -601(%rbp)
	movzbl	-601(%rbp), %edi
	movl	%edi, -608(%rbp)
LBB206_37:                              ## %_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5sputcEc.exit
	movl	-608(%rbp), %eax
	movl	%eax, -636(%rbp)
	jmp	LBB206_42
LBB206_38:
	movl	-652(%rbp), %eax
	movl	%eax, -632(%rbp)
	movl	-632(%rbp), %eax
	movl	%eax, -624(%rbp)
	movl	$-1, -628(%rbp)
	movl	-624(%rbp), %eax
	cmpl	-628(%rbp), %eax
	jne	LBB206_40
## BB#39:
	xorl	%eax, %eax
	movl	%eax, -900(%rbp)        ## 4-byte Spill
	jmp	LBB206_41
LBB206_40:
	movl	-632(%rbp), %eax
	movl	%eax, -900(%rbp)        ## 4-byte Spill
LBB206_41:                              ## %_ZNSt3__111char_traitsIcE7not_eofEi.exit
	movl	-900(%rbp), %eax        ## 4-byte Reload
	movl	%eax, -636(%rbp)
LBB206_42:
	movl	-636(%rbp), %eax
	addq	$912, %rsp              ## imm = 0x390
	popq	%rbp
	retq
	.cfi_endproc
Leh_func_end206:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table206:
Lexception206:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\242\200\200"          ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	26                      ## Call site table length
Lset279 = Ltmp924-Leh_func_begin206     ## >> Call Site 1 <<
	.long	Lset279
Lset280 = Ltmp927-Ltmp924               ##   Call between Ltmp924 and Ltmp927
	.long	Lset280
Lset281 = Ltmp928-Leh_func_begin206     ##     jumps to Ltmp928
	.long	Lset281
	.byte	1                       ##   On action: 1
Lset282 = Ltmp927-Leh_func_begin206     ## >> Call Site 2 <<
	.long	Lset282
Lset283 = Leh_func_end206-Ltmp927       ##   Call between Ltmp927 and Leh_func_end206
	.long	Lset283
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv
	.weak_def_can_be_hidden	__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv
	.align	4, 0x90
__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv: ## @_ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp932:
	.cfi_def_cfa_offset 16
Ltmp933:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp934:
	.cfi_def_cfa_register %rbp
	subq	$688, %rsp              ## imm = 0x2B0
	movq	%rdi, %rax
	movq	%rsi, -608(%rbp)
	movq	-608(%rbp), %rsi
	movl	96(%rsi), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	movq	%rax, -664(%rbp)        ## 8-byte Spill
	movq	%rdi, -672(%rbp)        ## 8-byte Spill
	movq	%rsi, -680(%rbp)        ## 8-byte Spill
	je	LBB207_4
## BB#1:
	movq	-680(%rbp), %rax        ## 8-byte Reload
	movq	88(%rax), %rcx
	movq	%rax, -600(%rbp)
	movq	-600(%rbp), %rax
	cmpq	48(%rax), %rcx
	jae	LBB207_3
## BB#2:
	movq	-680(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rax
	movq	48(%rax), %rax
	movq	-680(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, 88(%rcx)
LBB207_3:
	leaq	-64(%rbp), %rax
	leaq	-88(%rbp), %rcx
	leaq	-616(%rbp), %rdx
	movq	-680(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rsi
	movq	40(%rsi), %rsi
	movq	-680(%rbp), %rdi        ## 8-byte Reload
	movq	88(%rdi), %r8
	addq	$64, %rdi
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -8(%rbp)
	movq	-672(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%r8, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	-168(%rbp), %rdx
	movq	-176(%rbp), %rsi
	movq	-184(%rbp), %r8
	movq	-192(%rbp), %r9
	movq	%rdx, -128(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%r8, -144(%rbp)
	movq	%r9, -152(%rbp)
	movq	-128(%rbp), %rdx
	movq	%rdx, -120(%rbp)
	movq	-120(%rbp), %rsi
	movq	%rsi, -96(%rbp)
	movq	-96(%rbp), %rsi
	movq	%rcx, -80(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rax, -56(%rbp)
	movq	-136(%rbp), %rsi
	movq	-144(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rdx
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_
	jmp	LBB207_11
LBB207_4:
	movq	-680(%rbp), %rax        ## 8-byte Reload
	movl	96(%rax), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	je	LBB207_6
## BB#5:
	leaq	-272(%rbp), %rax
	leaq	-296(%rbp), %rcx
	leaq	-632(%rbp), %rdx
	movq	-680(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -200(%rbp)
	movq	-200(%rbp), %rsi
	movq	16(%rsi), %rsi
	movq	-680(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -208(%rbp)
	movq	-208(%rbp), %rdi
	movq	32(%rdi), %rdi
	movq	-680(%rbp), %r8         ## 8-byte Reload
	addq	$64, %r8
	movq	%r8, -248(%rbp)
	movq	-248(%rbp), %r8
	movq	%r8, -232(%rbp)
	movq	-232(%rbp), %r8
	movq	%r8, -224(%rbp)
	movq	-224(%rbp), %r8
	movq	%r8, -216(%rbp)
	movq	-672(%rbp), %r8         ## 8-byte Reload
	movq	%r8, -376(%rbp)
	movq	%rsi, -384(%rbp)
	movq	%rdi, -392(%rbp)
	movq	%rdx, -400(%rbp)
	movq	-376(%rbp), %rdx
	movq	-384(%rbp), %rsi
	movq	-392(%rbp), %rdi
	movq	-400(%rbp), %r9
	movq	%rdx, -336(%rbp)
	movq	%rsi, -344(%rbp)
	movq	%rdi, -352(%rbp)
	movq	%r9, -360(%rbp)
	movq	-336(%rbp), %rdx
	movq	%rdx, -328(%rbp)
	movq	-328(%rbp), %rsi
	movq	%rsi, -304(%rbp)
	movq	-304(%rbp), %rsi
	movq	%rcx, -288(%rbp)
	movq	%rsi, -280(%rbp)
	movq	%rax, -264(%rbp)
	movq	-344(%rbp), %rsi
	movq	-352(%rbp), %rax
	movq	%rdx, %rdi
	movq	%rax, %rdx
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_
	jmp	LBB207_11
LBB207_6:
	jmp	LBB207_7
LBB207_7:
	leaq	-496(%rbp), %rax
	leaq	-520(%rbp), %rcx
	leaq	-648(%rbp), %rdx
	movq	-680(%rbp), %rsi        ## 8-byte Reload
	addq	$64, %rsi
	movq	%rsi, -440(%rbp)
	movq	-440(%rbp), %rsi
	movq	%rsi, -424(%rbp)
	movq	-424(%rbp), %rsi
	movq	%rsi, -416(%rbp)
	movq	-416(%rbp), %rsi
	movq	%rsi, -408(%rbp)
	movq	-672(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -584(%rbp)
	movq	%rdx, -592(%rbp)
	movq	-584(%rbp), %rdx
	movq	-592(%rbp), %rdi
	movq	%rdx, -560(%rbp)
	movq	%rdi, -568(%rbp)
	movq	-560(%rbp), %rdx
	movq	%rdx, -552(%rbp)
	movq	-552(%rbp), %rdi
	movq	%rdi, -528(%rbp)
	movq	-528(%rbp), %rdi
	movq	%rcx, -512(%rbp)
	movq	%rdi, -504(%rbp)
	movq	%rax, -488(%rbp)
	movq	%rdx, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movq	%rax, -448(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -472(%rbp)
	movl	$0, -476(%rbp)
LBB207_8:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$3, -476(%rbp)
	jae	LBB207_10
## BB#9:                                ##   in Loop: Header=BB207_8 Depth=1
	movl	-476(%rbp), %eax
	movl	%eax, %ecx
	movq	-472(%rbp), %rdx
	movq	$0, (%rdx,%rcx,8)
	movl	-476(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -476(%rbp)
	jmp	LBB207_8
LBB207_10:                              ## %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS4_.exit
	jmp	LBB207_11
LBB207_11:
	movq	-664(%rbp), %rax        ## 8-byte Reload
	addq	$688, %rsp              ## imm = 0x2B0
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_
	.weak_def_can_be_hidden	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_
	.align	4, 0x90
__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_: ## @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp935:
	.cfi_def_cfa_offset 16
Ltmp936:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp937:
	.cfi_def_cfa_register %rbp
	subq	$496, %rsp              ## imm = 0x1F0
	movq	%rdi, -424(%rbp)
	movq	%rsi, -432(%rbp)
	movq	%rdx, -440(%rbp)
	movq	-424(%rbp), %rdx
	movq	-432(%rbp), %rsi
	movq	-440(%rbp), %rdi
	movq	%rsi, -400(%rbp)
	movq	%rdi, -408(%rbp)
	movq	-400(%rbp), %rsi
	movq	-408(%rbp), %rdi
	movq	%rsi, -384(%rbp)
	movq	%rdi, -392(%rbp)
	movq	-392(%rbp), %rsi
	movq	-384(%rbp), %rdi
	subq	%rdi, %rsi
	movq	%rsi, -448(%rbp)
	movq	-448(%rbp), %rsi
	movq	%rdx, -192(%rbp)
	movq	-192(%rbp), %rdi
	movq	%rdi, -184(%rbp)
	movq	-184(%rbp), %rdi
	movq	%rdi, -176(%rbp)
	movq	-176(%rbp), %rdi
	movq	%rdi, -168(%rbp)
	movq	-168(%rbp), %rdi
	movq	%rdi, -144(%rbp)
	movq	-144(%rbp), %rdi
	movq	%rdi, -136(%rbp)
	movq	-136(%rbp), %rdi
	movq	%rdi, -120(%rbp)
	movq	$-1, -200(%rbp)
	movq	-200(%rbp), %rdi
	subq	$16, %rdi
	cmpq	%rdi, %rsi
	movq	%rdx, -480(%rbp)        ## 8-byte Spill
	jbe	LBB208_2
## BB#1:
	movq	-480(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv
LBB208_2:
	cmpq	$23, -448(%rbp)
	jae	LBB208_4
## BB#3:
	movq	-448(%rbp), %rax
	movq	-480(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -24(%rbp)
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdx
	shlq	$1, %rdx
	movb	%dl, %sil
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movb	%sil, (%rax)
	movq	%rcx, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -456(%rbp)
	jmp	LBB208_8
LBB208_4:
	movq	-448(%rbp), %rax
	movq	%rax, -88(%rbp)
	cmpq	$23, -88(%rbp)
	jae	LBB208_6
## BB#5:
	movl	$23, %eax
	movl	%eax, %ecx
	movq	%rcx, -488(%rbp)        ## 8-byte Spill
	jmp	LBB208_7
LBB208_6:
	movq	-88(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	addq	$15, %rax
	andq	$-16, %rax
	movq	%rax, -488(%rbp)        ## 8-byte Spill
LBB208_7:                               ## %_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE11__recommendEm.exit
	movq	-488(%rbp), %rax        ## 8-byte Reload
	subq	$1, %rax
	movq	%rax, -464(%rbp)
	movq	-480(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rcx
	movq	-464(%rbp), %rdx
	addq	$1, %rdx
	movq	%rcx, -240(%rbp)
	movq	%rdx, -248(%rbp)
	movq	-240(%rbp), %rcx
	movq	-248(%rbp), %rdx
	movq	%rcx, -216(%rbp)
	movq	%rdx, -224(%rbp)
	movq	$0, -232(%rbp)
	movq	-224(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	-208(%rbp), %rdi
	callq	__Znwm
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movq	-480(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -272(%rbp)
	movq	%rax, -280(%rbp)
	movq	-272(%rbp), %rax
	movq	-280(%rbp), %rdx
	movq	%rax, -264(%rbp)
	movq	-264(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rax
	movq	%rdx, 16(%rax)
	movq	-464(%rbp), %rax
	addq	$1, %rax
	movq	%rcx, -304(%rbp)
	movq	%rax, -312(%rbp)
	movq	-304(%rbp), %rax
	movq	-312(%rbp), %rdx
	orq	$1, %rdx
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	-288(%rbp), %rax
	movq	%rdx, (%rax)
	movq	-448(%rbp), %rax
	movq	%rcx, -336(%rbp)
	movq	%rax, -344(%rbp)
	movq	-336(%rbp), %rax
	movq	-344(%rbp), %rdx
	movq	%rax, -328(%rbp)
	movq	-328(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	-320(%rbp), %rax
	movq	%rdx, 8(%rax)
LBB208_8:
	jmp	LBB208_9
LBB208_9:                               ## =>This Inner Loop Header: Depth=1
	movq	-432(%rbp), %rax
	cmpq	-440(%rbp), %rax
	je	LBB208_12
## BB#10:                               ##   in Loop: Header=BB208_9 Depth=1
	movq	-456(%rbp), %rax
	movq	-432(%rbp), %rcx
	movq	%rax, -352(%rbp)
	movq	%rcx, -360(%rbp)
	movq	-360(%rbp), %rax
	movb	(%rax), %dl
	movq	-352(%rbp), %rax
	movb	%dl, (%rax)
## BB#11:                               ##   in Loop: Header=BB208_9 Depth=1
	movq	-432(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -432(%rbp)
	movq	-456(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -456(%rbp)
	jmp	LBB208_9
LBB208_12:
	leaq	-465(%rbp), %rax
	movq	-456(%rbp), %rcx
	movb	$0, -465(%rbp)
	movq	%rcx, -368(%rbp)
	movq	%rax, -376(%rbp)
	movq	-376(%rbp), %rax
	movb	(%rax), %dl
	movq	-368(%rbp), %rax
	movb	%dl, (%rax)
	addq	$496, %rsp              ## imm = 0x1F0
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE
	.weak_def_can_be_hidden	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE
	.align	4, 0x90
__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE: ## @_ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp938:
	.cfi_def_cfa_offset 16
Ltmp939:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp940:
	.cfi_def_cfa_register %rbp
	subq	$1312, %rsp             ## imm = 0x520
	movq	%rdi, -1064(%rbp)
	movq	%rsi, -1072(%rbp)
	movq	-1064(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$64, %rdi
	movq	-1072(%rbp), %rax
	movq	%rsi, -1088(%rbp)       ## 8-byte Spill
	movq	%rax, %rsi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_
	movq	-1088(%rbp), %rsi       ## 8-byte Reload
	movq	$0, 88(%rsi)
	movl	96(%rsi), %ecx
	andl	$8, %ecx
	cmpl	$0, %ecx
	movq	%rax, -1096(%rbp)       ## 8-byte Spill
	je	LBB209_14
## BB#1:
	movq	-1088(%rbp), %rax       ## 8-byte Reload
	addq	$64, %rax
	movq	%rax, -1056(%rbp)
	movq	-1056(%rbp), %rax
	movq	%rax, -1048(%rbp)
	movq	-1048(%rbp), %rax
	movq	%rax, -1040(%rbp)
	movq	-1040(%rbp), %rcx
	movq	%rcx, -1032(%rbp)
	movq	-1032(%rbp), %rcx
	movq	%rcx, -1024(%rbp)
	movq	-1024(%rbp), %rcx
	movzbl	(%rcx), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movq	%rax, -1104(%rbp)       ## 8-byte Spill
	je	LBB209_3
## BB#2:
	movq	-1104(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -976(%rbp)
	movq	-976(%rbp), %rcx
	movq	%rcx, -968(%rbp)
	movq	-968(%rbp), %rcx
	movq	%rcx, -960(%rbp)
	movq	-960(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -1112(%rbp)       ## 8-byte Spill
	jmp	LBB209_4
LBB209_3:
	movq	-1104(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -1016(%rbp)
	movq	-1016(%rbp), %rcx
	movq	%rcx, -1008(%rbp)
	movq	-1008(%rbp), %rcx
	movq	%rcx, -1000(%rbp)
	movq	-1000(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -992(%rbp)
	movq	-992(%rbp), %rcx
	movq	%rcx, -984(%rbp)
	movq	-984(%rbp), %rcx
	movq	%rcx, -1112(%rbp)       ## 8-byte Spill
LBB209_4:                               ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit
	movq	-1112(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -952(%rbp)
	movq	-952(%rbp), %rax
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	addq	$64, %rcx
	movq	%rcx, -584(%rbp)
	movq	-584(%rbp), %rcx
	movq	%rcx, -576(%rbp)
	movq	-576(%rbp), %rdx
	movq	%rdx, -568(%rbp)
	movq	-568(%rbp), %rdx
	movq	%rdx, -560(%rbp)
	movq	-560(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rax, -1120(%rbp)       ## 8-byte Spill
	movq	%rcx, -1128(%rbp)       ## 8-byte Spill
	je	LBB209_6
## BB#5:
	movq	-1128(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -528(%rbp)
	movq	-528(%rbp), %rcx
	movq	%rcx, -520(%rbp)
	movq	-520(%rbp), %rcx
	movq	%rcx, -512(%rbp)
	movq	-512(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -1136(%rbp)       ## 8-byte Spill
	jmp	LBB209_7
LBB209_6:
	movq	-1128(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -552(%rbp)
	movq	-552(%rbp), %rcx
	movq	%rcx, -544(%rbp)
	movq	-544(%rbp), %rcx
	movq	%rcx, -536(%rbp)
	movq	-536(%rbp), %rcx
	movzbl	(%rcx), %edx
	sarl	$1, %edx
	movslq	%edx, %rcx
	movq	%rcx, -1136(%rbp)       ## 8-byte Spill
LBB209_7:                               ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv.exit3
	movq	-1136(%rbp), %rax       ## 8-byte Reload
	movq	-1120(%rbp), %rcx       ## 8-byte Reload
	addq	%rax, %rcx
	movq	-1088(%rbp), %rax       ## 8-byte Reload
	movq	%rcx, 88(%rax)
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	addq	$64, %rcx
	movq	%rcx, -112(%rbp)
	movq	-112(%rbp), %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rdx
	movq	%rdx, -88(%rbp)
	movq	-88(%rbp), %rdx
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rax, -1144(%rbp)       ## 8-byte Spill
	movq	%rcx, -1152(%rbp)       ## 8-byte Spill
	je	LBB209_9
## BB#8:
	movq	-1152(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -1160(%rbp)       ## 8-byte Spill
	jmp	LBB209_10
LBB209_9:
	movq	-1152(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	%rcx, -1160(%rbp)       ## 8-byte Spill
LBB209_10:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit7
	movq	-1160(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	addq	$64, %rcx
	movq	%rcx, -224(%rbp)
	movq	-224(%rbp), %rcx
	movq	%rcx, -216(%rbp)
	movq	-216(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	-208(%rbp), %rdx
	movq	%rdx, -200(%rbp)
	movq	-200(%rbp), %rdx
	movq	%rdx, -192(%rbp)
	movq	-192(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rax, -1168(%rbp)       ## 8-byte Spill
	movq	%rcx, -1176(%rbp)       ## 8-byte Spill
	je	LBB209_12
## BB#11:
	movq	-1176(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, -136(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -1184(%rbp)       ## 8-byte Spill
	jmp	LBB209_13
LBB209_12:
	movq	-1176(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	movq	-176(%rbp), %rcx
	movq	%rcx, -168(%rbp)
	movq	-168(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -160(%rbp)
	movq	-160(%rbp), %rcx
	movq	%rcx, -152(%rbp)
	movq	-152(%rbp), %rcx
	movq	%rcx, -1184(%rbp)       ## 8-byte Spill
LBB209_13:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit6
	movq	-1184(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	movq	88(%rcx), %rdx
	movq	-1144(%rbp), %rsi       ## 8-byte Reload
	movq	%rsi, -232(%rbp)
	movq	-1168(%rbp), %rdi       ## 8-byte Reload
	movq	%rdi, -240(%rbp)
	movq	%rax, -248(%rbp)
	movq	%rdx, -256(%rbp)
	movq	-232(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	%rdx, 16(%rax)
	movq	-248(%rbp), %rdx
	movq	%rdx, 24(%rax)
	movq	-256(%rbp), %rdx
	movq	%rdx, 32(%rax)
LBB209_14:
	movq	-1088(%rbp), %rax       ## 8-byte Reload
	movl	96(%rax), %ecx
	andl	$16, %ecx
	cmpl	$0, %ecx
	je	LBB209_36
## BB#15:
	movq	-1088(%rbp), %rax       ## 8-byte Reload
	addq	$64, %rax
	movq	%rax, -336(%rbp)
	movq	-336(%rbp), %rax
	movq	%rax, -328(%rbp)
	movq	-328(%rbp), %rcx
	movq	%rcx, -320(%rbp)
	movq	-320(%rbp), %rcx
	movq	%rcx, -312(%rbp)
	movq	-312(%rbp), %rcx
	movzbl	(%rcx), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movq	%rax, -1192(%rbp)       ## 8-byte Spill
	je	LBB209_17
## BB#16:
	movq	-1192(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -280(%rbp)
	movq	-280(%rbp), %rcx
	movq	%rcx, -272(%rbp)
	movq	-272(%rbp), %rcx
	movq	%rcx, -264(%rbp)
	movq	-264(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -1200(%rbp)       ## 8-byte Spill
	jmp	LBB209_18
LBB209_17:
	movq	-1192(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -304(%rbp)
	movq	-304(%rbp), %rcx
	movq	%rcx, -296(%rbp)
	movq	-296(%rbp), %rcx
	movq	%rcx, -288(%rbp)
	movq	-288(%rbp), %rcx
	movzbl	(%rcx), %edx
	sarl	$1, %edx
	movslq	%edx, %rcx
	movq	%rcx, -1200(%rbp)       ## 8-byte Spill
LBB209_18:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv.exit5
	movq	-1200(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -1080(%rbp)
	movq	-1088(%rbp), %rax       ## 8-byte Reload
	addq	$64, %rax
	movq	%rax, -448(%rbp)
	movq	-448(%rbp), %rax
	movq	%rax, -440(%rbp)
	movq	-440(%rbp), %rax
	movq	%rax, -432(%rbp)
	movq	-432(%rbp), %rcx
	movq	%rcx, -424(%rbp)
	movq	-424(%rbp), %rcx
	movq	%rcx, -416(%rbp)
	movq	-416(%rbp), %rcx
	movzbl	(%rcx), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movq	%rax, -1208(%rbp)       ## 8-byte Spill
	je	LBB209_20
## BB#19:
	movq	-1208(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -368(%rbp)
	movq	-368(%rbp), %rcx
	movq	%rcx, -360(%rbp)
	movq	-360(%rbp), %rcx
	movq	%rcx, -352(%rbp)
	movq	-352(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -1216(%rbp)       ## 8-byte Spill
	jmp	LBB209_21
LBB209_20:
	movq	-1208(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -408(%rbp)
	movq	-408(%rbp), %rcx
	movq	%rcx, -400(%rbp)
	movq	-400(%rbp), %rcx
	movq	%rcx, -392(%rbp)
	movq	-392(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -384(%rbp)
	movq	-384(%rbp), %rcx
	movq	%rcx, -376(%rbp)
	movq	-376(%rbp), %rcx
	movq	%rcx, -1216(%rbp)       ## 8-byte Spill
LBB209_21:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit4
	movq	-1216(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rax
	addq	-1080(%rbp), %rax
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, 88(%rcx)
	addq	$64, %rcx
	movq	-1088(%rbp), %rax       ## 8-byte Reload
	addq	$64, %rax
	movq	%rax, -504(%rbp)
	movq	-504(%rbp), %rax
	movq	%rax, -496(%rbp)
	movq	-496(%rbp), %rdx
	movq	%rdx, -488(%rbp)
	movq	-488(%rbp), %rdx
	movq	%rdx, -480(%rbp)
	movq	-480(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rcx, -1224(%rbp)       ## 8-byte Spill
	movq	%rax, -1232(%rbp)       ## 8-byte Spill
	je	LBB209_23
## BB#22:
	movq	-1232(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -472(%rbp)
	movq	-472(%rbp), %rcx
	movq	%rcx, -464(%rbp)
	movq	-464(%rbp), %rcx
	movq	%rcx, -456(%rbp)
	movq	-456(%rbp), %rcx
	movq	(%rcx), %rcx
	andq	$-2, %rcx
	movq	%rcx, -1240(%rbp)       ## 8-byte Spill
	jmp	LBB209_24
LBB209_23:
	movl	$23, %eax
	movl	%eax, %ecx
	movq	%rcx, -1240(%rbp)       ## 8-byte Spill
	jmp	LBB209_24
LBB209_24:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE8capacityEv.exit
	movq	-1240(%rbp), %rax       ## 8-byte Reload
	xorl	%edx, %edx
	subq	$1, %rax
	movq	-1224(%rbp), %rcx       ## 8-byte Reload
	movq	%rcx, -592(%rbp)
	movq	%rax, -600(%rbp)
	movq	-592(%rbp), %rdi
	movq	-600(%rbp), %rsi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEmc
	movq	-1088(%rbp), %rax       ## 8-byte Reload
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	addq	$64, %rcx
	movq	%rcx, -712(%rbp)
	movq	-712(%rbp), %rcx
	movq	%rcx, -704(%rbp)
	movq	-704(%rbp), %rcx
	movq	%rcx, -696(%rbp)
	movq	-696(%rbp), %rsi
	movq	%rsi, -688(%rbp)
	movq	-688(%rbp), %rsi
	movq	%rsi, -680(%rbp)
	movq	-680(%rbp), %rsi
	movzbl	(%rsi), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movq	%rax, -1248(%rbp)       ## 8-byte Spill
	movq	%rcx, -1256(%rbp)       ## 8-byte Spill
	je	LBB209_26
## BB#25:
	movq	-1256(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -632(%rbp)
	movq	-632(%rbp), %rcx
	movq	%rcx, -624(%rbp)
	movq	-624(%rbp), %rcx
	movq	%rcx, -616(%rbp)
	movq	-616(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -1264(%rbp)       ## 8-byte Spill
	jmp	LBB209_27
LBB209_26:
	movq	-1256(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -672(%rbp)
	movq	-672(%rbp), %rcx
	movq	%rcx, -664(%rbp)
	movq	-664(%rbp), %rcx
	movq	%rcx, -656(%rbp)
	movq	-656(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -648(%rbp)
	movq	-648(%rbp), %rcx
	movq	%rcx, -640(%rbp)
	movq	-640(%rbp), %rcx
	movq	%rcx, -1264(%rbp)       ## 8-byte Spill
LBB209_27:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit2
	movq	-1264(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -608(%rbp)
	movq	-608(%rbp), %rax
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	addq	$64, %rcx
	movq	%rcx, -824(%rbp)
	movq	-824(%rbp), %rcx
	movq	%rcx, -816(%rbp)
	movq	-816(%rbp), %rcx
	movq	%rcx, -808(%rbp)
	movq	-808(%rbp), %rdx
	movq	%rdx, -800(%rbp)
	movq	-800(%rbp), %rdx
	movq	%rdx, -792(%rbp)
	movq	-792(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rax, -1272(%rbp)       ## 8-byte Spill
	movq	%rcx, -1280(%rbp)       ## 8-byte Spill
	je	LBB209_29
## BB#28:
	movq	-1280(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -744(%rbp)
	movq	-744(%rbp), %rcx
	movq	%rcx, -736(%rbp)
	movq	-736(%rbp), %rcx
	movq	%rcx, -728(%rbp)
	movq	-728(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -1288(%rbp)       ## 8-byte Spill
	jmp	LBB209_30
LBB209_29:
	movq	-1280(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -784(%rbp)
	movq	-784(%rbp), %rcx
	movq	%rcx, -776(%rbp)
	movq	-776(%rbp), %rcx
	movq	%rcx, -768(%rbp)
	movq	-768(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -760(%rbp)
	movq	-760(%rbp), %rcx
	movq	%rcx, -752(%rbp)
	movq	-752(%rbp), %rcx
	movq	%rcx, -1288(%rbp)       ## 8-byte Spill
LBB209_30:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit1
	movq	-1288(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -720(%rbp)
	movq	-720(%rbp), %rax
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	addq	$64, %rcx
	movq	%rcx, -904(%rbp)
	movq	-904(%rbp), %rcx
	movq	%rcx, -896(%rbp)
	movq	-896(%rbp), %rdx
	movq	%rdx, -888(%rbp)
	movq	-888(%rbp), %rdx
	movq	%rdx, -880(%rbp)
	movq	-880(%rbp), %rdx
	movzbl	(%rdx), %esi
	andl	$1, %esi
	cmpl	$0, %esi
	movq	%rax, -1296(%rbp)       ## 8-byte Spill
	movq	%rcx, -1304(%rbp)       ## 8-byte Spill
	je	LBB209_32
## BB#31:
	movq	-1304(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -848(%rbp)
	movq	-848(%rbp), %rcx
	movq	%rcx, -840(%rbp)
	movq	-840(%rbp), %rcx
	movq	%rcx, -832(%rbp)
	movq	-832(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -1312(%rbp)       ## 8-byte Spill
	jmp	LBB209_33
LBB209_32:
	movq	-1304(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -872(%rbp)
	movq	-872(%rbp), %rcx
	movq	%rcx, -864(%rbp)
	movq	-864(%rbp), %rcx
	movq	%rcx, -856(%rbp)
	movq	-856(%rbp), %rcx
	movzbl	(%rcx), %edx
	sarl	$1, %edx
	movslq	%edx, %rcx
	movq	%rcx, -1312(%rbp)       ## 8-byte Spill
LBB209_33:                              ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv.exit
	movq	-1312(%rbp), %rax       ## 8-byte Reload
	movq	-1296(%rbp), %rcx       ## 8-byte Reload
	addq	%rax, %rcx
	movq	-1248(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -912(%rbp)
	movq	-1272(%rbp), %rdx       ## 8-byte Reload
	movq	%rdx, -920(%rbp)
	movq	%rcx, -928(%rbp)
	movq	-912(%rbp), %rcx
	movq	-920(%rbp), %rsi
	movq	%rsi, 48(%rcx)
	movq	%rsi, 40(%rcx)
	movq	-928(%rbp), %rsi
	movq	%rsi, 56(%rcx)
	movq	-1088(%rbp), %rcx       ## 8-byte Reload
	movl	96(%rcx), %edi
	andl	$3, %edi
	cmpl	$0, %edi
	je	LBB209_35
## BB#34:
	movq	-1088(%rbp), %rax       ## 8-byte Reload
	movq	-1080(%rbp), %rcx
	movl	%ecx, %edx
	movq	%rax, -936(%rbp)
	movl	%edx, -940(%rbp)
	movq	-936(%rbp), %rax
	movl	-940(%rbp), %edx
	movq	48(%rax), %rcx
	movslq	%edx, %rsi
	addq	%rsi, %rcx
	movq	%rcx, 48(%rax)
LBB209_35:
	jmp	LBB209_36
LBB209_36:
	addq	$1312, %rsp             ## imm = 0x520
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE
	.weak_def_can_be_hidden	__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE
	.align	4, 0x90
__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE: ## @_ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp941:
	.cfi_def_cfa_offset 16
Ltmp942:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp943:
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              ## imm = 0x100
	movq	%rdi, -200(%rbp)
	movq	%rsi, -208(%rbp)
	movq	-200(%rbp), %rdi
	movq	-208(%rbp), %rsi
	movq	%rsi, -192(%rbp)
	movq	-192(%rbp), %rsi
	movq	%rsi, -184(%rbp)
	movq	-184(%rbp), %rsi
	movq	%rsi, -176(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rax
	movzbl	(%rax), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movq	%rdi, -216(%rbp)        ## 8-byte Spill
	movq	%rsi, -224(%rbp)        ## 8-byte Spill
	je	LBB210_2
## BB#1:
	movq	-224(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -232(%rbp)        ## 8-byte Spill
	jmp	LBB210_3
LBB210_2:
	movq	-224(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, -136(%rbp)
	movq	-136(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, -120(%rbp)
	movq	-120(%rbp), %rcx
	movq	%rcx, -232(%rbp)        ## 8-byte Spill
LBB210_3:                               ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit
	movq	-232(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rsi
	movq	-208(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rcx
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movzbl	(%rcx), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movq	%rsi, -240(%rbp)        ## 8-byte Spill
	movq	%rax, -248(%rbp)        ## 8-byte Spill
	je	LBB210_5
## BB#4:
	movq	-248(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -256(%rbp)        ## 8-byte Spill
	jmp	LBB210_6
LBB210_5:
	movq	-248(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movzbl	(%rcx), %edx
	sarl	$1, %edx
	movslq	%edx, %rcx
	movq	%rcx, -256(%rbp)        ## 8-byte Spill
LBB210_6:                               ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4sizeEv.exit
	movq	-256(%rbp), %rax        ## 8-byte Reload
	movq	-216(%rbp), %rdi        ## 8-byte Reload
	movq	-240(%rbp), %rsi        ## 8-byte Reload
	movq	%rax, %rdx
	callq	__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m
	addq	$256, %rsp              ## imm = 0x100
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma5ProxyINS_3ColIdEEEC2ERKS2_
	.weak_def_can_be_hidden	__ZN4arma5ProxyINS_3ColIdEEEC2ERKS2_
	.align	4, 0x90
__ZN4arma5ProxyINS_3ColIdEEEC2ERKS2_:   ## @_ZN4arma5ProxyINS_3ColIdEEEC2ERKS2_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp944:
	.cfi_def_cfa_offset 16
Ltmp945:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp946:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3ColINSt3__17complexIdEEEC2INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE
	.weak_def_can_be_hidden	__ZN4arma3ColINSt3__17complexIdEEEC2INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE
	.align	4, 0x90
__ZN4arma3ColINSt3__17complexIdEEEC2INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE: ## @_ZN4arma3ColINSt3__17complexIdEEEC2INS_4mtOpIS3_NS0_IdEENS_11op_fft_realEEEEERKNS_4BaseIS3_T_EE
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin212:
	.cfi_lsda 16, Lexception212
## BB#0:
	pushq	%rbp
Ltmp950:
	.cfi_def_cfa_offset 16
Ltmp951:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp952:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	-32(%rbp), %rax
	movl	$1, %edx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rsi, -56(%rbp)         ## 8-byte Spill
	movq	%rax, %rsi
	callq	__ZN4arma3MatINSt3__17complexIdEEEC2ERKNS_18arma_vec_indicatorEt
	movq	-56(%rbp), %rax         ## 8-byte Reload
	movq	-24(%rbp), %rsi
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, -64(%rbp)         ## 8-byte Spill
	movq	%rsi, -72(%rbp)         ## 8-byte Spill
## BB#1:
Ltmp947:
	movq	-64(%rbp), %rdi         ## 8-byte Reload
	movq	-72(%rbp), %rsi         ## 8-byte Reload
	callq	__ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIdEENS_11op_fft_realEEERKS4_RKNS_4mtOpIS3_T_T0_EE
Ltmp948:
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	jmp	LBB212_2
LBB212_2:
	addq	$80, %rsp
	popq	%rbp
	retq
LBB212_3:
Ltmp949:
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	-56(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN4arma3MatINSt3__17complexIdEEED2Ev
## BB#4:
	movq	-40(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end212:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table212:
Lexception212:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset284 = Leh_func_begin212-Leh_func_begin212 ## >> Call Site 1 <<
	.long	Lset284
Lset285 = Ltmp947-Leh_func_begin212     ##   Call between Leh_func_begin212 and Ltmp947
	.long	Lset285
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset286 = Ltmp947-Leh_func_begin212     ## >> Call Site 2 <<
	.long	Lset286
Lset287 = Ltmp948-Ltmp947               ##   Call between Ltmp947 and Ltmp948
	.long	Lset287
Lset288 = Ltmp949-Leh_func_begin212     ##     jumps to Ltmp949
	.long	Lset288
	.byte	0                       ##   On action: cleanup
Lset289 = Ltmp948-Leh_func_begin212     ## >> Call Site 3 <<
	.long	Lset289
Lset290 = Leh_func_end212-Ltmp948       ##   Call between Ltmp948 and Leh_func_end212
	.long	Lset290
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma3MatINSt3__17complexIdEEEC2ERKNS_18arma_vec_indicatorEt
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEEC2ERKNS_18arma_vec_indicatorEt
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEEC2ERKNS_18arma_vec_indicatorEt: ## @_ZN4arma3MatINSt3__17complexIdEEEC2ERKNS_18arma_vec_indicatorEt
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp953:
	.cfi_def_cfa_offset 16
Ltmp954:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp955:
	.cfi_def_cfa_register %rbp
	movw	%dx, %ax
	xorl	%edx, %edx
	movl	$1, %ecx
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movw	%ax, -66(%rbp)
	movq	-56(%rbp), %rsi
	movzwl	-66(%rbp), %r8d
	cmpl	$2, %r8d
	movl	%edx, %r8d
	cmovel	%ecx, %r8d
	movl	%r8d, (%rsi)
	movzwl	-66(%rbp), %r8d
	cmpl	$1, %r8d
	cmovel	%ecx, %edx
	movl	%edx, 4(%rsi)
	movl	$0, 8(%rsi)
	movw	-66(%rbp), %ax
	movw	%ax, 12(%rsi)
	movw	$0, 14(%rsi)
	movq	$0, 16(%rsi)
	addq	$32, %rsi
	movq	%rsi, %rdi
	addq	$256, %rdi              ## imm = 0x100
	movq	%rdi, -80(%rbp)         ## 8-byte Spill
	movq	%rsi, -88(%rbp)         ## 8-byte Spill
LBB213_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-88(%rbp), %rax         ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm0, -48(%rbp)
	movq	-32(%rbp), %rcx
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rcx, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rcx
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-80(%rbp), %rcx         ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -88(%rbp)         ## 8-byte Spill
	jne	LBB213_1
## BB#2:
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIdEENS_11op_fft_realEEERKS4_RKNS_4mtOpIS3_T_T0_EE
	.weak_def_can_be_hidden	__ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIdEENS_11op_fft_realEEERKS4_RKNS_4mtOpIS3_T_T0_EE
	.align	4, 0x90
__ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIdEENS_11op_fft_realEEERKS4_RKNS_4mtOpIS3_T_T0_EE: ## @_ZN4arma3MatINSt3__17complexIdEEEaSINS_3ColIdEENS_11op_fft_realEEERKS4_RKNS_4mtOpIS3_T_T0_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp956:
	.cfi_def_cfa_offset 16
Ltmp957:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp958:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	movq	%rax, %rsi
	callq	__ZN4arma11op_fft_real5applyINS_3ColIdEEEEvRNS_3MatINSt3__17complexINT_8pod_typeEEEEERKNS_4mtOpIS9_S7_S0_EE
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma11op_fft_real5applyINS_3ColIdEEEEvRNS_3MatINSt3__17complexINT_8pod_typeEEEEERKNS_4mtOpIS9_S7_S0_EE
	.weak_def_can_be_hidden	__ZN4arma11op_fft_real5applyINS_3ColIdEEEEvRNS_3MatINSt3__17complexINT_8pod_typeEEEEERKNS_4mtOpIS9_S7_S0_EE
	.align	4, 0x90
__ZN4arma11op_fft_real5applyINS_3ColIdEEEEvRNS_3MatINSt3__17complexINT_8pod_typeEEEEERKNS_4mtOpIS9_S7_S0_EE: ## @_ZN4arma11op_fft_real5applyINS_3ColIdEEEEvRNS_3MatINSt3__17complexINT_8pod_typeEEEEERKNS_4mtOpIS9_S7_S0_EE
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin215:
	.cfi_lsda 16, Lexception215
## BB#0:
	pushq	%rbp
Ltmp984:
	.cfi_def_cfa_offset 16
Ltmp985:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp986:
	.cfi_def_cfa_register %rbp
	subq	$2464, %rsp             ## imm = 0x9A0
	leaq	-32(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -8(%rbp)
	movq	%rdi, -2096(%rbp)
	movq	%rsi, -2104(%rbp)
	movq	-2104(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rax, %rdi
	callq	__ZN4arma5ProxyINS_3ColIdEEEC1ERKS2_
	movb	$1, %dl
	leaq	-32(%rbp), %rax
	movq	%rax, -2088(%rbp)
	movq	-2088(%rbp), %rcx
	movq	(%rcx), %rcx
	movl	(%rcx), %r8d
	movl	%r8d, -2108(%rbp)
	movq	%rax, -2080(%rbp)
	movl	$1, -2112(%rbp)
	movq	%rax, -2072(%rbp)
	movq	-2072(%rbp), %rax
	movq	(%rax), %rax
	movl	8(%rax), %r8d
	movl	%r8d, -2116(%rbp)
	cmpl	$1, -2108(%rbp)
	movb	%dl, -2253(%rbp)        ## 1-byte Spill
	je	LBB215_2
## BB#1:
	cmpl	$1, -2112(%rbp)
	sete	%al
	movb	%al, -2253(%rbp)        ## 1-byte Spill
LBB215_2:
	movb	-2253(%rbp), %al        ## 1-byte Reload
	andb	$1, %al
	movb	%al, -2117(%rbp)
	testb	$1, -2117(%rbp)
	je	LBB215_4
## BB#3:
	movl	-2116(%rbp), %eax
	movl	%eax, -2260(%rbp)       ## 4-byte Spill
	jmp	LBB215_5
LBB215_4:
	movl	-2108(%rbp), %eax
	movl	%eax, -2260(%rbp)       ## 4-byte Spill
LBB215_5:
	movl	-2260(%rbp), %eax       ## 4-byte Reload
	movl	%eax, -2124(%rbp)
	movq	-2104(%rbp), %rcx
	cmpl	$0, 64(%rcx)
	jne	LBB215_7
## BB#6:
	movq	-2104(%rbp), %rax
	movl	48(%rax), %ecx
	movl	%ecx, -2264(%rbp)       ## 4-byte Spill
	jmp	LBB215_8
LBB215_7:
	movl	-2124(%rbp), %eax
	movl	%eax, -2264(%rbp)       ## 4-byte Spill
LBB215_8:
	movl	-2264(%rbp), %eax       ## 4-byte Reload
	leaq	-816(%rbp), %rdi
	movl	%eax, -2128(%rbp)
	movl	-2128(%rbp), %esi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC1Ej
	testb	$1, -2117(%rbp)
	je	LBB215_47
## BB#9:
	cmpl	$1, -2112(%rbp)
	jne	LBB215_12
## BB#10:
	movq	-2096(%rbp), %rdi
	movl	-2128(%rbp), %esi
Ltmp972:
	movl	$1, %edx
	callq	__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
Ltmp973:
	jmp	LBB215_11
LBB215_11:
	jmp	LBB215_14
LBB215_12:
	movq	-2096(%rbp), %rdi
	movl	-2128(%rbp), %edx
Ltmp970:
	movl	$1, %esi
	callq	__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
Ltmp971:
	jmp	LBB215_13
LBB215_13:
	jmp	LBB215_14
LBB215_14:
	movq	-2096(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB215_16
## BB#15:
	cmpl	$0, -2124(%rbp)
	jne	LBB215_19
LBB215_16:
	movq	-2096(%rbp), %rdi
Ltmp981:
	callq	__ZN4arma3MatINSt3__17complexIdEEE5zerosEv
Ltmp982:
	movq	%rax, -2272(%rbp)       ## 8-byte Spill
	jmp	LBB215_17
LBB215_17:
	movl	$1, -2144(%rbp)
	jmp	LBB215_89
LBB215_18:
Ltmp983:
	movl	%edx, %ecx
	movq	%rax, -2136(%rbp)
	movl	%ecx, -2140(%rbp)
	jmp	LBB215_92
LBB215_19:
	cmpl	$1, -2128(%rbp)
	jne	LBB215_25
## BB#20:
	cmpl	$1, -2124(%rbp)
	jb	LBB215_25
## BB#21:
	movq	-2096(%rbp), %rax
	movq	%rax, -2056(%rbp)
	movl	$0, -2060(%rbp)
	movq	-2056(%rbp), %rax
	movl	-2060(%rbp), %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -2048(%rbp)
	movq	-2048(%rbp), %rax
	movq	%rax, -2280(%rbp)       ## 8-byte Spill
## BB#22:
	leaq	-32(%rbp), %rax
	movq	%rax, -2032(%rbp)
	movl	$0, -2036(%rbp)
	movq	-2032(%rbp), %rax
	movq	(%rax), %rax
	movl	-2036(%rbp), %ecx
	movq	%rax, -2016(%rbp)
	movl	%ecx, -2020(%rbp)
	movq	-2016(%rbp), %rax
	movl	-2020(%rbp), %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	movsd	(%rax,%rdx,8), %xmm0
	movsd	%xmm0, -2288(%rbp)      ## 8-byte Spill
## BB#23:
	xorps	%xmm0, %xmm0
	leaq	-2160(%rbp), %rax
	movq	%rax, -1848(%rbp)
	movsd	-2288(%rbp), %xmm1      ## 8-byte Reload
	movsd	%xmm1, -1856(%rbp)
	movsd	%xmm0, -1864(%rbp)
	movq	-1848(%rbp), %rax
	movsd	-1856(%rbp), %xmm0
	movsd	-1864(%rbp), %xmm2
	movq	%rax, -1824(%rbp)
	movsd	%xmm0, -1832(%rbp)
	movsd	%xmm2, -1840(%rbp)
	movq	-1824(%rbp), %rax
	movsd	-1832(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-1840(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
## BB#24:
	movq	-2160(%rbp), %rax
	movq	-2280(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, (%rcx)
	movq	-2152(%rbp), %rax
	movq	%rax, 8(%rcx)
	movl	$1, -2144(%rbp)
	jmp	LBB215_89
LBB215_25:
	leaq	-1104(%rbp), %rax
	movl	-2128(%rbp), %ecx
	movq	%rax, -1808(%rbp)
	movl	%ecx, -1812(%rbp)
	movq	-1808(%rbp), %rax
	movl	-1812(%rbp), %ecx
	movq	%rax, -1792(%rbp)
	movl	%ecx, -1796(%rbp)
	movq	-1792(%rbp), %rax
	movl	-1796(%rbp), %ecx
	movl	%ecx, (%rax)
	movq	%rax, %rdx
	addq	$32, %rdx
	movq	%rdx, %rsi
	addq	$256, %rsi              ## imm = 0x100
	movq	%rax, -2296(%rbp)       ## 8-byte Spill
	movq	%rsi, -2304(%rbp)       ## 8-byte Spill
	movq	%rdx, -2312(%rbp)       ## 8-byte Spill
LBB215_26:                              ## =>This Inner Loop Header: Depth=1
	movq	-2312(%rbp), %rax       ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -1768(%rbp)
	movsd	%xmm0, -1776(%rbp)
	movsd	%xmm0, -1784(%rbp)
	movq	-1768(%rbp), %rcx
	movsd	-1776(%rbp), %xmm0
	movsd	-1784(%rbp), %xmm1
	movq	%rcx, -1744(%rbp)
	movsd	%xmm0, -1752(%rbp)
	movsd	%xmm1, -1760(%rbp)
	movq	-1744(%rbp), %rcx
	movsd	-1752(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-1760(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-2304(%rbp), %rcx       ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -2312(%rbp)       ## 8-byte Spill
	jne	LBB215_26
## BB#27:                               ## %_ZN4arma8podarrayINSt3__17complexIdEEEC2Ej.exit.i
	movl	-1796(%rbp), %esi
Ltmp974:
	movq	-2296(%rbp), %rdi       ## 8-byte Reload
	callq	__ZN4arma8podarrayINSt3__17complexIdEEE9init_coldEj
Ltmp975:
	jmp	LBB215_28
LBB215_28:                              ## %_ZN4arma8podarrayINSt3__17complexIdEEEC1Ej.exit
	jmp	LBB215_29
LBB215_29:
	leaq	-1104(%rbp), %rax
	movq	%rax, -1736(%rbp)
	movq	-1736(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -2320(%rbp)       ## 8-byte Spill
## BB#30:
	movq	-2320(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2168(%rbp)
	movl	-2128(%rbp), %ecx
	cmpl	-2124(%rbp), %ecx
	jbe	LBB215_34
## BB#31:
	movl	-2124(%rbp), %eax
	movl	%eax, %ecx
	movl	%ecx, %eax
	movq	-2168(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	-2128(%rbp), %esi
	subl	%eax, %esi
Ltmp976:
	movq	%rdx, %rdi
	callq	__ZN4arma8arrayops10fill_zerosINSt3__17complexIdEEEEvPT_j
Ltmp977:
	jmp	LBB215_32
LBB215_32:
	jmp	LBB215_34
LBB215_33:
Ltmp980:
	leaq	-1104(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -2136(%rbp)
	movl	%ecx, -2140(%rbp)
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	jmp	LBB215_92
LBB215_34:
	leaq	-1600(%rbp), %rax
	leaq	-2124(%rbp), %rcx
	leaq	-2128(%rbp), %rdx
	movq	%rdx, -1624(%rbp)
	movq	%rcx, -1632(%rbp)
	movq	-1624(%rbp), %rcx
	movq	-1632(%rbp), %rdx
	movq	%rcx, -1608(%rbp)
	movq	%rdx, -1616(%rbp)
	movq	-1616(%rbp), %rcx
	movq	-1608(%rbp), %rdx
	movq	%rax, -1576(%rbp)
	movq	%rcx, -1584(%rbp)
	movq	%rdx, -1592(%rbp)
	movq	-1584(%rbp), %rax
	movl	(%rax), %esi
	movq	-1592(%rbp), %rax
	cmpl	(%rax), %esi
	jae	LBB215_36
## BB#35:
	movq	-1616(%rbp), %rax
	movq	%rax, -2328(%rbp)       ## 8-byte Spill
	jmp	LBB215_37
LBB215_36:
	movq	-1608(%rbp), %rax
	movq	%rax, -2328(%rbp)       ## 8-byte Spill
LBB215_37:                              ## %_ZNSt3__13minIjEERKT_S3_S3_.exit9
	movq	-2328(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2336(%rbp)       ## 8-byte Spill
## BB#38:
	leaq	-32(%rbp), %rax
	movq	-2336(%rbp), %rcx       ## 8-byte Reload
	movl	(%rcx), %edx
	movl	%edx, -2172(%rbp)
	movq	%rax, -1464(%rbp)
	movq	-1464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -1456(%rbp)
	movq	-1456(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -2344(%rbp)       ## 8-byte Spill
## BB#39:
	movq	-2344(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2184(%rbp)
	movl	$0, -2188(%rbp)
LBB215_40:                              ## =>This Inner Loop Header: Depth=1
	movl	-2188(%rbp), %eax
	cmpl	-2172(%rbp), %eax
	jae	LBB215_44
## BB#41:                               ##   in Loop: Header=BB215_40 Depth=1
	xorps	%xmm0, %xmm0
	leaq	-2208(%rbp), %rax
	movl	-2188(%rbp), %ecx
	movl	%ecx, %edx
	movq	-2168(%rbp), %rsi
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movl	-2188(%rbp), %ecx
	movl	%ecx, %edx
	movq	-2184(%rbp), %rdi
	movsd	(%rdi,%rdx,8), %xmm1
	movq	%rax, -1432(%rbp)
	movsd	%xmm1, -1440(%rbp)
	movsd	%xmm0, -1448(%rbp)
	movq	-1432(%rbp), %rax
	movsd	-1440(%rbp), %xmm0
	movsd	-1448(%rbp), %xmm1
	movq	%rax, -1408(%rbp)
	movsd	%xmm0, -1416(%rbp)
	movsd	%xmm1, -1424(%rbp)
	movq	-1408(%rbp), %rax
	movsd	-1416(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-1424(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
	movq	%rsi, -2352(%rbp)       ## 8-byte Spill
## BB#42:                               ##   in Loop: Header=BB215_40 Depth=1
	movq	-2208(%rbp), %rax
	movq	-2352(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, (%rcx)
	movq	-2200(%rbp), %rax
	movq	%rax, 8(%rcx)
## BB#43:                               ##   in Loop: Header=BB215_40 Depth=1
	movl	-2188(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2188(%rbp)
	jmp	LBB215_40
LBB215_44:
	movq	-2096(%rbp), %rax
	movq	%rax, -1400(%rbp)
	movq	-1400(%rbp), %rax
	movq	16(%rax), %rsi
	movq	%rsi, -2360(%rbp)       ## 8-byte Spill
## BB#45:
	movq	-2168(%rbp), %rdx
Ltmp978:
	leaq	-816(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$1, %r8d
	movq	-2360(%rbp), %rsi       ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE3runEPS3_PKS3_jj
Ltmp979:
	jmp	LBB215_46
LBB215_46:
	leaq	-1104(%rbp), %rdi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	jmp	LBB215_88
LBB215_47:
	movq	-2096(%rbp), %rdi
	movl	-2128(%rbp), %esi
	movl	-2112(%rbp), %edx
Ltmp959:
	callq	__ZN4arma3MatINSt3__17complexIdEEE8set_sizeEjj
Ltmp960:
	jmp	LBB215_48
LBB215_48:
	movq	-2096(%rbp), %rax
	cmpl	$0, 8(%rax)
	je	LBB215_50
## BB#49:
	cmpl	$0, -2124(%rbp)
	jne	LBB215_52
LBB215_50:
	movq	-2096(%rbp), %rdi
Ltmp968:
	callq	__ZN4arma3MatINSt3__17complexIdEEE5zerosEv
Ltmp969:
	movq	%rax, -2368(%rbp)       ## 8-byte Spill
	jmp	LBB215_51
LBB215_51:
	movl	$1, -2144(%rbp)
	jmp	LBB215_89
LBB215_52:
	cmpl	$1, -2128(%rbp)
	jne	LBB215_62
## BB#53:
	cmpl	$1, -2124(%rbp)
	jb	LBB215_62
## BB#54:
	movl	$0, -2212(%rbp)
LBB215_55:                              ## =>This Inner Loop Header: Depth=1
	movl	-2212(%rbp), %eax
	cmpl	-2112(%rbp), %eax
	jae	LBB215_61
## BB#56:                               ##   in Loop: Header=BB215_55 Depth=1
	movq	-2096(%rbp), %rax
	movl	-2212(%rbp), %ecx
	movq	%rax, -1480(%rbp)
	movl	$0, -1484(%rbp)
	movl	%ecx, -1488(%rbp)
	movq	-1480(%rbp), %rax
	movl	-1484(%rbp), %ecx
	movl	-1488(%rbp), %edx
	imull	(%rax), %edx
	addl	%edx, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %esi
	movq	16(%rax), %rax
	shlq	$4, %rsi
	addq	%rsi, %rax
	movq	%rax, -1472(%rbp)
	movq	-1472(%rbp), %rax
	movq	%rax, -2376(%rbp)       ## 8-byte Spill
## BB#57:                               ##   in Loop: Header=BB215_55 Depth=1
	leaq	-32(%rbp), %rax
	movl	-2212(%rbp), %ecx
	movq	%rax, -1512(%rbp)
	movl	$0, -1516(%rbp)
	movl	%ecx, -1520(%rbp)
	movq	-1512(%rbp), %rax
	movq	(%rax), %rax
	movl	-1516(%rbp), %ecx
	movq	%rax, -1496(%rbp)
	movl	%ecx, -1500(%rbp)
	movq	-1496(%rbp), %rax
	movl	-1500(%rbp), %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	movsd	(%rax,%rdx,8), %xmm0
	movsd	%xmm0, -2384(%rbp)      ## 8-byte Spill
## BB#58:                               ##   in Loop: Header=BB215_55 Depth=1
	xorps	%xmm0, %xmm0
	leaq	-2232(%rbp), %rax
	movq	%rax, -1552(%rbp)
	movsd	-2384(%rbp), %xmm1      ## 8-byte Reload
	movsd	%xmm1, -1560(%rbp)
	movsd	%xmm0, -1568(%rbp)
	movq	-1552(%rbp), %rax
	movsd	-1560(%rbp), %xmm0
	movsd	-1568(%rbp), %xmm2
	movq	%rax, -1528(%rbp)
	movsd	%xmm0, -1536(%rbp)
	movsd	%xmm2, -1544(%rbp)
	movq	-1528(%rbp), %rax
	movsd	-1536(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-1544(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
## BB#59:                               ##   in Loop: Header=BB215_55 Depth=1
	movq	-2232(%rbp), %rax
	movq	-2376(%rbp), %rcx       ## 8-byte Reload
	movq	%rax, (%rcx)
	movq	-2224(%rbp), %rax
	movq	%rax, 8(%rcx)
## BB#60:                               ##   in Loop: Header=BB215_55 Depth=1
	movl	-2212(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2212(%rbp)
	jmp	LBB215_55
LBB215_61:
	movl	$1, -2144(%rbp)
	jmp	LBB215_89
LBB215_62:
	leaq	-1392(%rbp), %rax
	movl	-2128(%rbp), %ecx
	movq	%rax, -1712(%rbp)
	movl	%ecx, -1716(%rbp)
	movq	-1712(%rbp), %rax
	movl	-1716(%rbp), %ecx
	movq	%rax, -1696(%rbp)
	movl	%ecx, -1700(%rbp)
	movq	-1696(%rbp), %rax
	movl	-1700(%rbp), %ecx
	movl	%ecx, (%rax)
	movq	%rax, %rdx
	addq	$32, %rdx
	movq	%rdx, %rsi
	addq	$256, %rsi              ## imm = 0x100
	movq	%rax, -2392(%rbp)       ## 8-byte Spill
	movq	%rsi, -2400(%rbp)       ## 8-byte Spill
	movq	%rdx, -2408(%rbp)       ## 8-byte Spill
LBB215_63:                              ## =>This Inner Loop Header: Depth=1
	movq	-2408(%rbp), %rax       ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -1672(%rbp)
	movsd	%xmm0, -1680(%rbp)
	movsd	%xmm0, -1688(%rbp)
	movq	-1672(%rbp), %rcx
	movsd	-1680(%rbp), %xmm0
	movsd	-1688(%rbp), %xmm1
	movq	%rcx, -1648(%rbp)
	movsd	%xmm0, -1656(%rbp)
	movsd	%xmm1, -1664(%rbp)
	movq	-1648(%rbp), %rcx
	movsd	-1656(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-1664(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-2400(%rbp), %rcx       ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -2408(%rbp)       ## 8-byte Spill
	jne	LBB215_63
## BB#64:                               ## %_ZN4arma8podarrayINSt3__17complexIdEEEC2Ej.exit.i6
	movl	-1700(%rbp), %esi
Ltmp961:
	movq	-2392(%rbp), %rdi       ## 8-byte Reload
	callq	__ZN4arma8podarrayINSt3__17complexIdEEE9init_coldEj
Ltmp962:
	jmp	LBB215_65
LBB215_65:                              ## %_ZN4arma8podarrayINSt3__17complexIdEEEC1Ej.exit7
	jmp	LBB215_66
LBB215_66:
	leaq	-1392(%rbp), %rax
	movq	%rax, -1728(%rbp)
	movq	-1728(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -2416(%rbp)       ## 8-byte Spill
## BB#67:
	movq	-2416(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2240(%rbp)
	movl	-2128(%rbp), %ecx
	cmpl	-2124(%rbp), %ecx
	jbe	LBB215_71
## BB#68:
	movl	-2124(%rbp), %eax
	movl	%eax, %ecx
	movl	%ecx, %eax
	movq	-2240(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	-2128(%rbp), %esi
	subl	%eax, %esi
Ltmp963:
	movq	%rdx, %rdi
	callq	__ZN4arma8arrayops10fill_zerosINSt3__17complexIdEEEEvPT_j
Ltmp964:
	jmp	LBB215_69
LBB215_69:
	jmp	LBB215_71
LBB215_70:
Ltmp967:
	leaq	-1392(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -2136(%rbp)
	movl	%ecx, -2140(%rbp)
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	jmp	LBB215_92
LBB215_71:
	leaq	-1896(%rbp), %rax
	leaq	-2124(%rbp), %rcx
	leaq	-2128(%rbp), %rdx
	movq	%rdx, -1920(%rbp)
	movq	%rcx, -1928(%rbp)
	movq	-1920(%rbp), %rcx
	movq	-1928(%rbp), %rdx
	movq	%rcx, -1904(%rbp)
	movq	%rdx, -1912(%rbp)
	movq	-1912(%rbp), %rcx
	movq	-1904(%rbp), %rdx
	movq	%rax, -1872(%rbp)
	movq	%rcx, -1880(%rbp)
	movq	%rdx, -1888(%rbp)
	movq	-1880(%rbp), %rax
	movl	(%rax), %esi
	movq	-1888(%rbp), %rax
	cmpl	(%rax), %esi
	jae	LBB215_73
## BB#72:
	movq	-1912(%rbp), %rax
	movq	%rax, -2424(%rbp)       ## 8-byte Spill
	jmp	LBB215_74
LBB215_73:
	movq	-1904(%rbp), %rax
	movq	%rax, -2424(%rbp)       ## 8-byte Spill
LBB215_74:                              ## %_ZNSt3__13minIjEERKT_S3_S3_.exit
	movq	-2424(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -2432(%rbp)       ## 8-byte Spill
## BB#75:
	movq	-2432(%rbp), %rax       ## 8-byte Reload
	movl	(%rax), %ecx
	movl	%ecx, -2244(%rbp)
	movl	$0, -2248(%rbp)
LBB215_76:                              ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB215_78 Depth 2
	movl	-2248(%rbp), %eax
	cmpl	-2112(%rbp), %eax
	jae	LBB215_87
## BB#77:                               ##   in Loop: Header=BB215_76 Depth=1
	movl	$0, -2252(%rbp)
LBB215_78:                              ##   Parent Loop BB215_76 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-2252(%rbp), %eax
	cmpl	-2244(%rbp), %eax
	jae	LBB215_83
## BB#79:                               ##   in Loop: Header=BB215_78 Depth=2
	leaq	-32(%rbp), %rax
	movl	-2252(%rbp), %ecx
	movl	%ecx, %edx
	movq	-2240(%rbp), %rsi
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movl	-2252(%rbp), %ecx
	movl	-2248(%rbp), %edi
	movq	%rax, -1960(%rbp)
	movl	%ecx, -1964(%rbp)
	movl	%edi, -1968(%rbp)
	movq	-1960(%rbp), %rax
	movq	(%rax), %rax
	movl	-1964(%rbp), %ecx
	movq	%rax, -1944(%rbp)
	movl	%ecx, -1948(%rbp)
	movq	-1944(%rbp), %rax
	movl	-1948(%rbp), %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	movsd	(%rax,%rdx,8), %xmm0
	movq	%rsi, -2440(%rbp)       ## 8-byte Spill
	movsd	%xmm0, -2448(%rbp)      ## 8-byte Spill
## BB#80:                               ##   in Loop: Header=BB215_78 Depth=2
	xorps	%xmm0, %xmm0
	movq	-2440(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -1976(%rbp)
	movsd	-2448(%rbp), %xmm1      ## 8-byte Reload
	movsd	%xmm1, -1984(%rbp)
	movq	-1976(%rbp), %rcx
	movsd	-1984(%rbp), %xmm2
	movsd	%xmm2, (%rcx)
	movsd	%xmm0, 8(%rcx)
## BB#81:                               ##   in Loop: Header=BB215_78 Depth=2
	jmp	LBB215_82
LBB215_82:                              ##   in Loop: Header=BB215_78 Depth=2
	movl	-2252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2252(%rbp)
	jmp	LBB215_78
LBB215_83:                              ##   in Loop: Header=BB215_76 Depth=1
	movq	-2096(%rbp), %rax
	movl	-2248(%rbp), %ecx
	movq	%rax, -2000(%rbp)
	movl	%ecx, -2004(%rbp)
	movq	-2000(%rbp), %rax
	movl	-2004(%rbp), %ecx
	imull	(%rax), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	movq	16(%rax), %rax
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1992(%rbp)
	movq	-1992(%rbp), %rsi
	movq	%rsi, -2456(%rbp)       ## 8-byte Spill
## BB#84:                               ##   in Loop: Header=BB215_76 Depth=1
	movq	-2240(%rbp), %rdx
Ltmp965:
	leaq	-816(%rbp), %rdi
	xorl	%ecx, %ecx
	movl	$1, %r8d
	movq	-2456(%rbp), %rsi       ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE3runEPS3_PKS3_jj
Ltmp966:
	jmp	LBB215_85
LBB215_85:                              ##   in Loop: Header=BB215_76 Depth=1
	jmp	LBB215_86
LBB215_86:                              ##   in Loop: Header=BB215_76 Depth=1
	movl	-2248(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -2248(%rbp)
	jmp	LBB215_76
LBB215_87:
	leaq	-1392(%rbp), %rdi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
LBB215_88:
	movl	$0, -2144(%rbp)
LBB215_89:
	leaq	-816(%rbp), %rdi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED1Ev
	movl	-2144(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -2460(%rbp)       ## 4-byte Spill
	ja	LBB215_94
	jmp	LBB215_90
LBB215_90:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-8(%rbp), %rax
	jne	LBB215_95
## BB#91:                               ## %SP_return
	addq	$2464, %rsp             ## imm = 0x9A0
	popq	%rbp
	retq
LBB215_92:
	leaq	-816(%rbp), %rdi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED1Ev
## BB#93:
	movq	-2136(%rbp), %rdi
	callq	__Unwind_Resume
LBB215_94:
LBB215_95:                              ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc
Leh_func_end215:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table215:
Lexception215:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\320"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	78                      ## Call site table length
Lset291 = Leh_func_begin215-Leh_func_begin215 ## >> Call Site 1 <<
	.long	Lset291
Lset292 = Ltmp972-Leh_func_begin215     ##   Call between Leh_func_begin215 and Ltmp972
	.long	Lset292
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset293 = Ltmp972-Leh_func_begin215     ## >> Call Site 2 <<
	.long	Lset293
Lset294 = Ltmp975-Ltmp972               ##   Call between Ltmp972 and Ltmp975
	.long	Lset294
Lset295 = Ltmp983-Leh_func_begin215     ##     jumps to Ltmp983
	.long	Lset295
	.byte	0                       ##   On action: cleanup
Lset296 = Ltmp976-Leh_func_begin215     ## >> Call Site 3 <<
	.long	Lset296
Lset297 = Ltmp979-Ltmp976               ##   Call between Ltmp976 and Ltmp979
	.long	Lset297
Lset298 = Ltmp980-Leh_func_begin215     ##     jumps to Ltmp980
	.long	Lset298
	.byte	0                       ##   On action: cleanup
Lset299 = Ltmp959-Leh_func_begin215     ## >> Call Site 4 <<
	.long	Lset299
Lset300 = Ltmp962-Ltmp959               ##   Call between Ltmp959 and Ltmp962
	.long	Lset300
Lset301 = Ltmp983-Leh_func_begin215     ##     jumps to Ltmp983
	.long	Lset301
	.byte	0                       ##   On action: cleanup
Lset302 = Ltmp963-Leh_func_begin215     ## >> Call Site 5 <<
	.long	Lset302
Lset303 = Ltmp966-Ltmp963               ##   Call between Ltmp963 and Ltmp966
	.long	Lset303
Lset304 = Ltmp967-Leh_func_begin215     ##     jumps to Ltmp967
	.long	Lset304
	.byte	0                       ##   On action: cleanup
Lset305 = Ltmp966-Leh_func_begin215     ## >> Call Site 6 <<
	.long	Lset305
Lset306 = Leh_func_end215-Ltmp966       ##   Call between Ltmp966 and Leh_func_end215
	.long	Lset306
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC1Ej
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC1Ej
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC1Ej: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC1Ej
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp987:
	.cfi_def_cfa_offset 16
Ltmp988:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp989:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE3runEPS3_PKS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE3runEPS3_PKS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE3runEPS3_PKS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE3runEPS3_PKS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp990:
	.cfi_def_cfa_offset 16
Ltmp991:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp992:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -80(%rbp)
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$304, %rsi              ## imm = 0x130
	movl	-76(%rbp), %ecx
	movq	%rsi, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movq	-40(%rbp), %rsi
	movl	-44(%rbp), %ecx
	movl	%ecx, %edi
	movq	16(%rsi), %rsi
	shlq	$2, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	movl	(%rsi), %ecx
	movl	%ecx, -84(%rbp)
	movq	%rdx, %rsi
	addq	$400, %rsi              ## imm = 0x190
	movl	-76(%rbp), %ecx
	movq	%rsi, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %ecx
	movl	%ecx, %edi
	movq	16(%rsi), %rsi
	shlq	$2, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movl	(%rsi), %ecx
	movl	%ecx, -88(%rbp)
	movq	-64(%rbp), %rsi
	movl	-88(%rbp), %ecx
	imull	-84(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edi
	shlq	$4, %rdi
	addq	%rdi, %rsi
	movq	%rsi, -96(%rbp)
	cmpl	$1, -84(%rbp)
	movq	%rdx, -128(%rbp)        ## 8-byte Spill
	jne	LBB217_6
## BB#1:
	movq	-64(%rbp), %rax
	movq	%rax, -104(%rbp)
LBB217_2:                               ## =>This Inner Loop Header: Depth=1
	movq	-104(%rbp), %rax
	cmpq	-96(%rbp), %rax
	je	LBB217_5
## BB#3:                                ##   in Loop: Header=BB217_2 Depth=1
	movq	-104(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, (%rax)
	movq	8(%rcx), %rcx
	movq	%rcx, 8(%rax)
## BB#4:                                ##   in Loop: Header=BB217_2 Depth=1
	movq	-104(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -104(%rbp)
	movl	-80(%rbp), %ecx
	movq	-72(%rbp), %rax
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -72(%rbp)
	jmp	LBB217_2
LBB217_5:
	jmp	LBB217_11
LBB217_6:
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	movl	-80(%rbp), %eax
	imull	-88(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-64(%rbp), %rcx
	movq	%rcx, -120(%rbp)
LBB217_7:                               ## =>This Inner Loop Header: Depth=1
	movq	-120(%rbp), %rax
	cmpq	-96(%rbp), %rax
	je	LBB217_10
## BB#8:                                ##   in Loop: Header=BB217_7 Depth=1
	movq	-120(%rbp), %rsi
	movq	-72(%rbp), %rdx
	movl	-108(%rbp), %ecx
	movl	-112(%rbp), %r8d
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE3runEPS3_PKS3_jj
## BB#9:                                ##   in Loop: Header=BB217_7 Depth=1
	movl	-84(%rbp), %eax
	movq	-120(%rbp), %rcx
	movl	%eax, %eax
	movl	%eax, %edx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -120(%rbp)
	movl	-80(%rbp), %eax
	movq	-72(%rbp), %rcx
	movl	%eax, %eax
	movl	%eax, %edx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -72(%rbp)
	jmp	LBB217_7
LBB217_10:
	jmp	LBB217_11
LBB217_11:
	movl	-88(%rbp), %eax
	addl	$-2, %eax
	movl	%eax, %ecx
	subl	$3, %eax
	movq	%rcx, -136(%rbp)        ## 8-byte Spill
	movl	%eax, -140(%rbp)        ## 4-byte Spill
	ja	LBB217_16
## BB#18:
	leaq	LJTI217_0(%rip), %rax
	movq	-136(%rbp), %rcx        ## 8-byte Reload
	movslq	(%rax,%rcx,4), %rdx
	addq	%rax, %rdx
	jmpq	*%rdx
LBB217_12:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_2EPS3_jj
	jmp	LBB217_17
LBB217_13:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_3EPS3_jj
	jmp	LBB217_17
LBB217_14:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_4EPS3_jj
	jmp	LBB217_17
LBB217_15:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_5EPS3_jj
	jmp	LBB217_17
LBB217_16:
	movq	-64(%rbp), %rsi
	movl	-80(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-88(%rbp), %r8d
	movq	-128(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_NEPS3_jjj
LBB217_17:
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc
	.align	2, 0x90
L217_0_set_12 = LBB217_12-LJTI217_0
L217_0_set_13 = LBB217_13-LJTI217_0
L217_0_set_14 = LBB217_14-LJTI217_0
L217_0_set_15 = LBB217_15-LJTI217_0
LJTI217_0:
	.long	L217_0_set_12
	.long	L217_0_set_13
	.long	L217_0_set_14
	.long	L217_0_set_15

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED1Ev
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED1Ev
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED1Ev: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp993:
	.cfi_def_cfa_offset 16
Ltmp994:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp995:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED2Ev
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED2Ev
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED2Ev: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp996:
	.cfi_def_cfa_offset 16
Ltmp997:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp998:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	addq	$496, %rax              ## imm = 0x1F0
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	movq	-16(%rbp), %rax         ## 8-byte Reload
	addq	$400, %rax              ## imm = 0x190
	movq	%rax, %rdi
	callq	__ZN4arma8podarrayIjED1Ev
	movq	-16(%rbp), %rax         ## 8-byte Reload
	addq	$304, %rax              ## imm = 0x130
	movq	%rax, %rdi
	callq	__ZN4arma8podarrayIjED1Ev
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_2EPS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_2EPS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_2EPS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_2EPS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp999:
	.cfi_def_cfa_offset 16
Ltmp1000:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1001:
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movl	%edx, -132(%rbp)
	movl	%ecx, -136(%rbp)
	movq	-120(%rbp), %rsi
	movq	%rsi, -112(%rbp)
	movq	-112(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -104(%rbp)
	movq	-104(%rbp), %rsi
	movq	16(%rsi), %rsi
	movq	%rsi, -144(%rbp)
	movl	$0, -148(%rbp)
LBB220_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-148(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jae	LBB220_4
## BB#2:                                ##   in Loop: Header=BB220_1 Depth=1
	leaq	-168(%rbp), %rax
	movl	-148(%rbp), %ecx
	movl	-136(%rbp), %edx
	movl	%ecx, %esi
	addl	%edx, %esi
	movl	%esi, %edi
	movq	-128(%rbp), %r8
	shlq	$4, %rdi
	addq	%rdi, %r8
	movl	-132(%rbp), %edx
	imull	%edx, %ecx
	movl	%ecx, %edi
	movq	-144(%rbp), %r9
	shlq	$4, %rdi
	addq	%rdi, %r9
	movq	%r8, %rdi
	movq	%r9, %rsi
	movq	%rax, -192(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -168(%rbp)
	movsd	%xmm1, -160(%rbp)
	movl	-148(%rbp), %ecx
	movl	%ecx, %eax
	movl	%eax, %ecx
	movl	-136(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, %esi
	movq	-128(%rbp), %rdi
	shlq	$4, %rsi
	movq	%rdi, %r8
	addq	%rsi, %r8
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	%rdi, -56(%rbp)
	leaq	-168(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-64(%rbp), %rax
	leaq	-48(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movq	%rax, -16(%rbp)
	movsd	(%rax), %xmm0
	movsd	(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-32(%rbp), %rax
	movq	%rax, -8(%rbp)
	movsd	8(%rax), %xmm0
	movsd	8(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-48(%rbp), %xmm0
	movsd	-40(%rbp), %xmm1
	movsd	%xmm0, -184(%rbp)
	movsd	%xmm1, -176(%rbp)
	movq	-184(%rbp), %rax
	movq	%rax, (%r8)
	movq	-176(%rbp), %rax
	movq	%rax, 8(%r8)
	movl	-148(%rbp), %ecx
	movl	%ecx, %eax
	movq	-128(%rbp), %rsi
	shlq	$4, %rax
	addq	%rax, %rsi
	movq	%rsi, -88(%rbp)
	movq	-192(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -96(%rbp)
	movq	-88(%rbp), %rsi
	movq	-96(%rbp), %rdi
	movq	%rdi, -80(%rbp)
	movq	-80(%rbp), %rdi
	movsd	(%rdi), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-96(%rbp), %rdi
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rdi
	movsd	8(%rdi), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
## BB#3:                                ##   in Loop: Header=BB220_1 Depth=1
	movl	-148(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -148(%rbp)
	jmp	LBB220_1
LBB220_4:
	addq	$192, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI221_0:
	.quad	4602678819172646912     ## double 0.5
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_3EPS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_3EPS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_3EPS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_3EPS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1002:
	.cfi_def_cfa_offset 16
Ltmp1003:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1004:
	.cfi_def_cfa_register %rbp
	subq	$848, %rsp              ## imm = 0x350
	leaq	-96(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -8(%rbp)
	movq	%rdi, -608(%rbp)
	movq	%rsi, -616(%rbp)
	movl	%edx, -620(%rbp)
	movl	%ecx, -624(%rbp)
	movq	-608(%rbp), %rsi
	movq	%rax, %rdi
	addq	$80, %rdi
	movq	%rdi, -776(%rbp)        ## 8-byte Spill
	movq	%rsi, -784(%rbp)        ## 8-byte Spill
	movq	%rax, -792(%rbp)        ## 8-byte Spill
LBB221_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-792(%rbp), %rax        ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -584(%rbp)
	movsd	%xmm0, -592(%rbp)
	movsd	%xmm0, -600(%rbp)
	movq	-584(%rbp), %rcx
	movsd	-592(%rbp), %xmm0
	movsd	-600(%rbp), %xmm1
	movq	%rcx, -560(%rbp)
	movsd	%xmm0, -568(%rbp)
	movsd	%xmm1, -576(%rbp)
	movq	-560(%rbp), %rcx
	movsd	-568(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-576(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-776(%rbp), %rcx        ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -792(%rbp)        ## 8-byte Spill
	jne	LBB221_1
## BB#2:
	movq	-784(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -632(%rbp)
	movq	-632(%rbp), %rax
	movq	%rax, -640(%rbp)
	movl	-620(%rbp), %ecx
	imull	-624(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-632(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -104(%rbp)
	movq	-104(%rbp), %rax
	movsd	8(%rax), %xmm0
	movsd	%xmm0, -648(%rbp)
	movl	-624(%rbp), %ecx
	shll	$1, %ecx
	movl	%ecx, -652(%rbp)
	movl	-624(%rbp), %ecx
	movl	%ecx, -656(%rbp)
LBB221_3:                               ## =>This Inner Loop Header: Depth=1
	cmpl	$0, -656(%rbp)
	jbe	LBB221_6
## BB#4:                                ##   in Loop: Header=BB221_3 Depth=1
	leaq	-768(%rbp), %rax
	leaq	-96(%rbp), %rcx
	leaq	-752(%rbp), %rdx
	leaq	-736(%rbp), %rsi
	movsd	LCPI221_0(%rip), %xmm0
	leaq	-80(%rbp), %rdi
	movl	-624(%rbp), %r8d
	movl	%r8d, %r9d
	movq	-616(%rbp), %r10
	shlq	$4, %r9
	addq	%r9, %r10
	movq	-632(%rbp), %r9
	movq	%rdi, -800(%rbp)        ## 8-byte Spill
	movq	%r10, %rdi
	movq	%rsi, -808(%rbp)        ## 8-byte Spill
	movq	%r9, %rsi
	movq	%rax, -816(%rbp)        ## 8-byte Spill
	movq	%rcx, -824(%rbp)        ## 8-byte Spill
	movq	%rdx, -832(%rbp)        ## 8-byte Spill
	movsd	%xmm0, -840(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -672(%rbp)
	movsd	%xmm1, -664(%rbp)
	movq	-672(%rbp), %rax
	movq	-664(%rbp), %rcx
	movq	%rcx, -72(%rbp)
	movq	%rax, -80(%rbp)
	leaq	-64(%rbp), %rax
	movl	-652(%rbp), %r8d
	movl	%r8d, %ecx
	movq	-616(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	-640(%rbp), %rsi
	movq	%rdx, %rdi
	movq	%rax, -848(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -688(%rbp)
	movsd	%xmm1, -680(%rbp)
	movq	-688(%rbp), %rax
	movq	-680(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	%rax, -64(%rbp)
	movq	-800(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -176(%rbp)
	movq	-848(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -184(%rbp)
	movq	-176(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	8(%rdx), %rdx
	movq	%rdx, -160(%rbp)
	movq	%rsi, -168(%rbp)
	movq	-184(%rbp), %rdx
	leaq	-168(%rbp), %rsi
	movq	%rsi, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-144(%rbp), %rsi
	movq	%rdx, -136(%rbp)
	movsd	(%rdx), %xmm0
	movsd	(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-152(%rbp), %rdx
	movq	%rdx, -128(%rbp)
	movsd	8(%rdx), %xmm0
	movsd	8(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-168(%rbp), %xmm0
	movsd	-160(%rbp), %xmm1
	movsd	%xmm0, -704(%rbp)
	movsd	%xmm1, -696(%rbp)
	movq	-704(%rbp), %rdx
	movq	-696(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	%rdx, -96(%rbp)
	movsd	-648(%rbp), %xmm0
	leaq	-96(%rbp), %rdx
	movq	%rdx, -192(%rbp)
	movsd	%xmm0, -200(%rbp)
	movq	-192(%rbp), %rdx
	movsd	(%rdx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdx)
	movsd	-200(%rbp), %xmm0
	movsd	8(%rdx), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rdx)
	movq	%rax, -256(%rbp)
	movq	%rcx, -264(%rbp)
	movq	-256(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	8(%rdx), %rdx
	movq	%rdx, -240(%rbp)
	movq	%rsi, -248(%rbp)
	movq	-264(%rbp), %rdx
	leaq	-248(%rbp), %rsi
	movq	%rsi, -224(%rbp)
	movq	%rdx, -232(%rbp)
	movq	-224(%rbp), %rsi
	movq	%rdx, -216(%rbp)
	movsd	(%rdx), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-232(%rbp), %rdx
	movq	%rdx, -208(%rbp)
	movsd	8(%rdx), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-248(%rbp), %xmm0
	movsd	-240(%rbp), %xmm1
	movsd	%xmm0, -720(%rbp)
	movsd	%xmm1, -712(%rbp)
	movq	-720(%rbp), %rdx
	movq	%rdx, -48(%rbp)
	movq	-712(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movl	-624(%rbp), %r8d
	movl	%r8d, %edx
	movq	-616(%rbp), %rsi
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movq	-616(%rbp), %rdx
	movq	%rdx, -272(%rbp)
	movq	-272(%rbp), %rdx
	movsd	(%rdx), %xmm0
	movq	-824(%rbp), %rdx        ## 8-byte Reload
	addq	$48, %rdx
	movq	%rdx, -280(%rbp)
	movq	-280(%rbp), %rdx
	movsd	-840(%rbp), %xmm1       ## 8-byte Reload
	mulsd	(%rdx), %xmm1
	subsd	%xmm1, %xmm0
	movq	-616(%rbp), %rdx
	movq	%rdx, -288(%rbp)
	movq	-288(%rbp), %rdx
	movsd	8(%rdx), %xmm1
	movq	-824(%rbp), %rdx        ## 8-byte Reload
	addq	$48, %rdx
	movq	%rdx, -296(%rbp)
	movq	-296(%rbp), %rdx
	movsd	-840(%rbp), %xmm2       ## 8-byte Reload
	mulsd	8(%rdx), %xmm2
	subsd	%xmm2, %xmm1
	movq	-808(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -328(%rbp)
	movsd	%xmm0, -336(%rbp)
	movsd	%xmm1, -344(%rbp)
	movq	-328(%rbp), %rdi
	movsd	-336(%rbp), %xmm0
	movsd	-344(%rbp), %xmm1
	movq	%rdi, -304(%rbp)
	movsd	%xmm0, -312(%rbp)
	movsd	%xmm1, -320(%rbp)
	movq	-304(%rbp), %rdi
	movsd	-312(%rbp), %xmm0
	movsd	%xmm0, (%rdi)
	movsd	-320(%rbp), %xmm0
	movsd	%xmm0, 8(%rdi)
	movq	-736(%rbp), %rdi
	movq	%rdi, (%rsi)
	movq	-728(%rbp), %rdi
	movq	%rdi, 8(%rsi)
	movq	-616(%rbp), %rsi
	movq	-824(%rbp), %rdi        ## 8-byte Reload
	addq	$48, %rdi
	movq	%rsi, -368(%rbp)
	movq	%rdi, -376(%rbp)
	movq	-368(%rbp), %rsi
	movq	-376(%rbp), %rdi
	movq	%rdi, -360(%rbp)
	movq	-360(%rbp), %rdi
	movsd	(%rdi), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-376(%rbp), %rdi
	movq	%rdi, -352(%rbp)
	movq	-352(%rbp), %rdi
	movsd	8(%rdi), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movl	-652(%rbp), %r8d
	movl	%r8d, %esi
	movq	-616(%rbp), %rdi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movl	-624(%rbp), %r8d
	movl	%r8d, %esi
	movq	-616(%rbp), %r9
	shlq	$4, %rsi
	addq	%rsi, %r9
	movq	%r9, -384(%rbp)
	movq	-384(%rbp), %rsi
	movsd	(%rsi), %xmm0
	movq	-824(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -392(%rbp)
	movq	-392(%rbp), %r9
	addsd	8(%r9), %xmm0
	movl	-624(%rbp), %r8d
	movl	%r8d, %r9d
	movq	-616(%rbp), %r10
	shlq	$4, %r9
	addq	%r9, %r10
	movq	%r10, -400(%rbp)
	movq	-400(%rbp), %r9
	movsd	8(%r9), %xmm1
	movq	%rsi, -408(%rbp)
	movq	-408(%rbp), %r9
	subsd	(%r9), %xmm1
	movq	-832(%rbp), %r9         ## 8-byte Reload
	movq	%r9, -440(%rbp)
	movsd	%xmm0, -448(%rbp)
	movsd	%xmm1, -456(%rbp)
	movq	-440(%rbp), %r10
	movsd	-448(%rbp), %xmm0
	movsd	-456(%rbp), %xmm1
	movq	%r10, -416(%rbp)
	movsd	%xmm0, -424(%rbp)
	movsd	%xmm1, -432(%rbp)
	movq	-416(%rbp), %r10
	movsd	-424(%rbp), %xmm0
	movsd	%xmm0, (%r10)
	movsd	-432(%rbp), %xmm0
	movsd	%xmm0, 8(%r10)
	movq	-752(%rbp), %r10
	movq	%r10, (%rdi)
	movq	-744(%rbp), %r10
	movq	%r10, 8(%rdi)
	movl	-624(%rbp), %r8d
	movl	%r8d, %edi
	movq	-616(%rbp), %r10
	shlq	$4, %rdi
	addq	%rdi, %r10
	movq	%rsi, -464(%rbp)
	movq	-464(%rbp), %rdi
	movsd	8(%rdi), %xmm0
	movd	%xmm0, %rdi
	movabsq	$-9223372036854775808, %r11 ## imm = 0x8000000000000000
	xorq	%r11, %rdi
	movd	%rdi, %xmm0
	movq	%rsi, -472(%rbp)
	movq	-472(%rbp), %rdi
	movsd	(%rdi), %xmm1
	movq	-816(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -504(%rbp)
	movsd	%xmm0, -512(%rbp)
	movsd	%xmm1, -520(%rbp)
	movq	-504(%rbp), %r11
	movsd	-512(%rbp), %xmm0
	movsd	-520(%rbp), %xmm1
	movq	%r11, -480(%rbp)
	movsd	%xmm0, -488(%rbp)
	movsd	%xmm1, -496(%rbp)
	movq	-480(%rbp), %r11
	movsd	-488(%rbp), %xmm0
	movsd	%xmm0, (%r11)
	movsd	-496(%rbp), %xmm0
	movsd	%xmm0, 8(%r11)
	movq	%r10, -544(%rbp)
	movq	%rdi, -552(%rbp)
	movq	-544(%rbp), %r10
	movq	-552(%rbp), %r11
	movq	%r11, -536(%rbp)
	movq	-536(%rbp), %r11
	movsd	(%r11), %xmm0
	movsd	(%r10), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r10)
	movq	-552(%rbp), %r11
	movq	%r11, -528(%rbp)
	movq	-528(%rbp), %r11
	movsd	8(%r11), %xmm0
	movsd	8(%r10), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r10)
	movq	-616(%rbp), %r10
	addq	$16, %r10
	movq	%r10, -616(%rbp)
	movl	-620(%rbp), %r8d
	movq	-632(%rbp), %r10
	movl	%r8d, %r8d
	movl	%r8d, %r11d
	shlq	$4, %r11
	addq	%r11, %r10
	movq	%r10, -632(%rbp)
	movl	-620(%rbp), %r8d
	shll	$1, %r8d
	movq	-640(%rbp), %r10
	movl	%r8d, %r8d
	movl	%r8d, %r11d
	shlq	$4, %r11
	addq	%r11, %r10
	movq	%r10, -640(%rbp)
## BB#5:                                ##   in Loop: Header=BB221_3 Depth=1
	movl	-656(%rbp), %eax
	addl	$4294967295, %eax       ## imm = 0xFFFFFFFF
	movl	%eax, -656(%rbp)
	jmp	LBB221_3
LBB221_6:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-8(%rbp), %rax
	jne	LBB221_8
## BB#7:                                ## %SP_return
	addq	$848, %rsp              ## imm = 0x350
	popq	%rbp
	retq
LBB221_8:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_4EPS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_4EPS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_4EPS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_4EPS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1005:
	.cfi_def_cfa_offset 16
Ltmp1006:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1007:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$984, %rsp              ## imm = 0x3D8
Ltmp1008:
	.cfi_offset %rbx, -24
	leaq	-128(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -16(%rbp)
	movq	%rdi, -744(%rbp)
	movq	%rsi, -752(%rbp)
	movl	%edx, -756(%rbp)
	movl	%ecx, -760(%rbp)
	movq	-744(%rbp), %rsi
	movq	%rax, %rdi
	addq	$112, %rdi
	movq	%rdi, -936(%rbp)        ## 8-byte Spill
	movq	%rsi, -944(%rbp)        ## 8-byte Spill
	movq	%rax, -952(%rbp)        ## 8-byte Spill
LBB222_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-952(%rbp), %rax        ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -720(%rbp)
	movsd	%xmm0, -728(%rbp)
	movsd	%xmm0, -736(%rbp)
	movq	-720(%rbp), %rcx
	movsd	-728(%rbp), %xmm0
	movsd	-736(%rbp), %xmm1
	movq	%rcx, -696(%rbp)
	movsd	%xmm0, -704(%rbp)
	movsd	%xmm1, -712(%rbp)
	movq	-696(%rbp), %rcx
	movsd	-704(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-712(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-936(%rbp), %rcx        ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -952(%rbp)        ## 8-byte Spill
	jne	LBB222_1
## BB#2:
	movq	-944(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -368(%rbp)
	movq	-368(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -360(%rbp)
	movq	-360(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -768(%rbp)
	movl	-760(%rbp), %ecx
	shll	$1, %ecx
	movl	%ecx, -772(%rbp)
	imull	$3, -760(%rbp), %ecx
	movl	%ecx, -776(%rbp)
	movl	$0, -780(%rbp)
LBB222_3:                               ## =>This Inner Loop Header: Depth=1
	movl	-780(%rbp), %eax
	cmpl	-760(%rbp), %eax
	jae	LBB222_9
## BB#4:                                ##   in Loop: Header=BB222_3 Depth=1
	xorl	%eax, %eax
	movb	%al, %cl
	leaq	-128(%rbp), %rdx
	movl	-780(%rbp), %eax
	movl	-760(%rbp), %esi
	movl	%eax, %edi
	addl	%esi, %edi
	movl	%edi, %r8d
	movq	-752(%rbp), %r9
	shlq	$4, %r8
	addq	%r8, %r9
	movl	-756(%rbp), %esi
	imull	%esi, %eax
	movl	%eax, %r8d
	movq	-768(%rbp), %r10
	shlq	$4, %r8
	addq	%r8, %r10
	movq	%r9, %rdi
	movq	%r10, %rsi
	movb	%cl, -953(%rbp)         ## 1-byte Spill
	movq	%rdx, -968(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -800(%rbp)
	movsd	%xmm1, -792(%rbp)
	movq	-800(%rbp), %rdx
	movq	-792(%rbp), %rsi
	movq	%rsi, -120(%rbp)
	movq	%rdx, -128(%rbp)
	leaq	-96(%rbp), %rdx
	movl	-780(%rbp), %eax
	movl	-776(%rbp), %r11d
	movl	%eax, %ebx
	addl	%r11d, %ebx
	movl	%ebx, %esi
	movq	-752(%rbp), %rdi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movl	-756(%rbp), %r11d
	imull	%r11d, %eax
	movl	%eax, %esi
	leal	(%rsi,%rsi,2), %eax
	movl	%eax, %esi
	movq	-768(%rbp), %r8
	shlq	$4, %rsi
	addq	%rsi, %r8
	movq	%r8, %rsi
	movq	%rdx, -976(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -816(%rbp)
	movsd	%xmm1, -808(%rbp)
	movq	-816(%rbp), %rdx
	movq	-808(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	%rdx, -96(%rbp)
	leaq	-128(%rbp), %rdx
	movq	%rdx, -184(%rbp)
	movq	-976(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -192(%rbp)
	movq	-184(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	8(%rdx), %rdx
	movq	%rdx, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	-192(%rbp), %rdx
	leaq	-176(%rbp), %rsi
	movq	%rsi, -152(%rbp)
	movq	%rdx, -160(%rbp)
	movq	-152(%rbp), %rsi
	movq	%rdx, -144(%rbp)
	movsd	(%rdx), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-160(%rbp), %rdx
	movq	%rdx, -136(%rbp)
	movsd	8(%rdx), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-176(%rbp), %xmm0
	movsd	-168(%rbp), %xmm1
	movsd	%xmm0, -832(%rbp)
	movsd	%xmm1, -824(%rbp)
	movq	-832(%rbp), %rdx
	movq	%rdx, -80(%rbp)
	movq	-824(%rbp), %rdx
	movq	%rdx, -72(%rbp)
	movq	-968(%rbp), %rdx        ## 8-byte Reload
	addq	$64, %rdx
	movb	-953(%rbp), %cl         ## 1-byte Reload
	testb	$1, %cl
	movq	%rdx, -984(%rbp)        ## 8-byte Spill
	jne	LBB222_5
	jmp	LBB222_6
LBB222_5:                               ##   in Loop: Header=BB222_3 Depth=1
	leaq	-848(%rbp), %rax
	leaq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$32, %rdx
	movq	%rdx, -200(%rbp)
	movq	-200(%rbp), %rdx
	movsd	8(%rdx), %xmm0
	movq	%rcx, -208(%rbp)
	movq	-208(%rbp), %rdx
	subsd	8(%rdx), %xmm0
	movq	%rcx, -216(%rbp)
	movq	-216(%rbp), %rdx
	movsd	(%rdx), %xmm1
	addq	$32, %rcx
	movq	%rcx, -224(%rbp)
	movq	-224(%rbp), %rcx
	subsd	(%rcx), %xmm1
	movq	%rax, -256(%rbp)
	movsd	%xmm0, -264(%rbp)
	movsd	%xmm1, -272(%rbp)
	movq	-256(%rbp), %rax
	movsd	-264(%rbp), %xmm0
	movsd	-272(%rbp), %xmm1
	movq	%rax, -232(%rbp)
	movsd	%xmm0, -240(%rbp)
	movsd	%xmm1, -248(%rbp)
	movq	-232(%rbp), %rax
	movsd	-240(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-248(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
	jmp	LBB222_7
LBB222_6:                               ##   in Loop: Header=BB222_3 Depth=1
	leaq	-848(%rbp), %rax
	leaq	-128(%rbp), %rcx
	movq	%rcx, -280(%rbp)
	movq	-280(%rbp), %rdx
	movsd	8(%rdx), %xmm0
	movq	%rcx, %rdx
	addq	$32, %rdx
	movq	%rdx, -288(%rbp)
	movq	-288(%rbp), %rdx
	subsd	8(%rdx), %xmm0
	movq	%rcx, %rdx
	addq	$32, %rdx
	movq	%rdx, -296(%rbp)
	movq	-296(%rbp), %rdx
	movsd	(%rdx), %xmm1
	movq	%rcx, -304(%rbp)
	movq	-304(%rbp), %rcx
	subsd	(%rcx), %xmm1
	movq	%rax, -336(%rbp)
	movsd	%xmm0, -344(%rbp)
	movsd	%xmm1, -352(%rbp)
	movq	-336(%rbp), %rax
	movsd	-344(%rbp), %xmm0
	movsd	-352(%rbp), %xmm1
	movq	%rax, -312(%rbp)
	movsd	%xmm0, -320(%rbp)
	movsd	%xmm1, -328(%rbp)
	movq	-312(%rbp), %rax
	movsd	-320(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-328(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
LBB222_7:                               ##   in Loop: Header=BB222_3 Depth=1
	movq	-848(%rbp), %rax
	movq	-840(%rbp), %rcx
	movq	-984(%rbp), %rdx        ## 8-byte Reload
	movq	%rcx, 8(%rdx)
	movq	%rax, (%rdx)
	leaq	-112(%rbp), %rax
	movl	-780(%rbp), %esi
	movl	-772(%rbp), %edi
	movl	%esi, %r8d
	addl	%edi, %r8d
	movl	%r8d, %ecx
	movq	-752(%rbp), %r9
	shlq	$4, %rcx
	addq	%rcx, %r9
	movl	-756(%rbp), %edi
	imull	%edi, %esi
	addl	%esi, %esi
	movl	%esi, %ecx
	movq	-768(%rbp), %r10
	shlq	$4, %rcx
	addq	%rcx, %r10
	movq	%r9, %rdi
	movq	%r10, %rsi
	movq	%rax, -992(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -864(%rbp)
	movsd	%xmm1, -856(%rbp)
	movq	-864(%rbp), %rax
	movq	-856(%rbp), %rcx
	movq	%rcx, -104(%rbp)
	movq	%rax, -112(%rbp)
	leaq	-48(%rbp), %rax
	movl	-780(%rbp), %r8d
	movl	%r8d, %ecx
	movq	-752(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	%rdx, -424(%rbp)
	movq	-992(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -432(%rbp)
	movq	-424(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	8(%rdx), %rdx
	movq	%rdx, -408(%rbp)
	movq	%rsi, -416(%rbp)
	movq	-432(%rbp), %rdx
	leaq	-416(%rbp), %rsi
	movq	%rsi, -392(%rbp)
	movq	%rdx, -400(%rbp)
	movq	-392(%rbp), %rsi
	movq	%rdx, -384(%rbp)
	movsd	(%rdx), %xmm0
	movsd	(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-400(%rbp), %rdx
	movq	%rdx, -376(%rbp)
	movsd	8(%rdx), %xmm0
	movsd	8(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-416(%rbp), %xmm0
	movsd	-408(%rbp), %xmm1
	movsd	%xmm0, -880(%rbp)
	movsd	%xmm1, -872(%rbp)
	movq	-880(%rbp), %rdx
	movq	-872(%rbp), %rsi
	movq	%rsi, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movl	-780(%rbp), %r8d
	movl	%r8d, %edx
	movq	-752(%rbp), %rsi
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movq	%rsi, -456(%rbp)
	movq	%rcx, -464(%rbp)
	movq	-456(%rbp), %rdx
	movq	%rcx, -448(%rbp)
	movsd	-112(%rbp), %xmm0
	movsd	(%rdx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdx)
	movq	-464(%rbp), %rsi
	movq	%rsi, -440(%rbp)
	movsd	8(%rsi), %xmm0
	movsd	8(%rdx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rdx)
	movl	-780(%rbp), %r8d
	movl	%r8d, %edx
	movl	%edx, %r8d
	movl	-772(%rbp), %r11d
	addl	%r11d, %r8d
	movl	%r8d, %esi
	movq	-752(%rbp), %rdi
	shlq	$4, %rsi
	shlq	$4, %rdx
	movq	%rdi, %r9
	addq	%rdx, %r9
	leaq	-80(%rbp), %rdx
	movq	%r9, -520(%rbp)
	movq	%rdx, -528(%rbp)
	movq	-520(%rbp), %r9
	movq	(%r9), %r10
	movq	8(%r9), %r9
	movq	%r9, -504(%rbp)
	movq	%r10, -512(%rbp)
	movq	-528(%rbp), %r9
	leaq	-512(%rbp), %r10
	movq	%r10, -488(%rbp)
	movq	%r9, -496(%rbp)
	movq	-488(%rbp), %r10
	movq	%r9, -480(%rbp)
	movsd	(%r9), %xmm0
	movsd	(%r10), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r10)
	movq	-496(%rbp), %r9
	movq	%r9, -472(%rbp)
	movsd	8(%r9), %xmm0
	movsd	8(%r10), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r10)
	movsd	-512(%rbp), %xmm0
	movsd	-504(%rbp), %xmm1
	movsd	%xmm0, -896(%rbp)
	movsd	%xmm1, -888(%rbp)
	movq	-896(%rbp), %r9
	movq	-888(%rbp), %r10
	movq	%r10, 8(%rdi,%rsi)
	movq	%r9, (%rdi,%rsi)
	movl	-780(%rbp), %r8d
	movl	%r8d, %esi
	movq	-752(%rbp), %rdi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movq	%rdi, -552(%rbp)
	movq	%rdx, -560(%rbp)
	movq	-552(%rbp), %rsi
	movq	%rdx, -544(%rbp)
	movsd	-80(%rbp), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-560(%rbp), %rdx
	movq	%rdx, -536(%rbp)
	movsd	8(%rdx), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movl	-780(%rbp), %r8d
	movl	-760(%rbp), %r11d
	addl	%r11d, %r8d
	movl	%r8d, %edx
	movq	-752(%rbp), %rsi
	shlq	$4, %rdx
	leaq	-64(%rbp), %rdi
	movq	%rax, -616(%rbp)
	movq	%rdi, -624(%rbp)
	movq	-616(%rbp), %r9
	movq	(%r9), %r10
	movq	8(%r9), %r9
	movq	%r9, -600(%rbp)
	movq	%r10, -608(%rbp)
	movq	-624(%rbp), %r9
	leaq	-608(%rbp), %r10
	movq	%r10, -584(%rbp)
	movq	%r9, -592(%rbp)
	movq	-584(%rbp), %r10
	movq	%r9, -576(%rbp)
	movsd	(%r9), %xmm0
	movsd	(%r10), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r10)
	movq	-592(%rbp), %r9
	movq	%r9, -568(%rbp)
	movsd	8(%r9), %xmm0
	movsd	8(%r10), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r10)
	movsd	-608(%rbp), %xmm0
	movsd	-600(%rbp), %xmm1
	movsd	%xmm0, -912(%rbp)
	movsd	%xmm1, -904(%rbp)
	movq	-912(%rbp), %r9
	movq	-904(%rbp), %r10
	movq	%r10, 8(%rsi,%rdx)
	movq	%r9, (%rsi,%rdx)
	movl	-780(%rbp), %r8d
	movl	-776(%rbp), %r11d
	addl	%r11d, %r8d
	movl	%r8d, %edx
	movq	-752(%rbp), %rsi
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movq	%rax, -680(%rbp)
	movq	%rdi, -688(%rbp)
	movq	-680(%rbp), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	movq	%rax, -664(%rbp)
	movq	%rdx, -672(%rbp)
	movq	-688(%rbp), %rax
	leaq	-672(%rbp), %rdx
	movq	%rdx, -648(%rbp)
	movq	%rax, -656(%rbp)
	movq	-648(%rbp), %rdx
	movq	%rax, -640(%rbp)
	movsd	(%rax), %xmm0
	movsd	(%rdx), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdx)
	movq	-656(%rbp), %rax
	movq	%rax, -632(%rbp)
	movsd	8(%rax), %xmm0
	movsd	8(%rdx), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rdx)
	movsd	-672(%rbp), %xmm0
	movsd	-664(%rbp), %xmm1
	movsd	%xmm0, -928(%rbp)
	movsd	%xmm1, -920(%rbp)
	movq	-928(%rbp), %rax
	movq	%rax, (%rsi)
	movq	-920(%rbp), %rax
	movq	%rax, 8(%rsi)
## BB#8:                                ##   in Loop: Header=BB222_3 Depth=1
	movl	-780(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -780(%rbp)
	jmp	LBB222_3
LBB222_9:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-16(%rbp), %rax
	jne	LBB222_11
## BB#10:                               ## %SP_return
	addq	$984, %rsp              ## imm = 0x3D8
	popq	%rbx
	popq	%rbp
	retq
LBB222_11:                              ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__TEXT,__literal16,16byte_literals
	.align	4
LCPI223_0:
	.quad	-9223372036854775808    ## double -0.000000e+00
	.quad	-9223372036854775808    ## double -0.000000e+00
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_5EPS3_jj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_5EPS3_jj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_5EPS3_jj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_5EPS3_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1009:
	.cfi_def_cfa_offset 16
Ltmp1010:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1011:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1800, %rsp             ## imm = 0x708
Ltmp1012:
	.cfi_offset %rbx, -56
Ltmp1013:
	.cfi_offset %r12, -48
Ltmp1014:
	.cfi_offset %r13, -40
Ltmp1015:
	.cfi_offset %r14, -32
Ltmp1016:
	.cfi_offset %r15, -24
	leaq	-256(%rbp), %rax
	movq	___stack_chk_guard@GOTPCREL(%rip), %r8
	movq	(%r8), %r8
	movq	%r8, -48(%rbp)
	movq	%rdi, -1384(%rbp)
	movq	%rsi, -1392(%rbp)
	movl	%edx, -1396(%rbp)
	movl	%ecx, -1400(%rbp)
	movq	-1384(%rbp), %rsi
	movq	%rax, %rdi
	addq	$208, %rdi
	movq	%rdi, -1784(%rbp)       ## 8-byte Spill
	movq	%rsi, -1792(%rbp)       ## 8-byte Spill
	movq	%rax, -1800(%rbp)       ## 8-byte Spill
LBB223_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-1800(%rbp), %rax       ## 8-byte Reload
	xorps	%xmm0, %xmm0
	movq	%rax, -1360(%rbp)
	movsd	%xmm0, -1368(%rbp)
	movsd	%xmm0, -1376(%rbp)
	movq	-1360(%rbp), %rcx
	movsd	-1368(%rbp), %xmm0
	movsd	-1376(%rbp), %xmm1
	movq	%rcx, -1336(%rbp)
	movsd	%xmm0, -1344(%rbp)
	movsd	%xmm1, -1352(%rbp)
	movq	-1336(%rbp), %rcx
	movsd	-1344(%rbp), %xmm0
	movsd	%xmm0, (%rcx)
	movsd	-1352(%rbp), %xmm0
	movsd	%xmm0, 8(%rcx)
	addq	$16, %rax
	movq	-1784(%rbp), %rcx       ## 8-byte Reload
	cmpq	%rcx, %rax
	movq	%rax, -1800(%rbp)       ## 8-byte Spill
	jne	LBB223_1
## BB#2:
	movq	-1792(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -304(%rbp)
	movq	-304(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -1408(%rbp)
	movl	-1396(%rbp), %ecx
	shll	$0, %ecx
	imull	-1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-1408(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -288(%rbp)
	movq	-288(%rbp), %rax
	movsd	(%rax), %xmm0
	movsd	%xmm0, -1416(%rbp)
	movl	-1396(%rbp), %ecx
	shll	$0, %ecx
	imull	-1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-1408(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -280(%rbp)
	movq	-280(%rbp), %rax
	movsd	8(%rax), %xmm0
	movsd	%xmm0, -1424(%rbp)
	movl	-1396(%rbp), %ecx
	shll	$1, %ecx
	imull	-1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-1408(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -272(%rbp)
	movq	-272(%rbp), %rax
	movsd	(%rax), %xmm0
	movsd	%xmm0, -1432(%rbp)
	movl	-1396(%rbp), %ecx
	shll	$1, %ecx
	imull	-1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %eax
	movq	-1408(%rbp), %rdx
	shlq	$4, %rax
	addq	%rax, %rdx
	movq	%rdx, -264(%rbp)
	movq	-264(%rbp), %rax
	movsd	8(%rax), %xmm0
	movsd	%xmm0, -1440(%rbp)
	movq	-1392(%rbp), %rax
	movq	%rax, -1448(%rbp)
	movq	-1392(%rbp), %rax
	movl	-1400(%rbp), %ecx
	shll	$0, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1456(%rbp)
	movq	-1392(%rbp), %rax
	movl	-1400(%rbp), %ecx
	shll	$1, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1464(%rbp)
	movq	-1392(%rbp), %rax
	imull	$3, -1400(%rbp), %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1472(%rbp)
	movq	-1392(%rbp), %rax
	movl	-1400(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, %ecx
	movl	%ecx, %edx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movq	%rax, -1480(%rbp)
	movl	$0, -1484(%rbp)
LBB223_3:                               ## =>This Inner Loop Header: Depth=1
	movl	-1484(%rbp), %eax
	cmpl	-1400(%rbp), %eax
	jae	LBB223_6
## BB#4:                                ##   in Loop: Header=BB223_3 Depth=1
	movq	-1448(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rax, -248(%rbp)
	movq	%rcx, -256(%rbp)
	leaq	-240(%rbp), %rax
	movq	-1456(%rbp), %rdi
	movl	-1396(%rbp), %edx
	movl	-1484(%rbp), %esi
	imull	%esi, %edx
	movl	%edx, %ecx
	movq	-1408(%rbp), %r8
	shlq	$4, %rcx
	addq	%rcx, %r8
	movq	%r8, %rsi
	movq	%rax, -1808(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -1504(%rbp)
	movsd	%xmm1, -1496(%rbp)
	movq	-1504(%rbp), %rax
	movq	-1496(%rbp), %rcx
	movq	%rcx, -232(%rbp)
	movq	%rax, -240(%rbp)
	leaq	-224(%rbp), %rax
	movq	-1464(%rbp), %rdi
	movl	-1396(%rbp), %edx
	movl	-1484(%rbp), %r9d
	imull	%r9d, %edx
	addl	%edx, %edx
	movl	%edx, %ecx
	movq	-1408(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movq	%rax, -1816(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -1520(%rbp)
	movsd	%xmm1, -1512(%rbp)
	movq	-1520(%rbp), %rax
	movq	-1512(%rbp), %rcx
	movq	%rcx, -216(%rbp)
	movq	%rax, -224(%rbp)
	leaq	-208(%rbp), %rax
	movq	-1472(%rbp), %rdi
	movl	-1396(%rbp), %edx
	movl	-1484(%rbp), %r9d
	imull	%r9d, %edx
	movl	%edx, %ecx
	leal	(%rcx,%rcx,2), %edx
	movl	%edx, %ecx
	movq	-1408(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movq	%rax, -1824(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -1536(%rbp)
	movsd	%xmm1, -1528(%rbp)
	movq	-1536(%rbp), %rax
	movq	-1528(%rbp), %rcx
	movq	%rcx, -200(%rbp)
	movq	%rax, -208(%rbp)
	leaq	-192(%rbp), %rax
	movq	-1480(%rbp), %rdi
	movl	-1396(%rbp), %edx
	movl	-1484(%rbp), %r9d
	imull	%r9d, %edx
	shll	$2, %edx
	movl	%edx, %ecx
	movq	-1408(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movq	%rax, -1832(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	movsd	%xmm0, -1552(%rbp)
	movsd	%xmm1, -1544(%rbp)
	movq	-1552(%rbp), %rax
	movq	-1544(%rbp), %rcx
	movq	%rcx, -184(%rbp)
	movq	%rax, -192(%rbp)
	leaq	-144(%rbp), %rax
	movq	-1808(%rbp), %rcx       ## 8-byte Reload
	movq	%rcx, -360(%rbp)
	movq	-1832(%rbp), %rsi       ## 8-byte Reload
	movq	%rsi, -368(%rbp)
	movq	-360(%rbp), %rdi
	movq	(%rdi), %r8
	movq	8(%rdi), %rdi
	movq	%rdi, -344(%rbp)
	movq	%r8, -352(%rbp)
	movq	-368(%rbp), %rdi
	leaq	-352(%rbp), %r8
	movq	%r8, -328(%rbp)
	movq	%rdi, -336(%rbp)
	movq	-328(%rbp), %r8
	movq	%rdi, -320(%rbp)
	movsd	(%rdi), %xmm0
	movsd	(%r8), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r8)
	movq	-336(%rbp), %rdi
	movq	%rdi, -312(%rbp)
	movsd	8(%rdi), %xmm0
	movsd	8(%r8), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r8)
	movsd	-352(%rbp), %xmm0
	movsd	-344(%rbp), %xmm1
	movsd	%xmm0, -1568(%rbp)
	movsd	%xmm1, -1560(%rbp)
	movq	-1568(%rbp), %rdi
	movq	-1560(%rbp), %r8
	movq	%r8, -136(%rbp)
	movq	%rdi, -144(%rbp)
	leaq	-128(%rbp), %rdi
	movq	-1816(%rbp), %r8        ## 8-byte Reload
	movq	%r8, -424(%rbp)
	movq	-1824(%rbp), %r10       ## 8-byte Reload
	movq	%r10, -432(%rbp)
	movq	-424(%rbp), %r11
	movq	(%r11), %rbx
	movq	8(%r11), %r11
	movq	%r11, -408(%rbp)
	movq	%rbx, -416(%rbp)
	movq	-432(%rbp), %r11
	leaq	-416(%rbp), %rbx
	movq	%rbx, -392(%rbp)
	movq	%r11, -400(%rbp)
	movq	-392(%rbp), %rbx
	movq	%r11, -384(%rbp)
	movsd	(%r11), %xmm0
	movsd	(%rbx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rbx)
	movq	-400(%rbp), %r11
	movq	%r11, -376(%rbp)
	movsd	8(%r11), %xmm0
	movsd	8(%rbx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rbx)
	movsd	-416(%rbp), %xmm0
	movsd	-408(%rbp), %xmm1
	movsd	%xmm0, -1584(%rbp)
	movsd	%xmm1, -1576(%rbp)
	movq	-1584(%rbp), %r11
	movq	-1576(%rbp), %rbx
	movq	%rbx, -120(%rbp)
	movq	%r11, -128(%rbp)
	leaq	-112(%rbp), %r11
	movq	%r8, -488(%rbp)
	movq	%r10, -496(%rbp)
	movq	-488(%rbp), %rbx
	movq	(%rbx), %r14
	movq	8(%rbx), %rbx
	movq	%rbx, -472(%rbp)
	movq	%r14, -480(%rbp)
	movq	-496(%rbp), %rbx
	leaq	-480(%rbp), %r14
	movq	%r14, -456(%rbp)
	movq	%rbx, -464(%rbp)
	movq	-456(%rbp), %r14
	movq	%rbx, -448(%rbp)
	movsd	(%rbx), %xmm0
	movsd	(%r14), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r14)
	movq	-464(%rbp), %rbx
	movq	%rbx, -440(%rbp)
	movsd	8(%rbx), %xmm0
	movsd	8(%r14), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r14)
	movsd	-480(%rbp), %xmm0
	movsd	-472(%rbp), %xmm1
	movsd	%xmm0, -1600(%rbp)
	movsd	%xmm1, -1592(%rbp)
	movq	-1600(%rbp), %rbx
	movq	-1592(%rbp), %r14
	movq	%r14, -104(%rbp)
	movq	%rbx, -112(%rbp)
	leaq	-96(%rbp), %rbx
	movq	%rcx, -552(%rbp)
	movq	%rsi, -560(%rbp)
	movq	-552(%rbp), %r14
	movq	(%r14), %r15
	movq	8(%r14), %r14
	movq	%r14, -536(%rbp)
	movq	%r15, -544(%rbp)
	movq	-560(%rbp), %r14
	leaq	-544(%rbp), %r15
	movq	%r15, -520(%rbp)
	movq	%r14, -528(%rbp)
	movq	-520(%rbp), %r15
	movq	%r14, -512(%rbp)
	movsd	(%r14), %xmm0
	movsd	(%r15), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r15)
	movq	-528(%rbp), %r14
	movq	%r14, -504(%rbp)
	movsd	8(%r14), %xmm0
	movsd	8(%r15), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r15)
	movsd	-544(%rbp), %xmm0
	movsd	-536(%rbp), %xmm1
	movsd	%xmm0, -1616(%rbp)
	movsd	%xmm1, -1608(%rbp)
	movq	-1616(%rbp), %r14
	movq	-1608(%rbp), %r15
	movq	%r15, -88(%rbp)
	movq	%r14, -96(%rbp)
	movq	-1448(%rbp), %r14
	movq	%r14, -584(%rbp)
	movq	%rax, -592(%rbp)
	movq	-584(%rbp), %r14
	movq	%rax, -576(%rbp)
	movsd	-144(%rbp), %xmm0
	movsd	(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r14)
	movq	-592(%rbp), %r15
	movq	%r15, -568(%rbp)
	movsd	8(%r15), %xmm0
	movsd	8(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r14)
	movq	-1448(%rbp), %r14
	movq	%r14, -616(%rbp)
	movq	%rdi, -624(%rbp)
	movq	-616(%rbp), %r14
	movq	%rdi, -608(%rbp)
	movsd	-128(%rbp), %xmm0
	movsd	(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r14)
	movq	-624(%rbp), %r15
	movq	%r15, -600(%rbp)
	movsd	8(%r15), %xmm0
	movsd	8(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r14)
	leaq	-176(%rbp), %r14
	movq	%rax, -632(%rbp)
	movsd	-144(%rbp), %xmm0
	movsd	-1416(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movq	%rdi, -640(%rbp)
	movsd	-128(%rbp), %xmm1
	movsd	-1432(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movq	%rax, -648(%rbp)
	movsd	-136(%rbp), %xmm1
	movsd	-1416(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	movq	%rdi, -656(%rbp)
	movsd	-120(%rbp), %xmm2
	movsd	-1432(%rbp), %xmm3
	mulsd	%xmm3, %xmm2
	addsd	%xmm2, %xmm1
	leaq	-1648(%rbp), %r15
	movq	%r15, -688(%rbp)
	movsd	%xmm0, -696(%rbp)
	movsd	%xmm1, -704(%rbp)
	movq	-688(%rbp), %r12
	movsd	-696(%rbp), %xmm0
	movq	%r12, -664(%rbp)
	movsd	%xmm0, -672(%rbp)
	movsd	%xmm1, -680(%rbp)
	movq	-664(%rbp), %r12
	movsd	-672(%rbp), %xmm0
	movsd	%xmm0, (%r12)
	movsd	-680(%rbp), %xmm0
	movsd	%xmm0, 8(%r12)
	leaq	-256(%rbp), %r12
	movq	%r12, -760(%rbp)
	movq	%r15, -768(%rbp)
	movq	-760(%rbp), %r15
	movq	(%r15), %r13
	movq	8(%r15), %r15
	movq	%r15, -744(%rbp)
	movq	%r13, -752(%rbp)
	movq	-768(%rbp), %r15
	leaq	-752(%rbp), %r13
	movq	%r13, -728(%rbp)
	movq	%r15, -736(%rbp)
	movq	-728(%rbp), %r13
	movq	%r15, -720(%rbp)
	movsd	(%r15), %xmm0
	movsd	(%r13), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r13)
	movq	-736(%rbp), %r15
	movq	%r15, -712(%rbp)
	movsd	8(%r15), %xmm0
	movsd	8(%r13), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r13)
	movsd	-752(%rbp), %xmm0
	movsd	-744(%rbp), %xmm1
	movsd	%xmm0, -1632(%rbp)
	movsd	%xmm1, -1624(%rbp)
	movq	-1632(%rbp), %r15
	movq	-1624(%rbp), %r13
	movq	%r13, -168(%rbp)
	movq	%r15, -176(%rbp)
	leaq	-160(%rbp), %r15
	movq	%rbx, -776(%rbp)
	movsd	-88(%rbp), %xmm0
	movsd	-1424(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movq	%r11, -784(%rbp)
	movsd	-104(%rbp), %xmm1
	movsd	-1440(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movq	%rbx, -792(%rbp)
	movsd	-96(%rbp), %xmm1
	movsd	-1424(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	movsd	LCPI223_0(%rip), %xmm2
	xorpd	%xmm2, %xmm1
	movq	%r11, -800(%rbp)
	movsd	-112(%rbp), %xmm2
	movsd	-1440(%rbp), %xmm3
	mulsd	%xmm3, %xmm2
	subsd	%xmm2, %xmm1
	leaq	-1664(%rbp), %r13
	movq	%r13, -832(%rbp)
	movsd	%xmm0, -840(%rbp)
	movsd	%xmm1, -848(%rbp)
	movq	-832(%rbp), %r13
	movsd	-840(%rbp), %xmm0
	movq	%r13, -808(%rbp)
	movsd	%xmm0, -816(%rbp)
	movsd	%xmm1, -824(%rbp)
	movq	-808(%rbp), %r13
	movsd	-816(%rbp), %xmm0
	movsd	%xmm0, (%r13)
	movsd	-824(%rbp), %xmm0
	movsd	%xmm0, 8(%r13)
	movq	-1664(%rbp), %r13
	movq	-1656(%rbp), %rcx
	movq	%rcx, -152(%rbp)
	movq	%r13, -160(%rbp)
	movq	-1456(%rbp), %rcx
	movq	%r14, -904(%rbp)
	movq	%r15, -912(%rbp)
	movq	-904(%rbp), %r13
	movq	(%r13), %rsi
	movq	8(%r13), %r13
	movq	%r13, -888(%rbp)
	movq	%rsi, -896(%rbp)
	movq	-912(%rbp), %rsi
	leaq	-896(%rbp), %r13
	movq	%r13, -872(%rbp)
	movq	%rsi, -880(%rbp)
	movq	-872(%rbp), %r13
	movq	%rsi, -864(%rbp)
	movsd	(%rsi), %xmm0
	movsd	(%r13), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r13)
	movq	-880(%rbp), %rsi
	movq	%rsi, -856(%rbp)
	movsd	8(%rsi), %xmm0
	movsd	8(%r13), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r13)
	movsd	-896(%rbp), %xmm0
	movsd	-888(%rbp), %xmm1
	movsd	%xmm0, -1680(%rbp)
	movsd	%xmm1, -1672(%rbp)
	movq	-1680(%rbp), %rsi
	movq	-1672(%rbp), %r13
	movq	%r13, 8(%rcx)
	movq	%rsi, (%rcx)
	movq	-1480(%rbp), %rcx
	movq	%r14, -968(%rbp)
	movq	%r15, -976(%rbp)
	movq	-968(%rbp), %rsi
	movq	(%rsi), %r14
	movq	8(%rsi), %rsi
	movq	%rsi, -952(%rbp)
	movq	%r14, -960(%rbp)
	movq	-976(%rbp), %rsi
	leaq	-960(%rbp), %r14
	movq	%r14, -936(%rbp)
	movq	%rsi, -944(%rbp)
	movq	-936(%rbp), %r14
	movq	%rsi, -928(%rbp)
	movsd	(%rsi), %xmm0
	movsd	(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r14)
	movq	-944(%rbp), %rsi
	movq	%rsi, -920(%rbp)
	movsd	8(%rsi), %xmm0
	movsd	8(%r14), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r14)
	movsd	-960(%rbp), %xmm0
	movsd	-952(%rbp), %xmm1
	movsd	%xmm0, -1696(%rbp)
	movsd	%xmm1, -1688(%rbp)
	movq	-1696(%rbp), %rsi
	movq	-1688(%rbp), %r14
	movq	%r14, 8(%rcx)
	movq	%rsi, (%rcx)
	leaq	-80(%rbp), %rcx
	movq	%rax, -984(%rbp)
	movsd	-144(%rbp), %xmm0
	movsd	-1432(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movq	%rdi, -992(%rbp)
	movsd	-128(%rbp), %xmm1
	movsd	-1416(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movq	%rax, -1000(%rbp)
	movsd	-136(%rbp), %xmm1
	movsd	-1432(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	movq	%rdi, -1008(%rbp)
	movsd	-120(%rbp), %xmm2
	movsd	-1416(%rbp), %xmm3
	mulsd	%xmm3, %xmm2
	addsd	%xmm2, %xmm1
	leaq	-1728(%rbp), %rax
	movq	%rax, -1040(%rbp)
	movsd	%xmm0, -1048(%rbp)
	movsd	%xmm1, -1056(%rbp)
	movq	-1040(%rbp), %rsi
	movsd	-1048(%rbp), %xmm0
	movq	%rsi, -1016(%rbp)
	movsd	%xmm0, -1024(%rbp)
	movsd	%xmm1, -1032(%rbp)
	movq	-1016(%rbp), %rsi
	movsd	-1024(%rbp), %xmm0
	movsd	%xmm0, (%rsi)
	movsd	-1032(%rbp), %xmm0
	movsd	%xmm0, 8(%rsi)
	movq	%r12, -1112(%rbp)
	movq	%rax, -1120(%rbp)
	movq	-1112(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rax
	movq	%rax, -1096(%rbp)
	movq	%rsi, -1104(%rbp)
	movq	-1120(%rbp), %rax
	leaq	-1104(%rbp), %rsi
	movq	%rsi, -1080(%rbp)
	movq	%rax, -1088(%rbp)
	movq	-1080(%rbp), %rsi
	movq	%rax, -1072(%rbp)
	movsd	(%rax), %xmm0
	movsd	(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
	movq	-1088(%rbp), %rax
	movq	%rax, -1064(%rbp)
	movsd	8(%rax), %xmm0
	movsd	8(%rsi), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rsi)
	movsd	-1104(%rbp), %xmm0
	movsd	-1096(%rbp), %xmm1
	movsd	%xmm0, -1712(%rbp)
	movsd	%xmm1, -1704(%rbp)
	movq	-1712(%rbp), %rax
	movq	-1704(%rbp), %rsi
	movq	%rsi, -72(%rbp)
	movq	%rax, -80(%rbp)
	leaq	-64(%rbp), %rax
	movq	%rbx, -1128(%rbp)
	movsd	-88(%rbp), %xmm0
	movsd	-1440(%rbp), %xmm1
	mulsd	%xmm1, %xmm0
	movq	%r11, -1136(%rbp)
	movsd	-104(%rbp), %xmm1
	movsd	-1424(%rbp), %xmm2
	mulsd	%xmm2, %xmm1
	subsd	%xmm0, %xmm1
	movq	%rbx, -1144(%rbp)
	movsd	-96(%rbp), %xmm0
	movsd	-1440(%rbp), %xmm2
	mulsd	%xmm2, %xmm0
	movq	%r11, -1152(%rbp)
	movsd	-112(%rbp), %xmm2
	movsd	-1424(%rbp), %xmm3
	mulsd	%xmm3, %xmm2
	subsd	%xmm2, %xmm0
	leaq	-1744(%rbp), %rsi
	movq	%rsi, -1184(%rbp)
	movsd	%xmm1, -1192(%rbp)
	movsd	%xmm0, -1200(%rbp)
	movq	-1184(%rbp), %rsi
	movsd	-1192(%rbp), %xmm1
	movq	%rsi, -1160(%rbp)
	movsd	%xmm1, -1168(%rbp)
	movsd	%xmm0, -1176(%rbp)
	movq	-1160(%rbp), %rsi
	movsd	-1168(%rbp), %xmm0
	movsd	%xmm0, (%rsi)
	movsd	-1176(%rbp), %xmm0
	movsd	%xmm0, 8(%rsi)
	movq	-1744(%rbp), %rsi
	movq	-1736(%rbp), %rdi
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-1464(%rbp), %rsi
	movq	%rcx, -1256(%rbp)
	movq	%rax, -1264(%rbp)
	movq	-1256(%rbp), %rdi
	movq	(%rdi), %r11
	movq	8(%rdi), %rdi
	movq	%rdi, -1240(%rbp)
	movq	%r11, -1248(%rbp)
	movq	-1264(%rbp), %rdi
	leaq	-1248(%rbp), %r11
	movq	%r11, -1224(%rbp)
	movq	%rdi, -1232(%rbp)
	movq	-1224(%rbp), %r11
	movq	%rdi, -1216(%rbp)
	movsd	(%rdi), %xmm0
	movsd	(%r11), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%r11)
	movq	-1232(%rbp), %rdi
	movq	%rdi, -1208(%rbp)
	movsd	8(%rdi), %xmm0
	movsd	8(%r11), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%r11)
	movsd	-1248(%rbp), %xmm0
	movsd	-1240(%rbp), %xmm1
	movsd	%xmm0, -1760(%rbp)
	movsd	%xmm1, -1752(%rbp)
	movq	-1760(%rbp), %rdi
	movq	-1752(%rbp), %r11
	movq	%r11, 8(%rsi)
	movq	%rdi, (%rsi)
	movq	-1472(%rbp), %rsi
	movq	%rcx, -1320(%rbp)
	movq	%rax, -1328(%rbp)
	movq	-1320(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rax, -1304(%rbp)
	movq	%rcx, -1312(%rbp)
	movq	-1328(%rbp), %rax
	leaq	-1312(%rbp), %rcx
	movq	%rcx, -1288(%rbp)
	movq	%rax, -1296(%rbp)
	movq	-1288(%rbp), %rcx
	movq	%rax, -1280(%rbp)
	movsd	(%rax), %xmm0
	movsd	(%rcx), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx)
	movq	-1296(%rbp), %rax
	movq	%rax, -1272(%rbp)
	movsd	8(%rax), %xmm0
	movsd	8(%rcx), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rcx)
	movsd	-1312(%rbp), %xmm0
	movsd	-1304(%rbp), %xmm1
	movsd	%xmm0, -1776(%rbp)
	movsd	%xmm1, -1768(%rbp)
	movq	-1776(%rbp), %rax
	movq	%rax, (%rsi)
	movq	-1768(%rbp), %rax
	movq	%rax, 8(%rsi)
	movq	-1448(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1448(%rbp)
	movq	-1456(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1456(%rbp)
	movq	-1464(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1464(%rbp)
	movq	-1472(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1472(%rbp)
	movq	-1480(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -1480(%rbp)
## BB#5:                                ##   in Loop: Header=BB223_3 Depth=1
	movl	-1484(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -1484(%rbp)
	jmp	LBB223_3
LBB223_6:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	cmpq	-48(%rbp), %rax
	jne	LBB223_8
## BB#7:                                ## %SP_return
	addq	$1800, %rsp             ## imm = 0x708
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
LBB223_8:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_NEPS3_jjj
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_NEPS3_jjj
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_NEPS3_jjj: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE11butterfly_NEPS3_jjj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1017:
	.cfi_def_cfa_offset 16
Ltmp1018:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1019:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -64(%rbp)
	movq	%rsi, -72(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -84(%rbp)
	movq	-64(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -48(%rbp)
	movq	-48(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	%rdi, -96(%rbp)
	movq	%rsi, %rdi
	addq	$496, %rdi              ## imm = 0x1F0
	movl	-84(%rbp), %ecx
	movq	%rsi, -152(%rbp)        ## 8-byte Spill
	movl	%ecx, %esi
	callq	__ZN4arma8podarrayINSt3__17complexIdEEE12set_min_sizeEj
	movq	-152(%rbp), %rdi        ## 8-byte Reload
	addq	$496, %rdi              ## imm = 0x1F0
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	16(%rdi), %rdi
	movq	%rdi, -104(%rbp)
	movl	$0, -108(%rbp)
LBB224_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB224_3 Depth 2
                                        ##     Child Loop BB224_7 Depth 2
                                        ##       Child Loop BB224_9 Depth 3
	movl	-108(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jae	LBB224_18
## BB#2:                                ##   in Loop: Header=BB224_1 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -116(%rbp)
LBB224_3:                               ##   Parent Loop BB224_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-116(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jae	LBB224_6
## BB#4:                                ##   in Loop: Header=BB224_3 Depth=2
	movl	-116(%rbp), %eax
	movl	%eax, %ecx
	movq	-104(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	-112(%rbp), %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movq	(%rsi), %rcx
	movq	%rcx, (%rdx)
	movq	8(%rsi), %rcx
	movq	%rcx, 8(%rdx)
	movl	-80(%rbp), %eax
	movl	-112(%rbp), %edi
	addl	%eax, %edi
	movl	%edi, -112(%rbp)
## BB#5:                                ##   in Loop: Header=BB224_3 Depth=2
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	LBB224_3
LBB224_6:                               ##   in Loop: Header=BB224_1 Depth=1
	movl	-108(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -120(%rbp)
LBB224_7:                               ##   Parent Loop BB224_1 Depth=1
                                        ## =>  This Loop Header: Depth=2
                                        ##       Child Loop BB224_9 Depth 3
	movl	-120(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jae	LBB224_16
## BB#8:                                ##   in Loop: Header=BB224_7 Depth=2
	movl	-112(%rbp), %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movq	-104(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rsi, (%rdx)
	movq	8(%rcx), %rcx
	movq	%rcx, 8(%rdx)
	movl	$0, -124(%rbp)
	movl	$1, -128(%rbp)
LBB224_9:                               ##   Parent Loop BB224_1 Depth=1
                                        ##     Parent Loop BB224_7 Depth=2
                                        ## =>    This Inner Loop Header: Depth=3
	movl	-128(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jae	LBB224_14
## BB#10:                               ##   in Loop: Header=BB224_9 Depth=3
	movl	-76(%rbp), %eax
	imull	-112(%rbp), %eax
	movl	-124(%rbp), %ecx
	addl	%eax, %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	movq	-152(%rbp), %rdx        ## 8-byte Reload
	cmpl	(%rdx), %eax
	jb	LBB224_12
## BB#11:                               ##   in Loop: Header=BB224_9 Depth=3
	movq	-152(%rbp), %rax        ## 8-byte Reload
	movl	(%rax), %ecx
	movl	-124(%rbp), %edx
	subl	%ecx, %edx
	movl	%edx, -124(%rbp)
LBB224_12:                              ##   in Loop: Header=BB224_9 Depth=3
	movl	-112(%rbp), %eax
	movl	%eax, %ecx
	movq	-72(%rbp), %rdx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movl	-128(%rbp), %eax
	movl	%eax, %ecx
	movq	-104(%rbp), %rsi
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movl	-124(%rbp), %eax
	movl	%eax, %ecx
	movq	-96(%rbp), %rdi
	shlq	$4, %rcx
	addq	%rcx, %rdi
	movq	%rdi, -160(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-160(%rbp), %rsi        ## 8-byte Reload
	movq	%rdx, -168(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__1mlIdEENS_7complexIT_EERKS3_S5_
	leaq	-144(%rbp), %rcx
	movsd	%xmm0, -144(%rbp)
	movsd	%xmm1, -136(%rbp)
	movq	-168(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movsd	(%rdx), %xmm0
	movsd	(%rcx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx)
	movq	-40(%rbp), %rdx
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdx
	movsd	8(%rdx), %xmm0
	movsd	8(%rcx), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rcx)
## BB#13:                               ##   in Loop: Header=BB224_9 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	LBB224_9
LBB224_14:                              ##   in Loop: Header=BB224_7 Depth=2
	movl	-80(%rbp), %eax
	movl	-112(%rbp), %ecx
	addl	%eax, %ecx
	movl	%ecx, -112(%rbp)
## BB#15:                               ##   in Loop: Header=BB224_7 Depth=2
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	LBB224_7
LBB224_16:                              ##   in Loop: Header=BB224_1 Depth=1
	jmp	LBB224_17
LBB224_17:                              ##   in Loop: Header=BB224_1 Depth=1
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	LBB224_1
LBB224_18:
	addq	$176, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI225_0:
	.quad	-4616189618054758400    ## double -1
LCPI225_1:
	.quad	-4611686018427387904    ## double -2
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC2Ej
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC2Ej
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC2Ej: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EEC2Ej
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin225:
	.cfi_lsda 16, Lexception225
## BB#0:
	pushq	%rbp
Ltmp1040:
	.cfi_def_cfa_offset 16
Ltmp1041:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1042:
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -72(%rbp)
	movl	%esi, -76(%rbp)
	movq	-72(%rbp), %rdi
	movq	%rdi, -160(%rbp)        ## 8-byte Spill
	callq	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EEC2Ej
	movq	-160(%rbp), %rdi        ## 8-byte Reload
	addq	$304, %rdi              ## imm = 0x130
Ltmp1020:
	movq	%rdi, -168(%rbp)        ## 8-byte Spill
	callq	__ZN4arma8podarrayIjEC1Ev
Ltmp1021:
	jmp	LBB225_1
LBB225_1:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	addq	$400, %rax              ## imm = 0x190
Ltmp1023:
	movq	%rax, %rdi
	movq	%rax, -176(%rbp)        ## 8-byte Spill
	callq	__ZN4arma8podarrayIjEC1Ev
Ltmp1024:
	jmp	LBB225_2
LBB225_2:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	addq	$496, %rax              ## imm = 0x1F0
Ltmp1026:
	movq	%rax, %rdi
	movq	%rax, -184(%rbp)        ## 8-byte Spill
	callq	__ZN4arma8podarrayINSt3__17complexIdEEEC1Ev
Ltmp1027:
	jmp	LBB225_3
LBB225_3:
Ltmp1029:
	movq	-160(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb0EEEjv
Ltmp1030:
	movl	%eax, -188(%rbp)        ## 4-byte Spill
	jmp	LBB225_4
LBB225_4:
	movl	-188(%rbp), %eax        ## 4-byte Reload
	movl	%eax, -96(%rbp)
	movq	-160(%rbp), %rcx        ## 8-byte Reload
	addq	$304, %rcx              ## imm = 0x130
Ltmp1031:
	movq	%rcx, %rdi
	movl	%eax, %esi
	callq	__ZN4arma8podarrayIjE8set_sizeEj
Ltmp1032:
	jmp	LBB225_5
LBB225_5:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	addq	$400, %rax              ## imm = 0x190
	movl	-96(%rbp), %esi
Ltmp1033:
	movq	%rax, %rdi
	callq	__ZN4arma8podarrayIjE8set_sizeEj
Ltmp1034:
	jmp	LBB225_6
LBB225_6:
Ltmp1035:
	movq	-160(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb1EEEjv
Ltmp1036:
	movl	%eax, -192(%rbp)        ## 4-byte Spill
	jmp	LBB225_7
LBB225_7:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	16(%rax), %rax
	movq	%rax, -200(%rbp)        ## 8-byte Spill
## BB#8:
	movq	-200(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -104(%rbp)
	movsd	LCPI225_0(%rip), %xmm0
	callq	_acos
	movsd	LCPI225_1(%rip), %xmm1
	mulsd	%xmm1, %xmm0
	movq	-160(%rbp), %rax        ## 8-byte Reload
	movl	(%rax), %ecx
	movl	%ecx, %edx
	cvtsi2sdq	%rdx, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -112(%rbp)
	movl	$0, -116(%rbp)
LBB225_9:                               ## =>This Inner Loop Header: Depth=1
	movl	-116(%rbp), %eax
	movq	-160(%rbp), %rcx        ## 8-byte Reload
	cmpl	(%rcx), %eax
	jae	LBB225_18
## BB#10:                               ##   in Loop: Header=BB225_9 Depth=1
	xorps	%xmm0, %xmm0
	leaq	-152(%rbp), %rax
	movl	-116(%rbp), %ecx
	movl	%ecx, %edx
	movq	-104(%rbp), %rsi
	movq	%rdx, %rdi
	shlq	$4, %rdi
	addq	%rdi, %rsi
	cvtsi2sdq	%rdx, %xmm1
	mulsd	-112(%rbp), %xmm1
	movq	%rax, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm1, -48(%rbp)
	movq	-32(%rbp), %rax
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rax, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rax
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
	movq	%rsi, -208(%rbp)        ## 8-byte Spill
## BB#11:                               ##   in Loop: Header=BB225_9 Depth=1
Ltmp1037:
	leaq	-152(%rbp), %rdi
	callq	__ZNSt3__13expIdEENS_7complexIT_EERKS3_
Ltmp1038:
	movsd	%xmm1, -216(%rbp)       ## 8-byte Spill
	movsd	%xmm0, -224(%rbp)       ## 8-byte Spill
	jmp	LBB225_12
LBB225_12:                              ##   in Loop: Header=BB225_9 Depth=1
	movsd	-224(%rbp), %xmm0       ## 8-byte Reload
	movsd	%xmm0, -136(%rbp)
	movsd	-216(%rbp), %xmm0       ## 8-byte Reload
	movsd	%xmm0, -128(%rbp)
	movq	-136(%rbp), %rax
	movq	-208(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, (%rcx)
	movq	-128(%rbp), %rax
	movq	%rax, 8(%rcx)
## BB#13:                               ##   in Loop: Header=BB225_9 Depth=1
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	LBB225_9
LBB225_14:
Ltmp1022:
	movl	%edx, %ecx
	movq	%rax, -88(%rbp)
	movl	%ecx, -92(%rbp)
	jmp	LBB225_21
LBB225_15:
Ltmp1025:
	movl	%edx, %ecx
	movq	%rax, -88(%rbp)
	movl	%ecx, -92(%rbp)
	jmp	LBB225_20
LBB225_16:
Ltmp1028:
	movl	%edx, %ecx
	movq	%rax, -88(%rbp)
	movl	%ecx, -92(%rbp)
	jmp	LBB225_19
LBB225_17:
Ltmp1039:
	movl	%edx, %ecx
	movq	%rax, -88(%rbp)
	movl	%ecx, -92(%rbp)
	movq	-184(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma8podarrayINSt3__17complexIdEEED1Ev
	jmp	LBB225_19
LBB225_18:
	addq	$224, %rsp
	popq	%rbp
	retq
LBB225_19:
	movq	-176(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma8podarrayIjED1Ev
LBB225_20:
	movq	-168(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN4arma8podarrayIjED1Ev
LBB225_21:
	movq	-160(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN4arma5storeINSt3__17complexIdEELj0ELb0EED2Ev
## BB#22:
	movq	-88(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end225:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table225:
Lexception225:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\320"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	78                      ## Call site table length
Lset307 = Leh_func_begin225-Leh_func_begin225 ## >> Call Site 1 <<
	.long	Lset307
Lset308 = Ltmp1020-Leh_func_begin225    ##   Call between Leh_func_begin225 and Ltmp1020
	.long	Lset308
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset309 = Ltmp1020-Leh_func_begin225    ## >> Call Site 2 <<
	.long	Lset309
Lset310 = Ltmp1021-Ltmp1020             ##   Call between Ltmp1020 and Ltmp1021
	.long	Lset310
Lset311 = Ltmp1022-Leh_func_begin225    ##     jumps to Ltmp1022
	.long	Lset311
	.byte	0                       ##   On action: cleanup
Lset312 = Ltmp1023-Leh_func_begin225    ## >> Call Site 3 <<
	.long	Lset312
Lset313 = Ltmp1024-Ltmp1023             ##   Call between Ltmp1023 and Ltmp1024
	.long	Lset313
Lset314 = Ltmp1025-Leh_func_begin225    ##     jumps to Ltmp1025
	.long	Lset314
	.byte	0                       ##   On action: cleanup
Lset315 = Ltmp1026-Leh_func_begin225    ## >> Call Site 4 <<
	.long	Lset315
Lset316 = Ltmp1027-Ltmp1026             ##   Call between Ltmp1026 and Ltmp1027
	.long	Lset316
Lset317 = Ltmp1028-Leh_func_begin225    ##     jumps to Ltmp1028
	.long	Lset317
	.byte	0                       ##   On action: cleanup
Lset318 = Ltmp1029-Leh_func_begin225    ## >> Call Site 5 <<
	.long	Lset318
Lset319 = Ltmp1038-Ltmp1029             ##   Call between Ltmp1029 and Ltmp1038
	.long	Lset319
Lset320 = Ltmp1039-Leh_func_begin225    ##     jumps to Ltmp1039
	.long	Lset320
	.byte	0                       ##   On action: cleanup
Lset321 = Ltmp1038-Leh_func_begin225    ## >> Call Site 6 <<
	.long	Lset321
Lset322 = Leh_func_end225-Ltmp1038      ##   Call between Ltmp1038 and Leh_func_end225
	.long	Lset322
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb0EEEjv
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb0EEEjv
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb0EEEjv: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb0EEEjv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1043:
	.cfi_def_cfa_offset 16
Ltmp1044:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1045:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movl	$0, -12(%rbp)
	movl	(%rdi), %eax
	movl	%eax, -16(%rbp)
	movl	$4, -20(%rbp)
LBB226_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB226_3 Depth 2
	cmpl	$2, -16(%rbp)
	jb	LBB226_13
## BB#2:                                ##   in Loop: Header=BB226_1 Depth=1
	jmp	LBB226_3
LBB226_3:                               ##   Parent Loop BB226_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	xorl	%edx, %edx
	divl	-20(%rbp)
	cmpl	$0, %edx
	jbe	LBB226_11
## BB#4:                                ##   in Loop: Header=BB226_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	movl	%eax, -24(%rbp)         ## 4-byte Spill
	movl	%ecx, -28(%rbp)         ## 4-byte Spill
	je	LBB226_6
	jmp	LBB226_14
LBB226_14:                              ##   in Loop: Header=BB226_3 Depth=2
	movl	-24(%rbp), %eax         ## 4-byte Reload
	subl	$2, %eax
	movl	%eax, -32(%rbp)         ## 4-byte Spill
	jne	LBB226_7
	jmp	LBB226_5
LBB226_5:                               ##   in Loop: Header=BB226_3 Depth=2
	movl	$3, -20(%rbp)
	jmp	LBB226_8
LBB226_6:                               ##   in Loop: Header=BB226_3 Depth=2
	movl	$2, -20(%rbp)
	jmp	LBB226_8
LBB226_7:                               ##   in Loop: Header=BB226_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
LBB226_8:                               ##   in Loop: Header=BB226_3 Depth=2
	movl	-20(%rbp), %eax
	imull	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jbe	LBB226_10
## BB#9:                                ##   in Loop: Header=BB226_3 Depth=2
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
LBB226_10:                              ##   in Loop: Header=BB226_3 Depth=2
	jmp	LBB226_3
LBB226_11:                              ##   in Loop: Header=BB226_1 Depth=1
	movl	-20(%rbp), %eax
	movl	-16(%rbp), %ecx
	movl	%eax, -36(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	xorl	%edx, %edx
	movl	-36(%rbp), %ecx         ## 4-byte Reload
	divl	%ecx
	movl	%eax, -16(%rbp)
## BB#12:                               ##   in Loop: Header=BB226_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	LBB226_1
LBB226_13:
	movl	-12(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb1EEEjv
	.weak_def_can_be_hidden	__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb1EEEjv
	.align	4, 0x90
__ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb1EEEjv: ## @_ZN4arma10fft_engineINSt3__17complexIdEELb0ELj0EE10calc_radixILb1EEEjv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1046:
	.cfi_def_cfa_offset 16
Ltmp1047:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1048:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rdi
	movl	$0, -60(%rbp)
	movl	(%rdi), %eax
	movl	%eax, -64(%rbp)
	movl	$4, -68(%rbp)
	movq	%rdi, -80(%rbp)         ## 8-byte Spill
LBB227_1:                               ## =>This Loop Header: Depth=1
                                        ##     Child Loop BB227_3 Depth 2
	cmpl	$2, -64(%rbp)
	jb	LBB227_13
## BB#2:                                ##   in Loop: Header=BB227_1 Depth=1
	jmp	LBB227_3
LBB227_3:                               ##   Parent Loop BB227_1 Depth=1
                                        ## =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	xorl	%edx, %edx
	divl	-68(%rbp)
	cmpl	$0, %edx
	jbe	LBB227_11
## BB#4:                                ##   in Loop: Header=BB227_3 Depth=2
	movl	-68(%rbp), %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	movl	%ecx, -88(%rbp)         ## 4-byte Spill
	je	LBB227_6
	jmp	LBB227_14
LBB227_14:                              ##   in Loop: Header=BB227_3 Depth=2
	movl	-84(%rbp), %eax         ## 4-byte Reload
	subl	$2, %eax
	movl	%eax, -92(%rbp)         ## 4-byte Spill
	jne	LBB227_7
	jmp	LBB227_5
LBB227_5:                               ##   in Loop: Header=BB227_3 Depth=2
	movl	$3, -68(%rbp)
	jmp	LBB227_8
LBB227_6:                               ##   in Loop: Header=BB227_3 Depth=2
	movl	$2, -68(%rbp)
	jmp	LBB227_8
LBB227_7:                               ##   in Loop: Header=BB227_3 Depth=2
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -68(%rbp)
LBB227_8:                               ##   in Loop: Header=BB227_3 Depth=2
	movl	-68(%rbp), %eax
	imull	-68(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jbe	LBB227_10
## BB#9:                                ##   in Loop: Header=BB227_3 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -68(%rbp)
LBB227_10:                              ##   in Loop: Header=BB227_3 Depth=2
	jmp	LBB227_3
LBB227_11:                              ##   in Loop: Header=BB227_1 Depth=1
	movl	-68(%rbp), %eax
	movl	-64(%rbp), %ecx
	movl	%eax, -96(%rbp)         ## 4-byte Spill
	movl	%ecx, %eax
	xorl	%edx, %edx
	movl	-96(%rbp), %ecx         ## 4-byte Reload
	divl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	movq	-80(%rbp), %rsi         ## 8-byte Reload
	addq	$304, %rsi              ## imm = 0x130
	movl	-60(%rbp), %edi
	movq	%rsi, -40(%rbp)
	movl	%edi, -44(%rbp)
	movq	-40(%rbp), %rsi
	movl	-44(%rbp), %edi
	movl	%edi, %r8d
	movq	16(%rsi), %rsi
	shlq	$2, %r8
	addq	%r8, %rsi
	movq	%rsi, -32(%rbp)
	movq	-32(%rbp), %rsi
	movl	%eax, (%rsi)
	movl	-68(%rbp), %eax
	movq	-80(%rbp), %rsi         ## 8-byte Reload
	addq	$400, %rsi              ## imm = 0x190
	movl	-60(%rbp), %edi
	movq	%rsi, -16(%rbp)
	movl	%edi, -20(%rbp)
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edi
	movl	%edi, %r8d
	movq	16(%rsi), %rsi
	shlq	$2, %r8
	addq	%r8, %rsi
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movl	%eax, (%rsi)
## BB#12:                               ##   in Loop: Header=BB227_1 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	LBB227_1
LBB227_13:
	movl	-60(%rbp), %eax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED2Ev
	.weak_def_can_be_hidden	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED2Ev
	.align	4, 0x90
__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED2Ev: ## @_ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1049:
	.cfi_def_cfa_offset 16
Ltmp1050:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1051:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC1ERKS5_jj
	.weak_def_can_be_hidden	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC1ERKS5_jj
	.align	4, 0x90
__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC1ERKS5_jj: ## @_ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC1ERKS5_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1052:
	.cfi_def_cfa_offset 16
Ltmp1053:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1054:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movq	-16(%rbp), %rsi
	callq	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC2ERKS5_jj
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC2ERKS5_jj
	.weak_def_can_be_hidden	__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC2ERKS5_jj
	.align	4, 0x90
__ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC2ERKS5_jj: ## @_ZN4arma4mtOpINSt3__17complexIdEENS_3ColIdEENS_11op_fft_realEEC2ERKS5_jj
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1055:
	.cfi_def_cfa_offset 16
Ltmp1056:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1057:
	.cfi_def_cfa_register %rbp
	xorps	%xmm0, %xmm0
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -72(%rbp)
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdi
	movq	%rdi, (%rsi)
	movq	%rsi, %rdi
	addq	$32, %rdi
	movq	%rdi, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movsd	%xmm0, -48(%rbp)
	movq	-32(%rbp), %rdi
	movsd	-40(%rbp), %xmm0
	movsd	-48(%rbp), %xmm1
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rdi)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rdi)
	movl	-68(%rbp), %ecx
	movl	%ecx, 48(%rsi)
	movl	-72(%rbp), %ecx
	movl	%ecx, 64(%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3ColIdEC2EPdjbb
	.weak_def_can_be_hidden	__ZN4arma3ColIdEC2EPdjbb
	.align	4, 0x90
__ZN4arma3ColIdEC2EPdjbb:               ## @_ZN4arma3ColIdEC2EPdjbb
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1058:
	.cfi_def_cfa_offset 16
Ltmp1059:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1060:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movb	%r8b, %al
	movb	%cl, %r9b
	movl	$1, %ecx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -28(%rbp)
	andb	$1, %r9b
	movb	%r9b, -29(%rbp)
	andb	$1, %al
	movb	%al, -30(%rbp)
	movq	-16(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-24(%rbp), %r10
	movl	-28(%rbp), %edx
	movb	-29(%rbp), %al
	movb	-30(%rbp), %r9b
	andb	$1, %al
	andb	$1, %r9b
	movq	%rsi, -56(%rbp)         ## 8-byte Spill
	movq	%r10, %rsi
	movzbl	%al, %r8d
	movzbl	%r9b, %r9d
	callq	__ZN4arma3MatIdEC2EPdjjbb
	movq	-56(%rbp), %rsi         ## 8-byte Reload
	addq	$12, %rsi
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, -64(%rbp)         ## 8-byte Spill
## BB#1:
	movq	-64(%rbp), %rax         ## 8-byte Reload
	movw	$1, (%rax)
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3MatIdEC2EPdjjbb
	.weak_def_can_be_hidden	__ZN4arma3MatIdEC2EPdjjbb
	.align	4, 0x90
__ZN4arma3MatIdEC2EPdjjbb:              ## @_ZN4arma3MatIdEC2EPdjjbb
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1061:
	.cfi_def_cfa_offset 16
Ltmp1062:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1063:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movb	%r9b, %al
	movb	%r8b, %r10b
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -56(%rbp)
	andb	$1, %r10b
	movb	%r10b, -57(%rbp)
	andb	$1, %al
	movb	%al, -58(%rbp)
	movq	-40(%rbp), %rsi
	movl	-52(%rbp), %ecx
	movl	%ecx, (%rsi)
	movl	-56(%rbp), %ecx
	movl	%ecx, 4(%rsi)
	movl	-52(%rbp), %ecx
	imull	-56(%rbp), %ecx
	movl	%ecx, 8(%rsi)
	movw	$0, 12(%rsi)
	movq	%rsi, %rdi
	addq	$14, %rdi
	testb	$1, -57(%rbp)
	movq	%rsi, -72(%rbp)         ## 8-byte Spill
	movq	%rdi, -80(%rbp)         ## 8-byte Spill
	je	LBB232_2
## BB#1:
	xorl	%eax, %eax
	movl	%eax, -84(%rbp)         ## 4-byte Spill
	jmp	LBB232_3
LBB232_2:
	movl	$1, %eax
	movl	$2, %ecx
	movb	-58(%rbp), %dl
	testb	$1, %dl
	cmovnel	%ecx, %eax
	movl	%eax, -84(%rbp)         ## 4-byte Spill
LBB232_3:
	movl	-84(%rbp), %eax         ## 4-byte Reload
	movw	%ax, %cx
	movq	-80(%rbp), %rdx         ## 8-byte Reload
	movw	%cx, (%rdx)
	movq	-72(%rbp), %rsi         ## 8-byte Reload
	addq	$16, %rsi
	testb	$1, -57(%rbp)
	movq	%rsi, -96(%rbp)         ## 8-byte Spill
	je	LBB232_5
## BB#4:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -104(%rbp)        ## 8-byte Spill
	jmp	LBB232_6
LBB232_5:
	movq	-48(%rbp), %rax
	movq	%rax, -104(%rbp)        ## 8-byte Spill
LBB232_6:
	movq	-104(%rbp), %rax        ## 8-byte Reload
	movq	-96(%rbp), %rcx         ## 8-byte Reload
	movq	%rax, (%rcx)
	movb	-57(%rbp), %dl
	andb	$1, %dl
	movzbl	%dl, %esi
	cmpl	$1, %esi
	jne	LBB232_11
## BB#7:
	movq	-72(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN4arma3MatIdE9init_coldEv
	movq	-72(%rbp), %rdi         ## 8-byte Reload
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	16(%rax), %rax
	movq	-48(%rbp), %rcx
	movl	8(%rdi), %edx
	movq	%rax, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movl	%edx, -20(%rbp)
	cmpl	$16, -20(%rbp)
	ja	LBB232_9
## BB#8:
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movl	-20(%rbp), %edx
	callq	__ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j
	jmp	LBB232_10
LBB232_9:
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	shlq	$3, %rsi
	movq	%rax, %rdi
	movq	%rsi, -112(%rbp)        ## 8-byte Spill
	movq	%rcx, %rsi
	movq	-112(%rbp), %rdx        ## 8-byte Reload
	callq	_memcpy
LBB232_10:                              ## %_ZN4arma8arrayops4copyIdEEvPT_PKS2_j.exit
	jmp	LBB232_11
LBB232_11:
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal4,4byte_literals
	.align	2
LCPI233_0:
	.long	1333788672              ## float 4.2949673E+9
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN4arma3MatIdE9init_coldEv
	.weak_def_can_be_hidden	__ZN4arma3MatIdE9init_coldEv
	.align	4, 0x90
__ZN4arma3MatIdE9init_coldEv:           ## @_ZN4arma3MatIdE9init_coldEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1064:
	.cfi_def_cfa_offset 16
Ltmp1065:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1066:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rdi
	cmpl	$65535, (%rdi)          ## imm = 0xFFFF
	movq	%rdi, -32(%rbp)         ## 8-byte Spill
	ja	LBB233_2
## BB#1:
	movq	-32(%rbp), %rax         ## 8-byte Reload
	cmpl	$65535, 4(%rax)         ## imm = 0xFFFF
	jbe	LBB233_3
LBB233_2:
	movss	LCPI233_0(%rip), %xmm0
	movq	-32(%rbp), %rax         ## 8-byte Reload
	movl	(%rax), %ecx
	movl	4(%rax), %edx
	movl	%ecx, %esi
	cvtsi2ssq	%rsi, %xmm1
	movl	%edx, %esi
	cvtsi2ssq	%rsi, %xmm2
	mulss	%xmm2, %xmm1
	ucomiss	%xmm0, %xmm1
	seta	%dil
	movb	%dil, -33(%rbp)         ## 1-byte Spill
	jmp	LBB233_4
LBB233_3:
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, -33(%rbp)          ## 1-byte Spill
	jmp	LBB233_4
LBB233_4:
	movb	-33(%rbp), %al          ## 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	leaq	L_.str44(%rip), %rsi
	movl	%ecx, %edi
	callq	__ZN4arma10arma_checkIA76_cEEvbRKT_
	movq	-32(%rbp), %rsi         ## 8-byte Reload
	cmpl	$16, 8(%rsi)
	ja	LBB233_6
## BB#5:
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rax
	movq	-32(%rbp), %rcx         ## 8-byte Reload
	addq	$16, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	jmp	LBB233_7
LBB233_6:
	movq	-32(%rbp), %rax         ## 8-byte Reload
	movl	8(%rax), %edi
	callq	__ZN4arma6memory7acquireIdEEPT_j
	movq	-32(%rbp), %rcx         ## 8-byte Reload
	addq	$16, %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
LBB233_7:
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma10arma_checkIA76_cEEvbRKT_
	.weak_def_can_be_hidden	__ZN4arma10arma_checkIA76_cEEvbRKT_
	.align	4, 0x90
__ZN4arma10arma_checkIA76_cEEvbRKT_:    ## @_ZN4arma10arma_checkIA76_cEEvbRKT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1067:
	.cfi_def_cfa_offset 16
Ltmp1068:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1069:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movb	%dil, %al
	andb	$1, %al
	movb	%al, -1(%rbp)
	movq	%rsi, -16(%rbp)
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edi
	cmpl	$1, %edi
	jne	LBB234_2
## BB#1:
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	-16(%rbp), %rdi
	callq	__ZN4arma10arma_boostL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE
	leaq	-24(%rbp), %rdi
	movq	%rax, -24(%rbp)
	callq	__ZN4armaL9arma_stopIPKcEEvRKT_
LBB234_2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEEC2ERKS3_
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEEC2ERKS3_
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEEC2ERKS3_: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEEC2ERKS3_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin235:
	.cfi_lsda 16, Lexception235
## BB#0:
	pushq	%rbp
Ltmp1075:
	.cfi_def_cfa_offset 16
Ltmp1076:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1077:
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              ## imm = 0x120
	leaq	-56(%rbp), %rax
	leaq	-40(%rbp), %rcx
	leaq	-72(%rbp), %rdx
	leaq	-88(%rbp), %r8
	leaq	-248(%rbp), %r9
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	-232(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-240(%rbp), %r10
	movq	%r10, -224(%rbp)
	movq	-224(%rbp), %r10
	addq	$16, %r10
	movq	%r10, -216(%rbp)
	movq	-216(%rbp), %r10
	movq	%r10, -208(%rbp)
	movq	-208(%rbp), %r10
	movq	%r10, -176(%rbp)
	movq	-176(%rbp), %r10
	movq	%r10, -160(%rbp)
	movq	%rdi, -136(%rbp)
	movq	%r9, -144(%rbp)
	movq	-136(%rbp), %rdi
	movq	%rdi, %r9
	movq	%r9, -128(%rbp)
	movq	$0, (%rdi)
	movq	$0, 8(%rdi)
	addq	$16, %rdi
	movq	%rdi, -112(%rbp)
	movq	$0, -120(%rbp)
	movq	-112(%rbp), %rdi
	movq	-120(%rbp), %r9
	movq	%rdi, -80(%rbp)
	movq	%r9, -88(%rbp)
	movq	-80(%rbp), %rdi
	movq	%r8, -64(%rbp)
	movq	-64(%rbp), %r8
	movq	(%r8), %r8
	movq	%rdx, -16(%rbp)
	movq	%rdi, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rcx, -32(%rbp)
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	movq	-240(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	8(%rax), %rcx
	movq	(%rax), %rax
	subq	%rax, %rcx
	sarq	$3, %rcx
	movq	%rcx, -264(%rbp)
	cmpq	$0, -264(%rbp)
	movq	%rsi, -288(%rbp)        ## 8-byte Spill
	jbe	LBB235_5
## BB#1:
	movq	-264(%rbp), %rsi
Ltmp1070:
	movq	-288(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
Ltmp1071:
	jmp	LBB235_2
LBB235_2:
	movq	-240(%rbp), %rax
	movq	(%rax), %rsi
	movq	8(%rax), %rdx
Ltmp1072:
	movq	-288(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_
Ltmp1073:
	jmp	LBB235_3
LBB235_3:
	jmp	LBB235_5
LBB235_4:
Ltmp1074:
	movl	%edx, %ecx
	movq	%rax, -272(%rbp)
	movl	%ecx, -276(%rbp)
	movq	-288(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	jmp	LBB235_6
LBB235_5:
	addq	$288, %rsp              ## imm = 0x120
	popq	%rbp
	retq
LBB235_6:
	movq	-272(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end235:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table235:
Lexception235:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\234"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	26                      ## Call site table length
Lset323 = Ltmp1070-Leh_func_begin235    ## >> Call Site 1 <<
	.long	Lset323
Lset324 = Ltmp1073-Ltmp1070             ##   Call between Ltmp1070 and Ltmp1073
	.long	Lset324
Lset325 = Ltmp1074-Leh_func_begin235    ##     jumps to Ltmp1074
	.long	Lset325
	.byte	0                       ##   On action: cleanup
Lset326 = Ltmp1073-Leh_func_begin235    ## >> Call Site 2 <<
	.long	Lset326
Lset327 = Leh_func_end235-Ltmp1073      ##   Call between Ltmp1073 and Leh_func_end235
	.long	Lset327
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1078:
	.cfi_def_cfa_offset 16
Ltmp1079:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1080:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -160(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%rdx, -176(%rbp)
	movq	-160(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rsi, -152(%rbp)
	movq	-152(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -144(%rbp)
	movq	-144(%rbp), %rsi
	movq	%rsi, -136(%rbp)
	movq	-136(%rbp), %rsi
	movq	%rsi, -184(%rbp)
	movq	%rdx, -192(%rbp)        ## 8-byte Spill
LBB236_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-168(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	LBB236_6
## BB#2:                                ##   in Loop: Header=BB236_1 Depth=1
	movl	$1, %eax
	movl	%eax, %esi
	movq	-192(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi        ## 8-byte Reload
	movq	8(%rdi), %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	-168(%rbp), %rdx
	movq	%rsi, -96(%rbp)
	movq	%rcx, -104(%rbp)
	movq	%rdx, -112(%rbp)
	movq	-96(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	-88(%rbp), %rsi
	movq	%rcx, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-64(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rsi
	movq	%rcx, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -200(%rbp)        ## 8-byte Spill
	je	LBB236_4
## BB#3:                                ##   in Loop: Header=BB236_1 Depth=1
	movq	-200(%rbp), %rax        ## 8-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-200(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -208(%rbp)        ## 8-byte Spill
LBB236_4:                               ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJRdEEEvRS2_PT_DpOT0_.exit
                                        ##   in Loop: Header=BB236_1 Depth=1
	movq	-192(%rbp), %rax        ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
## BB#5:                                ##   in Loop: Header=BB236_1 Depth=1
	movq	-168(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -168(%rbp)
	jmp	LBB236_1
LBB236_6:
	addq	$208, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1081:
	.cfi_def_cfa_offset 16
Ltmp1082:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1083:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -192(%rbp)
	movq	%rsi, -200(%rbp)
	movq	-192(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rsi, -208(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE10deallocateEv
	movq	-208(%rbp), %rsi        ## 8-byte Reload
	movq	-200(%rbp), %rdi
	movq	%rsi, -160(%rbp)
	movq	%rdi, -168(%rbp)
	movq	-160(%rbp), %rsi
	movq	-168(%rbp), %rdi
	movq	%rsi, -144(%rbp)
	movq	%rdi, -152(%rbp)
	movq	-144(%rbp), %rsi
	movq	%rsi, -128(%rbp)
	movq	-128(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -120(%rbp)
	movq	-120(%rbp), %rsi
	movq	%rsi, -112(%rbp)
	movq	-152(%rbp), %rsi
	movq	%rsi, -96(%rbp)
	movq	-96(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -88(%rbp)
	movq	-88(%rbp), %rsi
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rsi
	movq	%rsi, -104(%rbp)
	movq	-200(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	-208(%rbp), %rdi        ## 8-byte Reload
	movq	%rsi, (%rdi)
	movq	-200(%rbp), %rsi
	movq	8(%rsi), %rsi
	movq	%rsi, 8(%rdi)
	movq	-200(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rsi
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rdi, -48(%rbp)
	movq	-48(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	movq	%rsi, (%rdi)
	movq	-200(%rbp), %rsi
	movq	%rsi, -72(%rbp)
	movq	-72(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rsi
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rsi
	movq	$0, (%rsi)
	movq	-200(%rbp), %rsi
	movq	$0, 8(%rsi)
	movq	-200(%rbp), %rsi
	movq	$0, (%rsi)
	addq	$208, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE10deallocateEv
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE10deallocateEv
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE10deallocateEv: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE10deallocateEv
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin238:
	.cfi_lsda 16, Lexception238
## BB#0:
	pushq	%rbp
Ltmp1087:
	.cfi_def_cfa_offset 16
Ltmp1088:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1089:
	.cfi_def_cfa_register %rbp
	subq	$352, %rsp              ## imm = 0x160
	movq	%rdi, -312(%rbp)
	movq	-312(%rbp), %rdi
	cmpq	$0, (%rdi)
	movq	%rdi, -320(%rbp)        ## 8-byte Spill
	je	LBB238_7
## BB#1:
	movq	-320(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rcx
	movq	%rcx, -288(%rbp)
	movq	-288(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	(%rdx), %rdx
	subq	%rdx, %rsi
	sarq	$3, %rsi
	movq	%rsi, -304(%rbp)
	movq	%rcx, %rdx
	movq	%rdx, -280(%rbp)
	movq	-280(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	%rdx, -264(%rbp)
	movq	%rsi, -272(%rbp)
	movq	-264(%rbp), %rdx
	movq	%rcx, -328(%rbp)        ## 8-byte Spill
	movq	%rdx, -336(%rbp)        ## 8-byte Spill
LBB238_2:                               ## =>This Inner Loop Header: Depth=1
	movq	-272(%rbp), %rax
	movq	-336(%rbp), %rcx        ## 8-byte Reload
	cmpq	8(%rcx), %rax
	je	LBB238_4
## BB#3:                                ##   in Loop: Header=BB238_2 Depth=1
	movq	-336(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -248(%rbp)
	movq	-248(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	-240(%rbp), %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rdx, 8(%rax)
	movq	%rdx, -232(%rbp)
	movq	-232(%rbp), %rdx
	movq	%rcx, -200(%rbp)
	movq	%rdx, -208(%rbp)
	movq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	%rcx, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	%rcx, -160(%rbp)
	movq	%rdx, -168(%rbp)
	jmp	LBB238_2
LBB238_4:                               ## %_ZNSt3__113__vector_baseIdNS_9allocatorIdEEE5clearEv.exit.i
	movq	-304(%rbp), %rsi
Ltmp1084:
	movq	-328(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEm
Ltmp1085:
	jmp	LBB238_6
LBB238_5:
Ltmp1086:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -340(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
LBB238_6:                               ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE5clearEv.exit
	movq	-328(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -152(%rbp)
	movq	-320(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -136(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rcx
	movq	-320(%rbp), %rdx        ## 8-byte Reload
	movq	(%rdx), %rsi
	movq	%rdx, -120(%rbp)
	movq	-120(%rbp), %rdi
	movq	%rdi, -112(%rbp)
	movq	-112(%rbp), %rdi
	movq	%rdi, -104(%rbp)
	movq	-104(%rbp), %r8
	addq	$16, %r8
	movq	%r8, -96(%rbp)
	movq	-96(%rbp), %r8
	movq	%r8, -88(%rbp)
	movq	-88(%rbp), %r8
	movq	(%r8), %r8
	movq	(%rdi), %rdi
	subq	%rdi, %r8
	sarq	$3, %r8
	movq	%rcx, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	-40(%rbp), %rcx
	movq	-48(%rbp), %rsi
	movq	-56(%rbp), %rdi
	movq	%rcx, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdi, -32(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZdlPv
	movq	-320(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	$0, (%rax)
	movq	-320(%rbp), %rax        ## 8-byte Reload
	movq	$0, 8(%rax)
	movq	$0, (%rax)
LBB238_7:
	addq	$352, %rsp              ## imm = 0x160
	popq	%rbp
	retq
	.cfi_endproc
Leh_func_end238:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table238:
Lexception238:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	21                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	13                      ## Call site table length
Lset328 = Ltmp1084-Leh_func_begin238    ## >> Call Site 1 <<
	.long	Lset328
Lset329 = Ltmp1085-Ltmp1084             ##   Call between Ltmp1084 and Ltmp1085
	.long	Lset329
Lset330 = Ltmp1086-Leh_func_begin238    ##     jumps to Ltmp1086
	.long	Lset330
	.byte	1                       ##   On action: 1
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEm
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEm
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEm: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1090:
	.cfi_def_cfa_offset 16
Ltmp1091:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1092:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -120(%rbp)
	movq	%rsi, -128(%rbp)
	movq	-120(%rbp), %rsi
	movq	%rsi, -112(%rbp)
	movq	-112(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rdi, -104(%rbp)
	movq	-104(%rbp), %rdi
	movq	%rsi, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	%rdx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -48(%rbp)
	movq	-48(%rbp), %rcx
	movq	-128(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movq	%rsi, -72(%rbp)
	movq	-72(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %r8
	movq	8(%r8), %r9
	movq	(%r8), %r8
	subq	%r8, %r9
	sarq	$3, %r9
	shlq	$3, %r9
	addq	%r9, %rdx
	movq	%rdi, -136(%rbp)        ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-136(%rbp), %rsi        ## 8-byte Reload
	movq	%rdx, -144(%rbp)        ## 8-byte Spill
	movq	%rax, %rdx
	movq	-144(%rbp), %r8         ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPKdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1093:
	.cfi_def_cfa_offset 16
Ltmp1094:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1095:
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -160(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%rdx, -176(%rbp)
	movq	-160(%rbp), %rdx
	movq	%rdx, %rsi
	movq	%rsi, -152(%rbp)
	movq	-152(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -144(%rbp)
	movq	-144(%rbp), %rsi
	movq	%rsi, -136(%rbp)
	movq	-136(%rbp), %rsi
	movq	%rsi, -184(%rbp)
	movq	%rdx, -192(%rbp)        ## 8-byte Spill
LBB240_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-168(%rbp), %rax
	cmpq	-176(%rbp), %rax
	je	LBB240_6
## BB#2:                                ##   in Loop: Header=BB240_1 Depth=1
	movl	$1, %eax
	movl	%eax, %esi
	movq	-192(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE19__annotate_increaseEm
	movq	-184(%rbp), %rsi
	movq	-192(%rbp), %rdi        ## 8-byte Reload
	movq	8(%rdi), %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	-168(%rbp), %rdx
	movq	%rsi, -96(%rbp)
	movq	%rcx, -104(%rbp)
	movq	%rdx, -112(%rbp)
	movq	-96(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	-88(%rbp), %rsi
	movq	%rcx, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movq	-64(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	-80(%rbp), %rsi
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rsi
	movq	%rcx, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rcx
	cmpq	$0, %rcx
	movq	%rcx, -200(%rbp)        ## 8-byte Spill
	je	LBB240_4
## BB#3:                                ##   in Loop: Header=BB240_1 Depth=1
	movq	-200(%rbp), %rax        ## 8-byte Reload
	movq	-40(%rbp), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-200(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -208(%rbp)        ## 8-byte Spill
LBB240_4:                               ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJRKdEEEvRS2_PT_DpOT0_.exit
                                        ##   in Loop: Header=BB240_1 Depth=1
	movq	-192(%rbp), %rax        ## 8-byte Reload
	movq	8(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 8(%rax)
## BB#5:                                ##   in Loop: Header=BB240_1 Depth=1
	movq	-168(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -168(%rbp)
	jmp	LBB240_1
LBB240_6:
	addq	$208, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS5_9allocatorIdEEEEdS9_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS5_6__bindIMN3fid10FidFactoryEFvRKS9_RS9_dEJNS5_17reference_wrapperISG_EERNS5_12placeholders4__phILi1EEERNSP_ILi2EEERNSP_ILi3EEEEEES9_dNSE_IMSG_FvSI_dEJSN_SR_ST_EEEEEmT_T0_RT1_T2_S14_S14_T3_NS1_11stepper_tagE
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS5_9allocatorIdEEEEdS9_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS5_6__bindIMN3fid10FidFactoryEFvRKS9_RS9_dEJNS5_17reference_wrapperISG_EERNS5_12placeholders4__phILi1EEERNSP_ILi2EEERNSP_ILi3EEEEEES9_dNSE_IMSG_FvSI_dEJSN_SR_ST_EEEEEmT_T0_RT1_T2_S14_S14_T3_NS1_11stepper_tagE
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS5_9allocatorIdEEEEdS9_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS5_6__bindIMN3fid10FidFactoryEFvRKS9_RS9_dEJNS5_17reference_wrapperISG_EERNS5_12placeholders4__phILi1EEERNSP_ILi2EEERNSP_ILi3EEEEEES9_dNSE_IMSG_FvSI_dEJSN_SR_ST_EEEEEmT_T0_RT1_T2_S14_S14_T3_NS1_11stepper_tagE: ## @_ZN5boost7numeric6odeint6detail15integrate_constINS1_12runge_kutta4INSt3__16vectorIdNS5_9allocatorIdEEEEdS9_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEENS5_6__bindIMN3fid10FidFactoryEFvRKS9_RS9_dEJNS5_17reference_wrapperISG_EERNS5_12placeholders4__phILi1EEERNSP_ILi2EEERNSP_ILi3EEEEEES9_dNSE_IMSG_FvSI_dEJSN_SR_ST_EEEEEmT_T0_RT1_T2_S14_S14_T3_NS1_11stepper_tagE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1096:
	.cfi_def_cfa_offset 16
Ltmp1097:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1098:
	.cfi_def_cfa_register %rbp
	subq	$1344, %rsp             ## imm = 0x540
	leaq	40(%rbp), %rax
	leaq	16(%rbp), %rcx
	movq	%rsi, -1184(%rbp)
	movsd	%xmm0, -1192(%rbp)
	movsd	%xmm1, -1200(%rbp)
	movsd	%xmm2, -1208(%rbp)
	movq	%rax, -1216(%rbp)
	movq	%rdi, -1224(%rbp)
	movsd	-1192(%rbp), %xmm0
	movsd	%xmm0, -1232(%rbp)
	movl	$0, -1236(%rbp)
	movq	%rcx, -1272(%rbp)       ## 8-byte Spill
LBB241_1:                               ## =>This Inner Loop Header: Depth=1
	movsd	-1232(%rbp), %xmm0
	addsd	-1208(%rbp), %xmm0
	movsd	-1200(%rbp), %xmm1
	movsd	-1208(%rbp), %xmm2
	callq	__ZN5boost7numeric6odeint6detail17less_eq_with_signIdEEbT_S4_S4_
	testb	$1, %al
	jne	LBB241_2
	jmp	LBB241_6
LBB241_2:                               ##   in Loop: Header=BB241_1 Depth=1
	movq	-1216(%rbp), %rax
	movq	-1184(%rbp), %rcx
	movq	%rax, -1128(%rbp)
	movq	%rcx, -1136(%rbp)
	leaq	-1232(%rbp), %rax
	movq	%rax, -1144(%rbp)
	movq	-1128(%rbp), %rax
	movq	%rax, %rcx
	addq	$16, %rcx
	movq	-1136(%rbp), %rdx
	movq	%rdx, -1120(%rbp)
	movq	-1144(%rbp), %rsi
	movq	%rsi, -848(%rbp)
	leaq	-1168(%rbp), %rdi
	movq	%rdi, -824(%rbp)
	movq	%rdx, -832(%rbp)
	movq	%rsi, -840(%rbp)
	movq	-824(%rbp), %rdx
	movq	-832(%rbp), %r8
	movq	%rdx, -768(%rbp)
	movq	%r8, -776(%rbp)
	movq	%rsi, -784(%rbp)
	movq	-768(%rbp), %rdx
	movq	-776(%rbp), %r8
	movq	%rdx, -744(%rbp)
	movq	%r8, -752(%rbp)
	movq	%rsi, -760(%rbp)
	movq	-744(%rbp), %rdx
	movq	-752(%rbp), %r8
	movq	%rdx, -688(%rbp)
	movq	%r8, -696(%rbp)
	movq	%rsi, -704(%rbp)
	movq	-688(%rbp), %rdx
	movq	-696(%rbp), %rsi
	movq	%rsi, -648(%rbp)
	movq	%rdx, -600(%rbp)
	movq	%rsi, -608(%rbp)
	movq	-600(%rbp), %r8
	movq	%rsi, -592(%rbp)
	movq	%rsi, (%r8)
	addq	$8, %rdx
	movq	-704(%rbp), %rsi
	movq	%rsi, -616(%rbp)
	movq	%rdx, -632(%rbp)
	movq	%rsi, -640(%rbp)
	movq	-632(%rbp), %rdx
	movq	%rsi, -624(%rbp)
	movq	%rsi, (%rdx)
	movq	%rax, -1088(%rbp)
	movq	%rcx, -1096(%rbp)
	movq	%rdi, -1104(%rbp)
	movq	-1088(%rbp), %rax
	movq	-1096(%rbp), %rcx
	movq	%rcx, -1072(%rbp)
	movq	%rcx, -1064(%rbp)
	movq	(%rcx), %rcx
	movq	%rcx, -1112(%rbp)
	movq	-1104(%rbp), %rdx
	movq	%rcx, -992(%rbp)
	movq	%rdx, -1000(%rbp)
	leaq	-992(%rbp), %rcx
	movq	%rcx, -984(%rbp)
	movq	-992(%rbp), %rcx
	movq	-1096(%rbp), %rdx
	movq	%rdx, -864(%rbp)
	movq	%rdx, -856(%rbp)
	movq	-1104(%rbp), %rsi
	movq	%rdx, -896(%rbp)
	movq	%rsi, -904(%rbp)
	movq	$0, -912(%rbp)
	movq	-904(%rbp), %rdx
	movq	%rdx, -888(%rbp)
	movq	%rdx, -880(%rbp)
	movq	(%rdx), %rdx
	movq	%rdx, -872(%rbp)
	movq	-1096(%rbp), %rsi
	movq	%rsi, -928(%rbp)
	movq	%rsi, -920(%rbp)
	movq	-1104(%rbp), %rdi
	movq	%rsi, -960(%rbp)
	movq	%rdi, -968(%rbp)
	movq	$1, -976(%rbp)
	movq	-968(%rbp), %rsi
	movq	%rsi, -952(%rbp)
	movq	%rsi, %rdi
	addq	$8, %rdi
	movq	%rdi, -944(%rbp)
	movq	8(%rsi), %rsi
	movq	%rsi, -936(%rbp)
	movq	%rax, -1032(%rbp)
	movq	%rcx, -1040(%rbp)
	movq	%rdx, -1048(%rbp)
	movq	%rsi, -1056(%rbp)
	movq	-1032(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	-1040(%rbp), %rdx
	movq	%rdx, -1024(%rbp)
	movq	-1024(%rbp), %rdx
	addq	%rax, %rdx
	movq	%rcx, %rax
	andq	$1, %rax
	cmpq	$0, %rax
	movq	%rcx, -1280(%rbp)       ## 8-byte Spill
	movq	%rdx, -1288(%rbp)       ## 8-byte Spill
	je	LBB241_4
## BB#3:                                ##   in Loop: Header=BB241_1 Depth=1
	movq	-1288(%rbp), %rax       ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-1280(%rbp), %rdx       ## 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -1296(%rbp)       ## 8-byte Spill
	jmp	LBB241_5
LBB241_4:                               ##   in Loop: Header=BB241_1 Depth=1
	movq	-1280(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -1296(%rbp)       ## 8-byte Spill
LBB241_5:                               ## %_ZNSt3__16__bindIMN3fid10FidFactoryEFvRKNS_6vectorIdNS_9allocatorIdEEEEdEJNS_17reference_wrapperIS2_EERNS_12placeholders4__phILi1EEERNSE_ILi2EEEEEclIJRS6_RdEEENS_13__bind_returnISA_NS_5tupleIJSC_SF_SH_EEENSO_IJDpOT_EEEXsr21_is_valid_bind_returnISA_SP_ST_EE5valueEE4typeESS_.exit
                                        ##   in Loop: Header=BB241_1 Depth=1
	movq	-1296(%rbp), %rax       ## 8-byte Reload
	movq	-1048(%rbp), %rcx
	movq	%rcx, -1016(%rbp)
	movq	-1016(%rbp), %rsi
	movq	-1056(%rbp), %rcx
	movq	%rcx, -1008(%rbp)
	movq	-1008(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-1288(%rbp), %rdi       ## 8-byte Reload
	callq	*%rax
	leaq	-1264(%rbp), %rax
	movq	-1224(%rbp), %rcx
	movq	-1272(%rbp), %rsi       ## 8-byte Reload
	movq	(%rsi), %rdi
	movq	%rdi, -1264(%rbp)
	movq	8(%rsi), %rdi
	movq	%rdi, -1256(%rbp)
	movq	16(%rsi), %rdi
	movq	%rdi, -1248(%rbp)
	movq	-1184(%rbp), %rsi
	movsd	-1232(%rbp), %xmm0
	movsd	-1208(%rbp), %xmm1
	movq	%rcx, %rdi
	movq	(%rax), %rcx
	movq	%rcx, (%rsp)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7do_stepINS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd
	movl	-1236(%rbp), %edx
	addl	$1, %edx
	movl	%edx, -1236(%rbp)
	movsd	-1192(%rbp), %xmm0
	cvtsi2sdl	-1236(%rbp), %xmm1
	mulsd	-1208(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -1232(%rbp)
	jmp	LBB241_1
LBB241_6:
	movq	-1216(%rbp), %rax
	movq	-1184(%rbp), %rcx
	movq	%rax, -544(%rbp)
	movq	%rcx, -552(%rbp)
	leaq	-1232(%rbp), %rax
	movq	%rax, -560(%rbp)
	movq	-544(%rbp), %rax
	movq	%rax, %rcx
	addq	$16, %rcx
	movq	-552(%rbp), %rdx
	movq	%rdx, -536(%rbp)
	movq	-560(%rbp), %rsi
	movq	%rsi, -264(%rbp)
	leaq	-584(%rbp), %rdi
	movq	%rdi, -240(%rbp)
	movq	%rdx, -248(%rbp)
	movq	%rsi, -256(%rbp)
	movq	-240(%rbp), %rdx
	movq	-248(%rbp), %r8
	movq	%rdx, -184(%rbp)
	movq	%r8, -192(%rbp)
	movq	%rsi, -200(%rbp)
	movq	-184(%rbp), %rdx
	movq	-192(%rbp), %r8
	movq	%rdx, -160(%rbp)
	movq	%r8, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	-160(%rbp), %rdx
	movq	-168(%rbp), %r8
	movq	%rdx, -104(%rbp)
	movq	%r8, -112(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-104(%rbp), %rdx
	movq	-112(%rbp), %rsi
	movq	%rsi, -64(%rbp)
	movq	%rdx, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %r8
	movq	%rsi, -8(%rbp)
	movq	%rsi, (%r8)
	addq	$8, %rdx
	movq	-120(%rbp), %rsi
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rsi, -40(%rbp)
	movq	%rsi, (%rdx)
	movq	%rax, -504(%rbp)
	movq	%rcx, -512(%rbp)
	movq	%rdi, -520(%rbp)
	movq	-504(%rbp), %rax
	movq	-512(%rbp), %rcx
	movq	%rcx, -488(%rbp)
	movq	%rcx, -480(%rbp)
	movq	(%rcx), %rcx
	movq	%rcx, -528(%rbp)
	movq	-520(%rbp), %rdx
	movq	%rcx, -408(%rbp)
	movq	%rdx, -416(%rbp)
	leaq	-408(%rbp), %rcx
	movq	%rcx, -400(%rbp)
	movq	-408(%rbp), %rcx
	movq	-512(%rbp), %rdx
	movq	%rdx, -280(%rbp)
	movq	%rdx, -272(%rbp)
	movq	-520(%rbp), %rsi
	movq	%rdx, -312(%rbp)
	movq	%rsi, -320(%rbp)
	movq	$0, -328(%rbp)
	movq	-320(%rbp), %rdx
	movq	%rdx, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movq	(%rdx), %rdx
	movq	%rdx, -288(%rbp)
	movq	-512(%rbp), %rsi
	movq	%rsi, -344(%rbp)
	movq	%rsi, -336(%rbp)
	movq	-520(%rbp), %rdi
	movq	%rsi, -376(%rbp)
	movq	%rdi, -384(%rbp)
	movq	$1, -392(%rbp)
	movq	-384(%rbp), %rsi
	movq	%rsi, -368(%rbp)
	movq	%rsi, %rdi
	addq	$8, %rdi
	movq	%rdi, -360(%rbp)
	movq	8(%rsi), %rsi
	movq	%rsi, -352(%rbp)
	movq	%rax, -448(%rbp)
	movq	%rcx, -456(%rbp)
	movq	%rdx, -464(%rbp)
	movq	%rsi, -472(%rbp)
	movq	-448(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	-456(%rbp), %rdx
	movq	%rdx, -440(%rbp)
	movq	-440(%rbp), %rdx
	addq	%rax, %rdx
	movq	%rcx, %rax
	andq	$1, %rax
	cmpq	$0, %rax
	movq	%rcx, -1304(%rbp)       ## 8-byte Spill
	movq	%rdx, -1312(%rbp)       ## 8-byte Spill
	je	LBB241_8
## BB#7:
	movq	-1312(%rbp), %rax       ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-1304(%rbp), %rdx       ## 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -1320(%rbp)       ## 8-byte Spill
	jmp	LBB241_9
LBB241_8:
	movq	-1304(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -1320(%rbp)       ## 8-byte Spill
LBB241_9:                               ## %_ZNSt3__16__bindIMN3fid10FidFactoryEFvRKNS_6vectorIdNS_9allocatorIdEEEEdEJNS_17reference_wrapperIS2_EERNS_12placeholders4__phILi1EEERNSE_ILi2EEEEEclIJRS6_RdEEENS_13__bind_returnISA_NS_5tupleIJSC_SF_SH_EEENSO_IJDpOT_EEEXsr21_is_valid_bind_returnISA_SP_ST_EE5valueEE4typeESS_.exit4
	movq	-1320(%rbp), %rax       ## 8-byte Reload
	movq	-464(%rbp), %rcx
	movq	%rcx, -432(%rbp)
	movq	-432(%rbp), %rsi
	movq	-472(%rbp), %rcx
	movq	%rcx, -424(%rbp)
	movq	-424(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-1312(%rbp), %rdi       ## 8-byte Reload
	callq	*%rax
	movslq	-1236(%rbp), %rax
	addq	$1344, %rsp             ## imm = 0x540
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKSB_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKSB_
	.align	4, 0x90
__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKSB_: ## @_ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC1ERKSB_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1099:
	.cfi_def_cfa_offset 16
Ltmp1100:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1101:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_
	.align	4, 0x90
__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_: ## @_ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1102:
	.cfi_def_cfa_offset 16
Ltmp1103:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1104:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_
	.align	4, 0x90
__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_: ## @_ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKSB_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin244:
	.cfi_lsda 16, Lexception244
## BB#0:
	pushq	%rbp
Ltmp1113:
	.cfi_def_cfa_offset 16
Ltmp1114:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1115:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -56(%rbp)         ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKSD_
	movq	-56(%rbp), %rsi         ## 8-byte Reload
	addq	$32, %rsi
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
Ltmp1105:
	movq	%rdi, -64(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-64(%rbp), %rsi         ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKS6_
Ltmp1106:
	jmp	LBB244_1
LBB244_1:
	movq	-16(%rbp), %rax
	movb	144(%rax), %cl
	movq	-56(%rbp), %rax         ## 8-byte Reload
	movb	%cl, 144(%rax)
	addq	$152, %rax
	movq	-16(%rbp), %rdx
	addq	$152, %rdx
Ltmp1107:
	movq	%rax, %rdi
	movq	%rdx, %rsi
	movq	%rax, -72(%rbp)         ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1ERKS8_
Ltmp1108:
	jmp	LBB244_2
LBB244_2:
	movq	-16(%rbp), %rax
	movb	144(%rax), %cl
	movq	-56(%rbp), %rax         ## 8-byte Reload
	movb	%cl, 144(%rax)
	addq	$176, %rax
	movq	$0, -40(%rbp)
	movq	$0, -48(%rbp)
	movq	%rax, -80(%rbp)         ## 8-byte Spill
LBB244_3:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$3, -48(%rbp)
	jae	LBB244_9
## BB#4:                                ##   in Loop: Header=BB244_3 Depth=1
	movq	-40(%rbp), %rax
	leaq	(%rax,%rax,2), %rcx
	movq	-80(%rbp), %rdx         ## 8-byte Reload
	leaq	(%rdx,%rcx,8), %rdi
	incq	%rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	-16(%rbp), %rcx
	leaq	(%rax,%rax,2), %rax
	leaq	176(%rcx,%rax,8), %rsi
Ltmp1110:
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1ERKS8_
Ltmp1111:
	jmp	LBB244_5
LBB244_5:                               ##   in Loop: Header=BB244_3 Depth=1
	jmp	LBB244_6
LBB244_6:                               ##   in Loop: Header=BB244_3 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	LBB244_3
LBB244_7:
Ltmp1109:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	jmp	LBB244_10
LBB244_8:
Ltmp1112:
	movl	%edx, %ecx
	movq	%rax, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movq	-72(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED1Ev
	jmp	LBB244_10
LBB244_9:
	movq	-16(%rbp), %rax
	movb	144(%rax), %cl
	movq	-56(%rbp), %rax         ## 8-byte Reload
	movb	%cl, 144(%rax)
	addq	$80, %rsp
	popq	%rbp
	retq
LBB244_10:
	movq	-56(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_ED2Ev
## BB#11:
	movq	-24(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end244:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table244:
Lexception244:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\266\200\200"          ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	52                      ## Call site table length
Lset331 = Leh_func_begin244-Leh_func_begin244 ## >> Call Site 1 <<
	.long	Lset331
Lset332 = Ltmp1105-Leh_func_begin244    ##   Call between Leh_func_begin244 and Ltmp1105
	.long	Lset332
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset333 = Ltmp1105-Leh_func_begin244    ## >> Call Site 2 <<
	.long	Lset333
Lset334 = Ltmp1108-Ltmp1105             ##   Call between Ltmp1105 and Ltmp1108
	.long	Lset334
Lset335 = Ltmp1109-Leh_func_begin244    ##     jumps to Ltmp1109
	.long	Lset335
	.byte	0                       ##   On action: cleanup
Lset336 = Ltmp1110-Leh_func_begin244    ## >> Call Site 3 <<
	.long	Lset336
Lset337 = Ltmp1111-Ltmp1110             ##   Call between Ltmp1110 and Ltmp1111
	.long	Lset337
Lset338 = Ltmp1112-Leh_func_begin244    ##     jumps to Ltmp1112
	.long	Lset338
	.byte	0                       ##   On action: cleanup
Lset339 = Ltmp1111-Leh_func_begin244    ## >> Call Site 4 <<
	.long	Lset339
Lset340 = Leh_func_end244-Ltmp1111      ##   Call between Ltmp1111 and Leh_func_end244
	.long	Lset340
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKSD_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKSD_
	.align	4, 0x90
__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKSD_: ## @_ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKSD_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1116:
	.cfi_def_cfa_offset 16
Ltmp1117:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1118:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movb	(%rdi), %al
	movb	%al, (%rsi)
	movq	-16(%rbp), %rdi
	movb	1(%rdi), %al
	movb	%al, 1(%rsi)
	movq	%rsi, %rdi
	addq	$8, %rdi
	movq	-16(%rbp), %rcx
	addq	$8, %rcx
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1ERKS8_
	movq	-16(%rbp), %rcx
	movb	1(%rcx), %al
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	movb	%al, 1(%rcx)
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKS6_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKS6_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKS6_: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKS6_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1119:
	.cfi_def_cfa_offset 16
Ltmp1120:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1121:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKS6_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1ERKS8_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1ERKS8_
	.align	4, 0x90
__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1ERKS8_: ## @_ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1ERKS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1122:
	.cfi_def_cfa_offset 16
Ltmp1123:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1124:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2ERKS8_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED1Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED1Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED1Ev: ## @_ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1125:
	.cfi_def_cfa_offset 16
Ltmp1126:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1127:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_ED2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_ED2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_ED2Ev: ## @_ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_ED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1128:
	.cfi_def_cfa_offset 16
Ltmp1129:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1130:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	addq	$8, %rdi
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED2Ev: ## @_ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1131:
	.cfi_def_cfa_offset 16
Ltmp1132:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1133:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2ERKS8_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2ERKS8_
	.align	4, 0x90
__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2ERKS8_: ## @_ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2ERKS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1134:
	.cfi_def_cfa_offset 16
Ltmp1135:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1136:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEEC1ERKS3_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKS6_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKS6_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKS6_: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKS6_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1137:
	.cfi_def_cfa_offset 16
Ltmp1138:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1139:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKS7_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKS7_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKS7_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKS7_: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKS7_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1140:
	.cfi_def_cfa_offset 16
Ltmp1141:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1142:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKS7_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKS7_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKS7_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKS7_: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKS7_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1143:
	.cfi_def_cfa_offset 16
Ltmp1144:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1145:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         ## 8-byte Reload
	callq	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_
	.align	4, 0x90
__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_: ## @_ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1146:
	.cfi_def_cfa_offset 16
Ltmp1147:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1148:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         ## 8-byte Reload
	callq	__ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_
	.align	4, 0x90
__ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_: ## @_ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2ERKSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1149:
	.cfi_def_cfa_offset 16
Ltmp1150:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1151:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$40, %eax
	movl	%eax, %edx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rcx
	movq	%rcx, (%rsi)
	movq	8(%rdi), %rcx
	movq	%rcx, 8(%rsi)
	movq	-16(%rbp), %rcx
	movq	16(%rcx), %rdi
	movq	%rdi, 16(%rsi)
	movq	24(%rcx), %rdi
	movq	%rdi, 24(%rsi)
	movq	32(%rcx), %rcx
	movq	%rcx, 32(%rsi)
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rdi
	movq	%rdi, 40(%rsi)
	movq	48(%rcx), %rdi
	movq	%rdi, 48(%rsi)
	movq	56(%rcx), %rdi
	movq	%rdi, 56(%rsi)
	movq	64(%rcx), %rcx
	movq	%rcx, 64(%rsi)
	addq	$72, %rsi
	movq	-16(%rbp), %rcx
	addq	$72, %rcx
	movq	%rsi, %rdi
	movq	%rcx, %rsi
	callq	_memcpy
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI257_0:
	.quad	4372995238176751616     ## double 2.2204460492503131E-16
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint6detail17less_eq_with_signIdEEbT_S4_S4_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail17less_eq_with_signIdEEbT_S4_S4_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail17less_eq_with_signIdEEbT_S4_S4_: ## @_ZN5boost7numeric6odeint6detail17less_eq_with_signIdEEbT_S4_S4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1152:
	.cfi_def_cfa_offset 16
Ltmp1153:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1154:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	leaq	-32(%rbp), %rdi
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movsd	%xmm2, -32(%rbp)
	callq	__ZN5boost7numeric6odeint14get_unit_valueIdEENS1_6detail19get_unit_value_implIT_vE11result_typeERKS5_
	xorps	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jbe	LBB257_2
## BB#1:
	movsd	LCPI257_0(%rip), %xmm0
	movsd	-16(%rbp), %xmm1
	subsd	-24(%rbp), %xmm1
	ucomisd	%xmm1, %xmm0
	seta	%al
	andb	$1, %al
	movb	%al, -1(%rbp)
	jmp	LBB257_3
LBB257_2:
	movsd	LCPI257_0(%rip), %xmm0
	movsd	-24(%rbp), %xmm1
	subsd	-16(%rbp), %xmm1
	ucomisd	%xmm1, %xmm0
	seta	%al
	andb	$1, %al
	movb	%al, -1(%rbp)
LBB257_3:
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7do_stepINS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7do_stepINS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd
	.align	4, 0x90
__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7do_stepINS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd: ## @_ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7do_stepINS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1155:
	.cfi_def_cfa_offset 16
Ltmp1156:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1157:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	16(%rbp), %rax
	leaq	-56(%rbp), %rcx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movsd	%xmm1, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rax), %rsi
	movq	%rsi, -56(%rbp)
	movq	8(%rax), %rsi
	movq	%rsi, -48(%rbp)
	movq	16(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rsi
	movsd	-24(%rbp), %xmm0
	movsd	-32(%rbp), %xmm1
	movq	(%rcx), %rax
	movq	%rax, (%rsp)
	movq	8(%rcx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsp)
	callq	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E10do_step_v1INS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E10do_step_v1INS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E10do_step_v1INS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd
	.align	4, 0x90
__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E10do_step_v1INS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd: ## @_ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E10do_step_v1INS4_6__bindIMN3fid10FidFactoryEFvRKS8_RS8_dEJNS4_17reference_wrapperISH_EERNS4_12placeholders4__phILi1EEERNSQ_ILi2EEERNSQ_ILi3EEEEEES8_EEvT_RT0_dd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1158:
	.cfi_def_cfa_offset 16
Ltmp1159:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1160:
	.cfi_def_cfa_register %rbp
	subq	$1408, %rsp             ## imm = 0x580
	leaq	16(%rbp), %rax
	movq	%rdi, -1224(%rbp)
	movq	%rsi, -1232(%rbp)
	movsd	%xmm0, -1240(%rbp)
	movsd	%xmm1, -1248(%rbp)
	movq	-1224(%rbp), %rsi
	movq	%rax, -1256(%rbp)
	movq	%rsi, %rdi
	incq	%rdi
	movq	-1232(%rbp), %rcx
	movq	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E11resize_implIS8_EEbRKT_@GOTPCREL(%rip), %rdx
	movq	%rdx, -1296(%rbp)
	movq	$0, -1288(%rbp)
	movq	%rsi, -1216(%rbp)
	leaq	-1208(%rbp), %rdx
	movq	%rdx, -1192(%rbp)
	movq	%rsi, -1200(%rbp)
	movq	-1192(%rbp), %rdx
	movq	%rdx, -1176(%rbp)
	movq	%rsi, -1184(%rbp)
	movq	-1176(%rbp), %rdx
	movq	%rsi, -1168(%rbp)
	movq	%rsi, (%rdx)
	movq	-1208(%rbp), %rdx
	movq	%rdx, -1304(%rbp)
	leaq	-1296(%rbp), %rdx
	movq	%rdx, -1144(%rbp)
	leaq	-1304(%rbp), %rdx
	movq	%rdx, -1152(%rbp)
	movq	__ZNSt3__112placeholders2_1E@GOTPCREL(%rip), %rdx
	movq	%rdx, -1160(%rbp)
	movq	-1144(%rbp), %rdx
	movq	%rdx, -1136(%rbp)
	movq	-1152(%rbp), %r8
	movq	%r8, -760(%rbp)
	movq	-1160(%rbp), %r9
	movq	%r9, -768(%rbp)
	leaq	-1280(%rbp), %r10
	movq	%r10, -1104(%rbp)
	movq	%rdx, -1112(%rbp)
	movq	%r8, -1120(%rbp)
	movq	%r9, -1128(%rbp)
	movq	-1104(%rbp), %rdx
	movq	-1112(%rbp), %r8
	movq	-1120(%rbp), %r10
	movq	%rdx, -1072(%rbp)
	movq	%r8, -1080(%rbp)
	movq	%r10, -1088(%rbp)
	movq	%r9, -1096(%rbp)
	movq	-1072(%rbp), %rdx
	movq	-1080(%rbp), %r8
	movq	%r8, -1064(%rbp)
	movq	(%r8), %r9
	movq	8(%r8), %r8
	movq	%r8, 8(%rdx)
	movq	%r9, (%rdx)
	addq	$16, %rdx
	movq	-1088(%rbp), %r8
	movq	%r8, -776(%rbp)
	movq	-1096(%rbp), %r9
	movq	%r9, -784(%rbp)
	movq	%rdx, -1040(%rbp)
	movq	%r8, -1048(%rbp)
	movq	%r9, -1056(%rbp)
	movq	-1040(%rbp), %rdx
	movq	-1048(%rbp), %r8
	movq	%rdx, -984(%rbp)
	movq	%r8, -992(%rbp)
	movq	%r9, -1000(%rbp)
	movq	-984(%rbp), %rdx
	movq	-992(%rbp), %r8
	movq	%r8, -976(%rbp)
	movq	-1000(%rbp), %r9
	movq	%r9, -792(%rbp)
	movq	%rdx, -952(%rbp)
	movq	%r8, -960(%rbp)
	movq	%r9, -968(%rbp)
	movq	-952(%rbp), %rdx
	movq	-960(%rbp), %r8
	movq	%rdx, -896(%rbp)
	movq	%r8, -904(%rbp)
	movq	%r9, -912(%rbp)
	movq	-896(%rbp), %rdx
	movq	-904(%rbp), %r8
	movq	%r8, -856(%rbp)
	movq	%rdx, -808(%rbp)
	movq	%r8, -816(%rbp)
	movq	-808(%rbp), %r9
	movq	%r8, -800(%rbp)
	movq	(%r8), %r8
	movq	%r8, (%r9)
	movq	-912(%rbp), %r8
	movq	%r8, -824(%rbp)
	movq	%rdx, -840(%rbp)
	movq	%r8, -848(%rbp)
	movq	%r8, -832(%rbp)
	movq	-1264(%rbp), %rdx
	movq	%rsp, %r8
	movq	%rdx, 16(%r8)
	movq	-1280(%rbp), %rdx
	movq	-1272(%rbp), %r9
	movq	%r9, 8(%r8)
	movq	%rdx, (%r8)
	movq	%rsi, -1336(%rbp)       ## 8-byte Spill
	movq	%rcx, %rsi
	movq	%rax, -1344(%rbp)       ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EELt4ES8_dS8_dSC_SD_S2_EEFbRKS8_EJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_
	movq	-1256(%rbp), %rcx
	movq	-1232(%rbp), %rdx
	movq	-1336(%rbp), %rsi       ## 8-byte Reload
	addq	$8, %rsi
	movq	%rcx, -696(%rbp)
	movq	%rdx, -704(%rbp)
	movq	%rsi, -712(%rbp)
	leaq	-1240(%rbp), %rcx
	movq	%rcx, -720(%rbp)
	movq	-696(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$16, %rdx
	movq	-704(%rbp), %rsi
	movq	%rsi, -688(%rbp)
	movq	-712(%rbp), %rdi
	movq	%rdi, -336(%rbp)
	movq	-720(%rbp), %r8
	movq	%r8, -8(%rbp)
	leaq	-752(%rbp), %r9
	movq	%r9, -304(%rbp)
	movq	%rsi, -312(%rbp)
	movq	%rdi, -320(%rbp)
	movq	%r8, -328(%rbp)
	movq	-304(%rbp), %rsi
	movq	-312(%rbp), %rdi
	movq	-320(%rbp), %r10
	movq	%rsi, -240(%rbp)
	movq	%rdi, -248(%rbp)
	movq	%r10, -256(%rbp)
	movq	%r8, -264(%rbp)
	movq	-240(%rbp), %rsi
	movq	-248(%rbp), %rdi
	movq	-256(%rbp), %r10
	movq	%rsi, -208(%rbp)
	movq	%rdi, -216(%rbp)
	movq	%r10, -224(%rbp)
	movq	%r8, -232(%rbp)
	movq	-208(%rbp), %rsi
	movq	-216(%rbp), %rdi
	movq	-224(%rbp), %r10
	movq	%rsi, -144(%rbp)
	movq	%rdi, -152(%rbp)
	movq	%r10, -160(%rbp)
	movq	%r8, -168(%rbp)
	movq	-144(%rbp), %rsi
	movq	-152(%rbp), %rdi
	movq	%rdi, -104(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdi, -32(%rbp)
	movq	-24(%rbp), %r8
	movq	%rdi, -16(%rbp)
	movq	%rdi, (%r8)
	movq	%rsi, %rdi
	addq	$8, %rdi
	movq	-160(%rbp), %r8
	movq	%r8, -40(%rbp)
	movq	%rdi, -56(%rbp)
	movq	%r8, -64(%rbp)
	movq	-56(%rbp), %rdi
	movq	%r8, -48(%rbp)
	movq	%r8, (%rdi)
	addq	$16, %rsi
	movq	-168(%rbp), %rdi
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movq	%rdi, -96(%rbp)
	movq	-88(%rbp), %rsi
	movq	%rdi, -80(%rbp)
	movq	%rdi, (%rsi)
	movq	%rcx, -656(%rbp)
	movq	%rdx, -664(%rbp)
	movq	%r9, -672(%rbp)
	movq	-656(%rbp), %rcx
	movq	-664(%rbp), %rdx
	movq	%rdx, -640(%rbp)
	movq	%rdx, -632(%rbp)
	movq	(%rdx), %rdx
	movq	%rdx, -680(%rbp)
	movq	-672(%rbp), %rsi
	movq	%rdx, -544(%rbp)
	movq	%rsi, -552(%rbp)
	leaq	-544(%rbp), %rdx
	movq	%rdx, -536(%rbp)
	movq	-544(%rbp), %rdx
	movq	-664(%rbp), %rsi
	movq	%rsi, -352(%rbp)
	movq	%rsi, -344(%rbp)
	movq	-672(%rbp), %rdi
	movq	%rsi, -384(%rbp)
	movq	%rdi, -392(%rbp)
	movq	$0, -400(%rbp)
	movq	-392(%rbp), %rsi
	movq	%rsi, -376(%rbp)
	movq	%rsi, -368(%rbp)
	movq	(%rsi), %rsi
	movq	%rsi, -360(%rbp)
	movq	-664(%rbp), %rdi
	movq	%rdi, -416(%rbp)
	movq	%rdi, -408(%rbp)
	movq	-672(%rbp), %r8
	movq	%rdi, -448(%rbp)
	movq	%r8, -456(%rbp)
	movq	$1, -464(%rbp)
	movq	-456(%rbp), %rdi
	movq	%rdi, -440(%rbp)
	movq	%rdi, %r8
	addq	$8, %r8
	movq	%r8, -432(%rbp)
	movq	8(%rdi), %rdi
	movq	%rdi, -424(%rbp)
	movq	-664(%rbp), %r8
	movq	%r8, -480(%rbp)
	movq	%r8, -472(%rbp)
	movq	-672(%rbp), %r9
	movq	%r8, -512(%rbp)
	movq	%r9, -520(%rbp)
	movq	$2, -528(%rbp)
	movq	-520(%rbp), %r8
	movq	%r8, -504(%rbp)
	movq	%r8, %r9
	addq	$16, %r9
	movq	%r9, -496(%rbp)
	movq	16(%r8), %r8
	movq	%r8, -488(%rbp)
	movq	%rcx, -592(%rbp)
	movq	%rdx, -600(%rbp)
	movq	%rsi, -608(%rbp)
	movq	%rdi, -616(%rbp)
	movq	%r8, -624(%rbp)
	movq	-592(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	8(%rcx), %rcx
	movq	-600(%rbp), %rsi
	movq	%rsi, -584(%rbp)
	movq	-584(%rbp), %rsi
	addq	%rcx, %rsi
	movq	%rdx, %rcx
	andq	$1, %rcx
	cmpq	$0, %rcx
	movb	%al, -1345(%rbp)        ## 1-byte Spill
	movq	%rdx, -1360(%rbp)       ## 8-byte Spill
	movq	%rsi, -1368(%rbp)       ## 8-byte Spill
	je	LBB259_2
## BB#1:
	movq	-1368(%rbp), %rax       ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-1360(%rbp), %rdx       ## 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -1376(%rbp)       ## 8-byte Spill
	jmp	LBB259_3
LBB259_2:
	movq	-1360(%rbp), %rax       ## 8-byte Reload
	movq	%rax, -1376(%rbp)       ## 8-byte Spill
LBB259_3:                               ## %_ZNSt3__16__bindIMN3fid10FidFactoryEFvRKNS_6vectorIdNS_9allocatorIdEEEERS6_dEJNS_17reference_wrapperIS2_EERNS_12placeholders4__phILi1EEERNSF_ILi2EEERNSF_ILi3EEEEEclIJS9_S9_RdEEENS_13__bind_returnISB_NS_5tupleIJSD_SG_SI_SK_EEENSQ_IJDpOT_EEEXsr21_is_valid_bind_returnISB_SR_SV_EE5valueEE4typeESU_.exit
	movq	-1376(%rbp), %rax       ## 8-byte Reload
	movq	-608(%rbp), %rcx
	movq	%rcx, -576(%rbp)
	movq	-576(%rbp), %rsi
	movq	-616(%rbp), %rcx
	movq	%rcx, -560(%rbp)
	movq	-560(%rbp), %rdx
	movq	-624(%rbp), %rcx
	movq	%rcx, -568(%rbp)
	movq	-568(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-1368(%rbp), %rdi       ## 8-byte Reload
	callq	*%rax
	movq	-1336(%rbp), %rdi       ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7stepperEv
	leaq	-1328(%rbp), %rcx
	movq	-1344(%rbp), %rdx       ## 8-byte Reload
	movq	(%rdx), %rsi
	movq	%rsi, -1328(%rbp)
	movq	8(%rdx), %rsi
	movq	%rsi, -1320(%rbp)
	movq	16(%rdx), %rsi
	movq	%rsi, -1312(%rbp)
	movq	-1232(%rbp), %rsi
	movq	-1336(%rbp), %rdi       ## 8-byte Reload
	addq	$8, %rdi
	movsd	-1240(%rbp), %xmm0
	movq	-1232(%rbp), %r8
	movsd	-1248(%rbp), %xmm1
	movq	%rdi, -1384(%rbp)       ## 8-byte Spill
	movq	%rax, %rdi
	movq	(%rcx), %rax
	movq	%rax, (%rsp)
	movq	8(%rcx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsp)
	movq	-1384(%rbp), %rdx       ## 8-byte Reload
	movq	%r8, %rcx
	callq	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE12do_step_implINS3_6__bindIMN3fid10FidFactoryEFvRKS7_RS7_dEJNS3_17reference_wrapperISF_EERNS3_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES7_S7_S7_EEvT_RKT0_RKT1_dRT2_d
	addq	$1408, %rsp             ## imm = 0x580
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EELt4ES8_dS8_dSC_SD_S2_EEFbRKS8_EJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EELt4ES8_dS8_dSC_SD_S2_EEFbRKS8_EJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_
	.align	4, 0x90
__ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EELt4ES8_dS8_dSC_SD_S2_EEFbRKS8_EJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_: ## @_ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EELt4ES8_dS8_dSC_SD_S2_EEFbRKS8_EJNS4_17reference_wrapperISF_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1161:
	.cfi_def_cfa_offset 16
Ltmp1162:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1163:
	.cfi_def_cfa_register %rbp
	subq	$480, %rsp              ## imm = 0x1E0
	leaq	16(%rbp), %rax
	movq	%rdi, -432(%rbp)
	movq	%rsi, -440(%rbp)
	movq	-432(%rbp), %rsi
	testb	$1, (%rsi)
	movq	%rax, -448(%rbp)        ## 8-byte Spill
	movq	%rsi, -456(%rbp)        ## 8-byte Spill
	jne	LBB260_5
## BB#1:
	movq	-456(%rbp), %rax        ## 8-byte Reload
	movb	$1, (%rax)
	movq	-440(%rbp), %rcx
	movq	-448(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -392(%rbp)
	movq	%rcx, -400(%rbp)
	movq	-392(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$16, %rdi
	movq	%rcx, -384(%rbp)
	leaq	-416(%rbp), %r8
	movq	%r8, -184(%rbp)
	movq	%rcx, -192(%rbp)
	movq	-184(%rbp), %r9
	movq	%r9, -136(%rbp)
	movq	%rcx, -144(%rbp)
	movq	-136(%rbp), %r9
	movq	%r9, -120(%rbp)
	movq	%rcx, -128(%rbp)
	movq	-120(%rbp), %r9
	movq	%r9, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	-72(%rbp), %r9
	movq	%rcx, -32(%rbp)
	movq	%r9, -16(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-16(%rbp), %r9
	movq	%rcx, -8(%rbp)
	movq	%rcx, (%r9)
	movq	%rsi, -352(%rbp)
	movq	%rdi, -360(%rbp)
	movq	%r8, -368(%rbp)
	movq	-352(%rbp), %rcx
	movq	-360(%rbp), %rsi
	movq	%rsi, -336(%rbp)
	movq	%rsi, -328(%rbp)
	movq	(%rsi), %rsi
	movq	%rsi, -376(%rbp)
	movq	-368(%rbp), %rdi
	movq	%rsi, -272(%rbp)
	movq	%rdi, -280(%rbp)
	leaq	-272(%rbp), %rsi
	movq	%rsi, -264(%rbp)
	movq	-272(%rbp), %rsi
	movq	-360(%rbp), %rdi
	movq	%rdi, -208(%rbp)
	movq	%rdi, -200(%rbp)
	movq	-368(%rbp), %r8
	movq	%rdi, -240(%rbp)
	movq	%r8, -248(%rbp)
	movq	$0, -256(%rbp)
	movq	-248(%rbp), %rdi
	movq	%rdi, -232(%rbp)
	movq	%rdi, -224(%rbp)
	movq	(%rdi), %rdi
	movq	%rdi, -216(%rbp)
	movq	%rcx, -304(%rbp)
	movq	%rsi, -312(%rbp)
	movq	%rdi, -320(%rbp)
	movq	-304(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	8(%rcx), %rcx
	movq	-312(%rbp), %rdi
	movq	%rdi, -296(%rbp)
	movq	-296(%rbp), %rdi
	addq	%rcx, %rdi
	movq	%rsi, %rcx
	andq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rsi, -464(%rbp)        ## 8-byte Spill
	movq	%rdi, -472(%rbp)        ## 8-byte Spill
	je	LBB260_3
## BB#2:
	movq	-472(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-464(%rbp), %rdx        ## 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -480(%rbp)        ## 8-byte Spill
	jmp	LBB260_4
LBB260_3:
	movq	-464(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -480(%rbp)        ## 8-byte Spill
LBB260_4:                               ## %_ZNSt3__16__bindIMN5boost7numeric6odeint21explicit_stepper_baseINS3_19explicit_generic_rkILm4ELm4ENS_6vectorIdNS_9allocatorIdEEEEdS9_dNS3_13range_algebraENS3_18default_operationsENS3_17initially_resizerEEELt4ES9_dS9_dSA_SB_SC_EEFbRKS9_EJNS_17reference_wrapperISE_EERNS_12placeholders4__phILi1EEEEEclIJSG_EEENS_13__bind_returnISI_NS_5tupleIJSK_SN_EEENSS_IJDpOT_EEEXsr21_is_valid_bind_returnISI_ST_SX_EE5valueEE4typeESW_.exit
	movq	-480(%rbp), %rax        ## 8-byte Reload
	movq	-320(%rbp), %rcx
	movq	%rcx, -288(%rbp)
	movq	-288(%rbp), %rsi
	movq	-472(%rbp), %rdi        ## 8-byte Reload
	callq	*%rax
	andb	$1, %al
	movb	%al, -417(%rbp)
	jmp	LBB260_6
LBB260_5:
	movb	$0, -417(%rbp)
LBB260_6:
	movb	-417(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$480, %rsp              ## imm = 0x1E0
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E11resize_implIS8_EEbRKT_
	.weak_definition	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E11resize_implIS8_EEbRKT_
	.align	4, 0x90
__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E11resize_implIS8_EEbRKT_: ## @_ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E11resize_implIS8_EEbRKT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1164:
	.cfi_def_cfa_offset 16
Ltmp1165:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1166:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	addq	$8, %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, -32(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-32(%rbp), %rsi         ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint28adjust_size_by_resizeabilityINS1_13state_wrapperINSt3__16vectorIdNS4_9allocatorIdEEEEvEES8_EEbRT_RKT0_NS_17integral_constantIbLb1EEE
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7stepperEv
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7stepperEv
	.align	4, 0x90
__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7stepperEv: ## @_ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_E7stepperEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1167:
	.cfi_def_cfa_offset 16
Ltmp1168:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1169:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE12do_step_implINS3_6__bindIMN3fid10FidFactoryEFvRKS7_RS7_dEJNS3_17reference_wrapperISF_EERNS3_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES7_S7_S7_EEvT_RKT0_RKT1_dRT2_d
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE12do_step_implINS3_6__bindIMN3fid10FidFactoryEFvRKS7_RS7_dEJNS3_17reference_wrapperISF_EERNS3_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES7_S7_S7_EEvT_RKT0_RKT1_dRT2_d
	.align	4, 0x90
__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE12do_step_implINS3_6__bindIMN3fid10FidFactoryEFvRKS7_RS7_dEJNS3_17reference_wrapperISF_EERNS3_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES7_S7_S7_EEvT_RKT0_RKT1_dRT2_d: ## @_ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE12do_step_implINS3_6__bindIMN3fid10FidFactoryEFvRKS7_RS7_dEJNS3_17reference_wrapperISF_EERNS3_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEES7_S7_S7_EEvT_RKT0_RKT1_dRT2_d
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1170:
	.cfi_def_cfa_offset 16
Ltmp1171:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1172:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              ## imm = 0x288
Ltmp1173:
	.cfi_offset %rbx, -24
	leaq	16(%rbp), %rax
	leaq	-544(%rbp), %r8
	movq	%rdi, -480(%rbp)
	movq	%rsi, -488(%rbp)
	movq	%rdx, -496(%rbp)
	movsd	%xmm0, -504(%rbp)
	movq	%rcx, -512(%rbp)
	movsd	%xmm1, -520(%rbp)
	movq	-480(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$144, %rdx
	movq	-488(%rbp), %rsi
	movq	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE11resize_implIS7_EEbRKT_@GOTPCREL(%rip), %rdi
	movq	%rdi, -560(%rbp)
	movq	$0, -552(%rbp)
	movq	%rcx, -472(%rbp)
	leaq	-464(%rbp), %rdi
	movq	%rdi, -448(%rbp)
	movq	%rcx, -456(%rbp)
	movq	-448(%rbp), %rdi
	movq	%rdi, -432(%rbp)
	movq	%rcx, -440(%rbp)
	movq	-432(%rbp), %rdi
	movq	%rcx, -424(%rbp)
	movq	%rcx, (%rdi)
	movq	-464(%rbp), %rdi
	movq	%rdi, -568(%rbp)
	leaq	-560(%rbp), %rdi
	movq	%rdi, -400(%rbp)
	leaq	-568(%rbp), %rdi
	movq	%rdi, -408(%rbp)
	movq	__ZNSt3__112placeholders2_1E@GOTPCREL(%rip), %rdi
	movq	%rdi, -416(%rbp)
	movq	-400(%rbp), %rdi
	movq	%rdi, -392(%rbp)
	movq	-408(%rbp), %r9
	movq	%r9, -16(%rbp)
	movq	-416(%rbp), %r10
	movq	%r10, -24(%rbp)
	leaq	-544(%rbp), %r11
	movq	%r11, -360(%rbp)
	movq	%rdi, -368(%rbp)
	movq	%r9, -376(%rbp)
	movq	%r10, -384(%rbp)
	movq	-360(%rbp), %rdi
	movq	-368(%rbp), %r9
	movq	-376(%rbp), %r11
	movq	%rdi, -328(%rbp)
	movq	%r9, -336(%rbp)
	movq	%r11, -344(%rbp)
	movq	%r10, -352(%rbp)
	movq	-328(%rbp), %rdi
	movq	-336(%rbp), %r9
	movq	%r9, -320(%rbp)
	movq	(%r9), %r10
	movq	8(%r9), %r9
	movq	%r9, 8(%rdi)
	movq	%r10, (%rdi)
	addq	$16, %rdi
	movq	-344(%rbp), %r9
	movq	%r9, -32(%rbp)
	movq	-32(%rbp), %r9
	movq	-352(%rbp), %r10
	movq	%r10, -40(%rbp)
	movq	-40(%rbp), %r10
	movq	%rdi, -296(%rbp)
	movq	%r9, -304(%rbp)
	movq	%r10, -312(%rbp)
	movq	-296(%rbp), %rdi
	movq	-304(%rbp), %r9
	movq	-312(%rbp), %r10
	movq	%rdi, -240(%rbp)
	movq	%r9, -248(%rbp)
	movq	%r10, -256(%rbp)
	movq	-240(%rbp), %rdi
	movq	-248(%rbp), %r9
	movq	%r9, -232(%rbp)
	movq	-232(%rbp), %r9
	movq	-256(%rbp), %r10
	movq	%r10, -48(%rbp)
	movq	-48(%rbp), %r10
	movq	%rdi, -208(%rbp)
	movq	%r9, -216(%rbp)
	movq	%r10, -224(%rbp)
	movq	-208(%rbp), %rdi
	movq	-216(%rbp), %r9
	movq	-224(%rbp), %r10
	movq	%rdi, -152(%rbp)
	movq	%r9, -160(%rbp)
	movq	%r10, -168(%rbp)
	movq	-152(%rbp), %rdi
	movq	%rdi, %r9
	movq	-160(%rbp), %r10
	movq	%r10, -112(%rbp)
	movq	-112(%rbp), %r10
	movq	%r9, -64(%rbp)
	movq	%r10, -72(%rbp)
	movq	-64(%rbp), %r9
	movq	-72(%rbp), %r10
	movq	%r10, -56(%rbp)
	movq	-56(%rbp), %r10
	movq	(%r10), %r10
	movq	%r10, (%r9)
	movq	-168(%rbp), %r9
	movq	%r9, -80(%rbp)
	movq	-80(%rbp), %r9
	movq	%rdi, -96(%rbp)
	movq	%r9, -104(%rbp)
	movq	-104(%rbp), %rdi
	movq	%rdi, -88(%rbp)
	movq	%rdx, %rdi
	movq	(%r8), %rdx
	movq	%rdx, (%rsp)
	movq	8(%r8), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%r8), %rdx
	movq	%rdx, 16(%rsp)
	movq	%rax, -600(%rbp)        ## 8-byte Spill
	movq	%rcx, -608(%rbp)        ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EEFbRKS8_EJNS4_17reference_wrapperISD_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_
	leaq	-592(%rbp), %rcx
	movq	-608(%rbp), %rdx        ## 8-byte Reload
	addq	$32, %rdx
	movq	-608(%rbp), %rsi        ## 8-byte Reload
	movq	-600(%rbp), %rdi        ## 8-byte Reload
	movq	(%rdi), %r8
	movq	%r8, -592(%rbp)
	movq	8(%rdi), %r8
	movq	%r8, -584(%rbp)
	movq	16(%rdi), %r8
	movq	%r8, -576(%rbp)
	movq	-488(%rbp), %r8
	movq	-496(%rbp), %r9
	movsd	-504(%rbp), %xmm0
	movq	-512(%rbp), %r10
	movsd	-520(%rbp), %xmm1
	movq	-608(%rbp), %r11        ## 8-byte Reload
	addq	$152, %r11
	movq	-608(%rbp), %rbx        ## 8-byte Reload
	addq	$176, %rbx
	movq	%rdx, %rdi
	movq	(%rcx), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rcx), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rcx), %rcx
	movq	%rcx, 16(%rsp)
	movq	%r8, %rdx
	movq	%r9, %rcx
	movq	%r10, %r8
	movq	%r11, %r9
	movq	%rbx, 24(%rsp)
	movb	%al, -609(%rbp)         ## 1-byte Spill
	callq	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE7do_stepINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_dSF_SF_NS1_13state_wrapperISF_vEEEEvRS4_T_RKT0_RKT1_T2_RT3_S16_RT4_PT5_
	addq	$648, %rsp              ## imm = 0x288
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EEFbRKS8_EJNS4_17reference_wrapperISD_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EEFbRKS8_EJNS4_17reference_wrapperISD_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_
	.align	4, 0x90
__ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EEFbRKS8_EJNS4_17reference_wrapperISD_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_: ## @_ZN5boost7numeric6odeint17initially_resizer11adjust_sizeINSt3__16vectorIdNS4_9allocatorIdEEEENS4_6__bindIMNS1_19explicit_generic_rkILm4ELm4ES8_dS8_dNS1_13range_algebraENS1_18default_operationsES2_EEFbRKS8_EJNS4_17reference_wrapperISD_EERNS4_12placeholders4__phILi1EEEEEEEEbRKT_T0_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1174:
	.cfi_def_cfa_offset 16
Ltmp1175:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1176:
	.cfi_def_cfa_register %rbp
	subq	$480, %rsp              ## imm = 0x1E0
	leaq	16(%rbp), %rax
	movq	%rdi, -432(%rbp)
	movq	%rsi, -440(%rbp)
	movq	-432(%rbp), %rsi
	testb	$1, (%rsi)
	movq	%rax, -448(%rbp)        ## 8-byte Spill
	movq	%rsi, -456(%rbp)        ## 8-byte Spill
	jne	LBB264_5
## BB#1:
	movq	-456(%rbp), %rax        ## 8-byte Reload
	movb	$1, (%rax)
	movq	-440(%rbp), %rcx
	movq	-448(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -392(%rbp)
	movq	%rcx, -400(%rbp)
	movq	-392(%rbp), %rsi
	movq	%rsi, %rdi
	addq	$16, %rdi
	movq	%rcx, -384(%rbp)
	leaq	-416(%rbp), %r8
	movq	%r8, -184(%rbp)
	movq	%rcx, -192(%rbp)
	movq	-184(%rbp), %r9
	movq	%r9, -136(%rbp)
	movq	%rcx, -144(%rbp)
	movq	-136(%rbp), %r9
	movq	%r9, -120(%rbp)
	movq	%rcx, -128(%rbp)
	movq	-120(%rbp), %r9
	movq	%r9, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movq	-72(%rbp), %r9
	movq	%rcx, -32(%rbp)
	movq	%r9, -16(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-16(%rbp), %r9
	movq	%rcx, -8(%rbp)
	movq	%rcx, (%r9)
	movq	%rsi, -352(%rbp)
	movq	%rdi, -360(%rbp)
	movq	%r8, -368(%rbp)
	movq	-352(%rbp), %rcx
	movq	-360(%rbp), %rsi
	movq	%rsi, -336(%rbp)
	movq	%rsi, -328(%rbp)
	movq	(%rsi), %rsi
	movq	%rsi, -376(%rbp)
	movq	-368(%rbp), %rdi
	movq	%rsi, -272(%rbp)
	movq	%rdi, -280(%rbp)
	leaq	-272(%rbp), %rsi
	movq	%rsi, -264(%rbp)
	movq	-272(%rbp), %rsi
	movq	-360(%rbp), %rdi
	movq	%rdi, -208(%rbp)
	movq	%rdi, -200(%rbp)
	movq	-368(%rbp), %r8
	movq	%rdi, -240(%rbp)
	movq	%r8, -248(%rbp)
	movq	$0, -256(%rbp)
	movq	-248(%rbp), %rdi
	movq	%rdi, -232(%rbp)
	movq	%rdi, -224(%rbp)
	movq	(%rdi), %rdi
	movq	%rdi, -216(%rbp)
	movq	%rcx, -304(%rbp)
	movq	%rsi, -312(%rbp)
	movq	%rdi, -320(%rbp)
	movq	-304(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	8(%rcx), %rcx
	movq	-312(%rbp), %rdi
	movq	%rdi, -296(%rbp)
	movq	-296(%rbp), %rdi
	addq	%rcx, %rdi
	movq	%rsi, %rcx
	andq	$1, %rcx
	cmpq	$0, %rcx
	movq	%rsi, -464(%rbp)        ## 8-byte Spill
	movq	%rdi, -472(%rbp)        ## 8-byte Spill
	je	LBB264_3
## BB#2:
	movq	-472(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-464(%rbp), %rdx        ## 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -480(%rbp)        ## 8-byte Spill
	jmp	LBB264_4
LBB264_3:
	movq	-464(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -480(%rbp)        ## 8-byte Spill
LBB264_4:                               ## %_ZNSt3__16__bindIMN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENS_6vectorIdNS_9allocatorIdEEEEdS8_dNS3_13range_algebraENS3_18default_operationsENS3_17initially_resizerEEEFbRKS8_EJNS_17reference_wrapperISC_EERNS_12placeholders4__phILi1EEEEEclIJSE_EEENS_13__bind_returnISG_NS_5tupleIJSI_SL_EEENSQ_IJDpOT_EEEXsr21_is_valid_bind_returnISG_SR_SV_EE5valueEE4typeESU_.exit
	movq	-480(%rbp), %rax        ## 8-byte Reload
	movq	-320(%rbp), %rcx
	movq	%rcx, -288(%rbp)
	movq	-288(%rbp), %rsi
	movq	-472(%rbp), %rdi        ## 8-byte Reload
	callq	*%rax
	andb	$1, %al
	movb	%al, -417(%rbp)
	jmp	LBB264_6
LBB264_5:
	movb	$0, -417(%rbp)
LBB264_6:
	movb	-417(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$480, %rsp              ## imm = 0x1E0
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE11resize_implIS7_EEbRKT_
	.weak_definition	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE11resize_implIS7_EEbRKT_
	.align	4, 0x90
__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE11resize_implIS7_EEbRKT_: ## @_ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEE11resize_implIS7_EEbRKT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1177:
	.cfi_def_cfa_offset 16
Ltmp1178:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1179:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movb	$0, -17(%rbp)
	movq	%rsi, %rdi
	addq	$152, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -48(%rbp)         ## 8-byte Spill
	movq	%rax, %rsi
	callq	__ZN5boost7numeric6odeint28adjust_size_by_resizeabilityINS1_13state_wrapperINSt3__16vectorIdNS4_9allocatorIdEEEEvEES8_EEbRT_RKT0_NS_17integral_constantIbLb1EEE
	andb	$1, %al
	movzbl	%al, %ecx
	movb	-17(%rbp), %al
	andb	$1, %al
	movzbl	%al, %edx
	orl	%ecx, %edx
	cmpl	$0, %edx
	setne	%al
	andb	$1, %al
	movb	%al, -17(%rbp)
	movq	$0, -32(%rbp)
LBB265_1:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$3, -32(%rbp)
	jae	LBB265_4
## BB#2:                                ##   in Loop: Header=BB265_1 Depth=1
	movq	-32(%rbp), %rax
	movq	-48(%rbp), %rcx         ## 8-byte Reload
	addq	$176, %rcx
	imulq	 $24, %rax
	addq	%rax, %rcx
	movq	-16(%rbp), %rsi
	movq	%rcx, %rdi
	callq	__ZN5boost7numeric6odeint28adjust_size_by_resizeabilityINS1_13state_wrapperINSt3__16vectorIdNS4_9allocatorIdEEEEvEES8_EEbRT_RKT0_NS_17integral_constantIbLb1EEE
	andb	$1, %al
	movzbl	%al, %edx
	movb	-17(%rbp), %al
	andb	$1, %al
	movzbl	%al, %r8d
	orl	%edx, %r8d
	cmpl	$0, %r8d
	setne	%al
	andb	$1, %al
	movb	%al, -17(%rbp)
## BB#3:                                ##   in Loop: Header=BB265_1 Depth=1
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	LBB265_1
LBB265_4:
	movb	-17(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE7do_stepINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_dSF_SF_NS1_13state_wrapperISF_vEEEEvRS4_T_RKT0_RKT1_T2_RT3_S16_RT4_PT5_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE7do_stepINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_dSF_SF_NS1_13state_wrapperISF_vEEEEvRS4_T_RKT0_RKT1_T2_RT3_S16_RT4_PT5_
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE7do_stepINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_dSF_SF_NS1_13state_wrapperISF_vEEEEvRS4_T_RKT0_RKT1_T2_RT3_S16_RT4_PT5_: ## @_ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE7do_stepINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_dSF_SF_NS1_13state_wrapperISF_vEEEEvRS4_T_RKT0_RKT1_T2_RT3_S16_RT4_PT5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1180:
	.cfi_def_cfa_offset 16
Ltmp1181:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1182:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	40(%rbp), %rax
	leaq	16(%rbp), %r10
	leaq	-152(%rbp), %r11
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movsd	%xmm0, -40(%rbp)
	movq	%r8, -48(%rbp)
	movsd	%xmm1, -56(%rbp)
	movq	%r9, -64(%rbp)
	movq	%rax, -72(%rbp)
	movq	-8(%rbp), %rdi
	movq	%r10, -80(%rbp)
	movq	-16(%rbp), %rsi
	movq	-80(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	-32(%rbp), %r8
	movq	-48(%rbp), %r9
	movq	-64(%rbp), %rax
	movq	-72(%rbp), %r10
	movsd	-40(%rbp), %xmm0
	movsd	-56(%rbp), %xmm1
	movq	%rdi, -160(%rbp)        ## 8-byte Spill
	movq	%r11, %rdi
	movq	%rax, (%rsp)
	movq	%r10, 8(%rsp)
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC1ERS4_RSV_SH_SH_SI_SI_PSX_dd
	leaq	-152(%rbp), %rsi
	movq	-160(%rbp), %rdi        ## 8-byte Reload
	callq	__ZN5boost6fusion8for_eachINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorENS8_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSB_6vectorIdNSB_9allocatorIdEEEERSI_dEJNSB_17reference_wrapperISE_EERNSB_12placeholders4__phILi1EEERNSR_ILi2EEERNSR_ILi3EEEEEESI_SI_SI_NS3_13state_wrapperISI_vEESI_dEEEENS_9enable_ifINS0_6traits11is_sequenceIT_EEvE4typeERKS15_RKT0_
	addq	$176, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion8for_eachINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorENS8_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSB_6vectorIdNSB_9allocatorIdEEEERSI_dEJNSB_17reference_wrapperISE_EERNSB_12placeholders4__phILi1EEERNSR_ILi2EEERNSR_ILi3EEEEEESI_SI_SI_NS3_13state_wrapperISI_vEESI_dEEEENS_9enable_ifINS0_6traits11is_sequenceIT_EEvE4typeERKS15_RKT0_
	.weak_def_can_be_hidden	__ZN5boost6fusion8for_eachINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorENS8_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSB_6vectorIdNSB_9allocatorIdEEEERSI_dEJNSB_17reference_wrapperISE_EERNSB_12placeholders4__phILi1EEERNSR_ILi2EEERNSR_ILi3EEEEEESI_SI_SI_NS3_13state_wrapperISI_vEESI_dEEEENS_9enable_ifINS0_6traits11is_sequenceIT_EEvE4typeERKS15_RKT0_
	.align	4, 0x90
__ZN5boost6fusion8for_eachINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorENS8_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSB_6vectorIdNSB_9allocatorIdEEEERSI_dEJNSB_17reference_wrapperISE_EERNSB_12placeholders4__phILi1EEERNSR_ILi2EEERNSR_ILi3EEEEEESI_SI_SI_NS3_13state_wrapperISI_vEESI_dEEEENS_9enable_ifINS0_6traits11is_sequenceIT_EEvE4typeERKS15_RKT0_: ## @_ZN5boost6fusion8for_eachINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorENS8_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSB_6vectorIdNSB_9allocatorIdEEEERSI_dEJNSB_17reference_wrapperISE_EERNSB_12placeholders4__phILi1EEERNSR_ILi2EEERNSR_ILi3EEEEEESI_SI_SI_NS3_13state_wrapperISI_vEESI_dEEEENS_9enable_ifINS0_6traits11is_sequenceIT_EEvE4typeERKS15_RKT0_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1183:
	.cfi_def_cfa_offset 16
Ltmp1184:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1185:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost6fusion6detail8for_eachIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_N4mpl_5bool_ILb0EEE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC1ERS4_RSV_SH_SH_SI_SI_PSX_dd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC1ERS4_RSV_SH_SH_SI_SI_PSX_dd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC1ERS4_RSV_SH_SH_SI_SI_PSX_dd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC1ERS4_RSV_SH_SH_SI_SI_PSX_dd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1186:
	.cfi_def_cfa_offset 16
Ltmp1187:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1188:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	24(%rbp), %rax
	movq	16(%rbp), %r10
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	%r10, -56(%rbp)
	movq	%rax, -64(%rbp)
	movsd	%xmm0, -72(%rbp)
	movsd	%xmm1, -80(%rbp)
	movq	-8(%rbp), %rdi
	movq	-64(%rbp), %rax
	movsd	-72(%rbp), %xmm0
	movsd	-80(%rbp), %xmm1
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %r8
	movq	-48(%rbp), %r9
	movq	-56(%rbp), %r10
	movq	%r10, (%rsp)
	movq	%rax, 8(%rsp)
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC2ERS4_RSV_SH_SH_SI_SI_PSX_dd
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC2ERS4_RSV_SH_SH_SI_SI_PSX_dd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC2ERS4_RSV_SH_SH_SI_SI_PSX_dd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC2ERS4_RSV_SH_SH_SI_SI_PSX_dd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEC2ERS4_RSV_SH_SH_SI_SI_PSX_dd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1189:
	.cfi_def_cfa_offset 16
Ltmp1190:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1191:
	.cfi_def_cfa_register %rbp
	movq	24(%rbp), %rax
	movq	16(%rbp), %r10
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	%r10, -56(%rbp)
	movq	%rax, -64(%rbp)
	movsd	%xmm0, -72(%rbp)
	movsd	%xmm1, -80(%rbp)
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-24(%rbp), %rcx
	movq	%rcx, 8(%rax)
	movq	-32(%rbp), %rcx
	movq	%rcx, 16(%rax)
	movq	-56(%rbp), %rcx
	movq	%rcx, 24(%rax)
	movq	-48(%rbp), %rcx
	movq	%rcx, 32(%rax)
	movq	-40(%rbp), %rcx
	movq	%rcx, 40(%rax)
	movq	-64(%rbp), %rcx
	movq	%rcx, 48(%rax)
	movsd	-72(%rbp), %xmm0
	movsd	%xmm0, 56(%rax)
	movsd	-80(%rbp), %xmm0
	movsd	%xmm0, 64(%rax)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion6detail8for_eachIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_N4mpl_5bool_ILb0EEE
	.weak_def_can_be_hidden	__ZN5boost6fusion6detail8for_eachIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_N4mpl_5bool_ILb0EEE
	.align	4, 0x90
__ZN5boost6fusion6detail8for_eachIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_N4mpl_5bool_ILb0EEE: ## @_ZN5boost6fusion6detail8for_eachIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_N4mpl_5bool_ILb0EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1192:
	.cfi_def_cfa_offset 16
Ltmp1193:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1194:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	__ZN5boost6fusion6detail17for_each_dispatchIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_NS0_27random_access_traversal_tagE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion6detail17for_each_dispatchIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_NS0_27random_access_traversal_tagE
	.weak_def_can_be_hidden	__ZN5boost6fusion6detail17for_each_dispatchIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_NS0_27random_access_traversal_tagE
	.align	4, 0x90
__ZN5boost6fusion6detail17for_each_dispatchIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_NS0_27random_access_traversal_tagE: ## @_ZN5boost6fusion6detail17for_each_dispatchIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorENS9_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSD_6vectorIdNSD_9allocatorIdEEEERSK_dEJNSD_17reference_wrapperISG_EERNSD_12placeholders4__phILi1EEERNST_ILi2EEERNST_ILi3EEEEEESK_SK_SK_NS4_13state_wrapperISK_vEESK_dEEEEvRT_RKT0_NS0_27random_access_traversal_tagE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1195:
	.cfi_def_cfa_offset 16
Ltmp1196:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1197:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost6fusion5beginINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEEKNS_14lazy_enable_ifINS0_6traits11is_sequenceIT_EENS0_9result_of5beginIKSD_EEE4typeERSH_
	leaq	-32(%rbp), %rdi
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rsi
	callq	__ZN5boost6fusion6detail17for_each_unrolledILi4EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi0EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion6detail17for_each_unrolledILi4EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi0EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_
	.weak_def_can_be_hidden	__ZN5boost6fusion6detail17for_each_unrolledILi4EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi0EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_
	.align	4, 0x90
__ZN5boost6fusion6detail17for_each_unrolledILi4EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi0EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_: ## @_ZN5boost6fusion6detail17for_each_unrolledILi4EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi0EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1198:
	.cfi_def_cfa_offset 16
Ltmp1199:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1200:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movq	%rdi, -56(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	callq	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	movq	-56(%rbp), %rdi         ## 8-byte Reload
	movq	%rax, %rsi
	callq	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm1EEEvRKNS2_5stageIT_XT0_EEE
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	leaq	-24(%rbp), %rsi
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -64(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	callq	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	movq	-64(%rbp), %rdi         ## 8-byte Reload
	movq	%rax, %rsi
	callq	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm2EEEvRKNS2_5stageIT_XT0_EEE
	leaq	-24(%rbp), %rdi
	callq	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	leaq	-32(%rbp), %rsi
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -72(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	callq	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	movq	-72(%rbp), %rdi         ## 8-byte Reload
	movq	%rax, %rsi
	callq	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm3EEEvRKNS2_5stageIT_XT0_EEE
	leaq	-32(%rbp), %rdi
	callq	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	leaq	-40(%rbp), %rsi
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -80(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	callq	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	movq	-80(%rbp), %rdi         ## 8-byte Reload
	movq	%rax, %rsi
	callq	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm4EEEvRKNS2_5stageIT_XT0_EEE
	leaq	-40(%rbp), %rdi
	callq	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	leaq	-48(%rbp), %rdi
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rsi
	callq	__ZN5boost6fusion6detail17for_each_unrolledILi0EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi4EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion5beginINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEEKNS_14lazy_enable_ifINS0_6traits11is_sequenceIT_EENS0_9result_of5beginIKSD_EEE4typeERSH_
	.weak_def_can_be_hidden	__ZN5boost6fusion5beginINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEEKNS_14lazy_enable_ifINS0_6traits11is_sequenceIT_EENS0_9result_of5beginIKSD_EEE4typeERSH_
	.align	4, 0x90
__ZN5boost6fusion5beginINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEEKNS_14lazy_enable_ifINS0_6traits11is_sequenceIT_EENS0_9result_of5beginIKSD_EEE4typeERSH_: ## @_ZN5boost6fusion5beginINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEEKNS_14lazy_enable_ifINS0_6traits11is_sequenceIT_EENS0_9result_of5beginIKSD_EEE4typeERSH_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1201:
	.cfi_def_cfa_offset 16
Ltmp1202:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1203:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost6fusion9extension10begin_implINS0_10vector_tagEE5applyIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEE4callERSE_
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension10begin_implINS0_10vector_tagEE5applyIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEE4callERSE_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension10begin_implINS0_10vector_tagEE5applyIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEE4callERSE_
	.align	4, 0x90
__ZN5boost6fusion9extension10begin_implINS0_10vector_tagEE5applyIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEE4callERSE_: ## @_ZN5boost6fusion9extension10begin_implINS0_10vector_tagEE5applyIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEE4callERSE_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1204:
	.cfi_def_cfa_offset 16
Ltmp1205:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1206:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rsi
	movq	%rax, %rdi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC1ERSA_
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC1ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC1ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC1ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC1ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1207:
	.cfi_def_cfa_offset 16
Ltmp1208:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1209:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC2ERSA_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC2ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC2ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC2ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi0EEC2ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1210:
	.cfi_def_cfa_offset 16
Ltmp1211:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1212:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm1EEEvRKNS2_5stageIT_XT0_EEE
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm1EEEvRKNS2_5stageIT_XT0_EEE
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm1EEEvRKNS2_5stageIT_XT0_EEE: ## @_ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm1EEEvRKNS2_5stageIT_XT0_EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1213:
	.cfi_def_cfa_offset 16
Ltmp1214:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1215:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	leaq	-40(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	24(%rsi), %rdx
	movq	16(%rsi), %rcx
	movq	40(%rsi), %r8
	movq	48(%rsi), %r9
	movq	-16(%rbp), %r10
	addq	$8, %r10
	movsd	64(%rsi), %xmm0
	movq	%rdi, -48(%rbp)         ## 8-byte Spill
	movq	%rax, %rdi
	movq	%r10, %rsi
	movq	%rcx, -56(%rbp)         ## 8-byte Spill
	movq	%r8, -64(%rbp)          ## 8-byte Spill
	movq	%r9, -72(%rbp)          ## 8-byte Spill
	movq	%rdx, -80(%rbp)         ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm1EEEd
	leaq	-24(%rbp), %rdi
	movsd	-40(%rbp), %xmm0
	movsd	-32(%rbp), %xmm1
	movq	-48(%rbp), %rsi         ## 8-byte Reload
	movq	-80(%rbp), %rdx         ## 8-byte Reload
	movq	-56(%rbp), %rcx         ## 8-byte Reload
	movq	-64(%rbp), %r8          ## 8-byte Reload
	movq	-72(%rbp), %r9          ## 8-byte Reload
	callq	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm1ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.weak_def_can_be_hidden	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.align	4, 0x90
__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE: ## @_ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1216:
	.cfi_def_cfa_offset 16
Ltmp1217:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1218:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEE4castEv
	movq	%rax, %rdi
	callq	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.align	4, 0x90
__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEEKNS0_9result_of4nextIT_E4typeERKSF_: ## @_ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1219:
	.cfi_def_cfa_offset 16
Ltmp1220:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1221:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm2EEEvRKNS2_5stageIT_XT0_EEE
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm2EEEvRKNS2_5stageIT_XT0_EEE
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm2EEEvRKNS2_5stageIT_XT0_EEE: ## @_ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm2EEEvRKNS2_5stageIT_XT0_EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1222:
	.cfi_def_cfa_offset 16
Ltmp1223:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1224:
	.cfi_def_cfa_register %rbp
	subq	$928, %rsp              ## imm = 0x3A0
	movq	%rdi, -784(%rbp)
	movq	%rsi, -792(%rbp)
	movq	-784(%rbp), %rdi
	movq	8(%rdi), %rax
	movq	24(%rdi), %rcx
	movq	48(%rdi), %rdx
	movsd	56(%rdi), %xmm0
	movsd	(%rsi), %xmm1
	movsd	64(%rdi), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -800(%rbp)
	movq	%rax, -720(%rbp)
	movq	%rcx, -728(%rbp)
	movq	%rdx, -736(%rbp)
	leaq	-800(%rbp), %rax
	movq	%rax, -744(%rbp)
	movq	-720(%rbp), %rax
	movq	%rax, %rcx
	addq	$16, %rcx
	movq	-728(%rbp), %rdx
	movq	%rdx, -712(%rbp)
	movq	-736(%rbp), %rsi
	movq	%rsi, -360(%rbp)
	movq	-744(%rbp), %r8
	movq	%r8, -8(%rbp)
	leaq	-776(%rbp), %r9
	movq	%r9, -328(%rbp)
	movq	%rdx, -336(%rbp)
	movq	%rsi, -344(%rbp)
	movq	%r8, -352(%rbp)
	movq	-328(%rbp), %rdx
	movq	-336(%rbp), %rsi
	movq	-344(%rbp), %r10
	movq	%rdx, -264(%rbp)
	movq	%rsi, -272(%rbp)
	movq	%r10, -280(%rbp)
	movq	%r8, -288(%rbp)
	movq	-264(%rbp), %rdx
	movq	-272(%rbp), %rsi
	movq	%rsi, -256(%rbp)
	movq	-280(%rbp), %r8
	movq	%r8, -16(%rbp)
	movq	-288(%rbp), %r10
	movq	%r10, -24(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rsi, -232(%rbp)
	movq	%r8, -240(%rbp)
	movq	%r10, -248(%rbp)
	movq	-224(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %r8
	movq	%rdx, -160(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%r8, -176(%rbp)
	movq	%r10, -184(%rbp)
	movq	-160(%rbp), %rdx
	movq	-168(%rbp), %rsi
	movq	%rsi, -120(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %r8
	movq	%rsi, -32(%rbp)
	movq	%rsi, (%r8)
	movq	%rdx, %rsi
	addq	$8, %rsi
	movq	-176(%rbp), %r8
	movq	%r8, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%r8, -80(%rbp)
	movq	-72(%rbp), %rsi
	movq	%r8, -64(%rbp)
	movq	%r8, (%rsi)
	addq	$16, %rdx
	movq	-184(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	-104(%rbp), %rdx
	movq	%rsi, -96(%rbp)
	movq	%rsi, (%rdx)
	movq	%rax, -680(%rbp)
	movq	%rcx, -688(%rbp)
	movq	%r9, -696(%rbp)
	movq	-680(%rbp), %rax
	movq	-688(%rbp), %rcx
	movq	%rcx, -664(%rbp)
	movq	%rcx, -656(%rbp)
	movq	(%rcx), %rcx
	movq	%rcx, -704(%rbp)
	movq	-696(%rbp), %rdx
	movq	%rcx, -568(%rbp)
	movq	%rdx, -576(%rbp)
	leaq	-568(%rbp), %rcx
	movq	%rcx, -560(%rbp)
	movq	-568(%rbp), %rcx
	movq	-688(%rbp), %rdx
	movq	%rdx, -376(%rbp)
	movq	%rdx, -368(%rbp)
	movq	-696(%rbp), %rsi
	movq	%rdx, -408(%rbp)
	movq	%rsi, -416(%rbp)
	movq	$0, -424(%rbp)
	movq	-416(%rbp), %rdx
	movq	%rdx, -400(%rbp)
	movq	%rdx, -392(%rbp)
	movq	(%rdx), %rdx
	movq	%rdx, -384(%rbp)
	movq	-688(%rbp), %rsi
	movq	%rsi, -440(%rbp)
	movq	%rsi, -432(%rbp)
	movq	-696(%rbp), %r8
	movq	%rsi, -472(%rbp)
	movq	%r8, -480(%rbp)
	movq	$1, -488(%rbp)
	movq	-480(%rbp), %rsi
	movq	%rsi, -464(%rbp)
	movq	%rsi, %r8
	addq	$8, %r8
	movq	%r8, -456(%rbp)
	movq	8(%rsi), %rsi
	movq	%rsi, -448(%rbp)
	movq	-688(%rbp), %r8
	movq	%r8, -504(%rbp)
	movq	%r8, -496(%rbp)
	movq	-696(%rbp), %r9
	movq	%r8, -536(%rbp)
	movq	%r9, -544(%rbp)
	movq	$2, -552(%rbp)
	movq	-544(%rbp), %r8
	movq	%r8, -528(%rbp)
	movq	%r8, %r9
	addq	$16, %r9
	movq	%r9, -520(%rbp)
	movq	16(%r8), %r8
	movq	%r8, -512(%rbp)
	movq	%rax, -616(%rbp)
	movq	%rcx, -624(%rbp)
	movq	%rdx, -632(%rbp)
	movq	%rsi, -640(%rbp)
	movq	%r8, -648(%rbp)
	movq	-616(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	-624(%rbp), %rdx
	movq	%rdx, -608(%rbp)
	movq	-608(%rbp), %rdx
	addq	%rax, %rdx
	movq	%rcx, %rax
	andq	$1, %rax
	cmpq	$0, %rax
	movq	%rdi, -840(%rbp)        ## 8-byte Spill
	movq	%rcx, -848(%rbp)        ## 8-byte Spill
	movq	%rdx, -856(%rbp)        ## 8-byte Spill
	je	LBB280_2
## BB#1:
	movq	-856(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-848(%rbp), %rdx        ## 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -864(%rbp)        ## 8-byte Spill
	jmp	LBB280_3
LBB280_2:
	movq	-848(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -864(%rbp)        ## 8-byte Spill
LBB280_3:                               ## %_ZNSt3__16__bindIMN3fid10FidFactoryEFvRKNS_6vectorIdNS_9allocatorIdEEEERS6_dEJNS_17reference_wrapperIS2_EERNS_12placeholders4__phILi1EEERNSF_ILi2EEERNSF_ILi3EEEEEclIJS9_S9_dEEENS_13__bind_returnISB_NS_5tupleIJSD_SG_SI_SK_EEENSP_IJDpOT_EEEXsr21_is_valid_bind_returnISB_SQ_SU_EE5valueEE4typeEST_.exit
	movq	-864(%rbp), %rax        ## 8-byte Reload
	movq	-632(%rbp), %rcx
	movq	%rcx, -600(%rbp)
	movq	-600(%rbp), %rsi
	movq	-640(%rbp), %rcx
	movq	%rcx, -584(%rbp)
	movq	-584(%rbp), %rdx
	movq	-648(%rbp), %rcx
	movq	%rcx, -592(%rbp)
	movq	-592(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-856(%rbp), %rdi        ## 8-byte Reload
	callq	*%rax
	leaq	-832(%rbp), %rdi
	movq	-840(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rsi
	movq	24(%rax), %rdx
	movq	16(%rax), %rcx
	movq	40(%rax), %r8
	movq	48(%rax), %r9
	movq	-792(%rbp), %r10
	addq	$8, %r10
	movsd	64(%rax), %xmm0
	movq	%rsi, -872(%rbp)        ## 8-byte Spill
	movq	%r10, %rsi
	movq	%r8, -880(%rbp)         ## 8-byte Spill
	movq	%r9, -888(%rbp)         ## 8-byte Spill
	movq	%rdx, -896(%rbp)        ## 8-byte Spill
	movq	%rcx, -904(%rbp)        ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm2EEEd
	leaq	-808(%rbp), %rdi
	leaq	-832(%rbp), %rax
	movq	-872(%rbp), %rsi        ## 8-byte Reload
	movq	-896(%rbp), %rdx        ## 8-byte Reload
	movq	-904(%rbp), %rcx        ## 8-byte Reload
	movq	-880(%rbp), %r8         ## 8-byte Reload
	movq	-888(%rbp), %r9         ## 8-byte Reload
	movq	(%rax), %r10
	movq	%r10, (%rsp)
	movq	8(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	16(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm2ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	addq	$928, %rsp              ## imm = 0x3A0
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.weak_def_can_be_hidden	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.align	4, 0x90
__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE: ## @_ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1225:
	.cfi_def_cfa_offset 16
Ltmp1226:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1227:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEE4castEv
	movq	%rax, %rdi
	callq	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.align	4, 0x90
__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEEKNS0_9result_of4nextIT_E4typeERKSF_: ## @_ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1228:
	.cfi_def_cfa_offset 16
Ltmp1229:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1230:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm3EEEvRKNS2_5stageIT_XT0_EEE
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm3EEEvRKNS2_5stageIT_XT0_EEE
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm3EEEvRKNS2_5stageIT_XT0_EEE: ## @_ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm3EEEvRKNS2_5stageIT_XT0_EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1231:
	.cfi_def_cfa_offset 16
Ltmp1232:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1233:
	.cfi_def_cfa_register %rbp
	subq	$944, %rsp              ## imm = 0x3B0
	movq	%rdi, -784(%rbp)
	movq	%rsi, -792(%rbp)
	movq	-784(%rbp), %rdi
	movq	8(%rdi), %rax
	movq	24(%rdi), %rcx
	movq	48(%rdi), %rdx
	addq	$24, %rdx
	movsd	56(%rdi), %xmm0
	movsd	(%rsi), %xmm1
	movsd	64(%rdi), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -800(%rbp)
	movq	%rax, -720(%rbp)
	movq	%rcx, -728(%rbp)
	movq	%rdx, -736(%rbp)
	leaq	-800(%rbp), %rax
	movq	%rax, -744(%rbp)
	movq	-720(%rbp), %rax
	movq	%rax, %rcx
	addq	$16, %rcx
	movq	-728(%rbp), %rdx
	movq	%rdx, -712(%rbp)
	movq	-736(%rbp), %rsi
	movq	%rsi, -360(%rbp)
	movq	-744(%rbp), %r8
	movq	%r8, -8(%rbp)
	leaq	-776(%rbp), %r9
	movq	%r9, -328(%rbp)
	movq	%rdx, -336(%rbp)
	movq	%rsi, -344(%rbp)
	movq	%r8, -352(%rbp)
	movq	-328(%rbp), %rdx
	movq	-336(%rbp), %rsi
	movq	-344(%rbp), %r10
	movq	%rdx, -264(%rbp)
	movq	%rsi, -272(%rbp)
	movq	%r10, -280(%rbp)
	movq	%r8, -288(%rbp)
	movq	-264(%rbp), %rdx
	movq	-272(%rbp), %rsi
	movq	%rsi, -256(%rbp)
	movq	-280(%rbp), %r8
	movq	%r8, -16(%rbp)
	movq	-288(%rbp), %r10
	movq	%r10, -24(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rsi, -232(%rbp)
	movq	%r8, -240(%rbp)
	movq	%r10, -248(%rbp)
	movq	-224(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %r8
	movq	%rdx, -160(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%r8, -176(%rbp)
	movq	%r10, -184(%rbp)
	movq	-160(%rbp), %rdx
	movq	-168(%rbp), %rsi
	movq	%rsi, -120(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %r8
	movq	%rsi, -32(%rbp)
	movq	%rsi, (%r8)
	movq	%rdx, %rsi
	addq	$8, %rsi
	movq	-176(%rbp), %r8
	movq	%r8, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%r8, -80(%rbp)
	movq	-72(%rbp), %rsi
	movq	%r8, -64(%rbp)
	movq	%r8, (%rsi)
	addq	$16, %rdx
	movq	-184(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	-104(%rbp), %rdx
	movq	%rsi, -96(%rbp)
	movq	%rsi, (%rdx)
	movq	%rax, -680(%rbp)
	movq	%rcx, -688(%rbp)
	movq	%r9, -696(%rbp)
	movq	-680(%rbp), %rax
	movq	-688(%rbp), %rcx
	movq	%rcx, -664(%rbp)
	movq	%rcx, -656(%rbp)
	movq	(%rcx), %rcx
	movq	%rcx, -704(%rbp)
	movq	-696(%rbp), %rdx
	movq	%rcx, -568(%rbp)
	movq	%rdx, -576(%rbp)
	leaq	-568(%rbp), %rcx
	movq	%rcx, -560(%rbp)
	movq	-568(%rbp), %rcx
	movq	-688(%rbp), %rdx
	movq	%rdx, -376(%rbp)
	movq	%rdx, -368(%rbp)
	movq	-696(%rbp), %rsi
	movq	%rdx, -408(%rbp)
	movq	%rsi, -416(%rbp)
	movq	$0, -424(%rbp)
	movq	-416(%rbp), %rdx
	movq	%rdx, -400(%rbp)
	movq	%rdx, -392(%rbp)
	movq	(%rdx), %rdx
	movq	%rdx, -384(%rbp)
	movq	-688(%rbp), %rsi
	movq	%rsi, -440(%rbp)
	movq	%rsi, -432(%rbp)
	movq	-696(%rbp), %r8
	movq	%rsi, -472(%rbp)
	movq	%r8, -480(%rbp)
	movq	$1, -488(%rbp)
	movq	-480(%rbp), %rsi
	movq	%rsi, -464(%rbp)
	movq	%rsi, %r8
	addq	$8, %r8
	movq	%r8, -456(%rbp)
	movq	8(%rsi), %rsi
	movq	%rsi, -448(%rbp)
	movq	-688(%rbp), %r8
	movq	%r8, -504(%rbp)
	movq	%r8, -496(%rbp)
	movq	-696(%rbp), %r9
	movq	%r8, -536(%rbp)
	movq	%r9, -544(%rbp)
	movq	$2, -552(%rbp)
	movq	-544(%rbp), %r8
	movq	%r8, -528(%rbp)
	movq	%r8, %r9
	addq	$16, %r9
	movq	%r9, -520(%rbp)
	movq	16(%r8), %r8
	movq	%r8, -512(%rbp)
	movq	%rax, -616(%rbp)
	movq	%rcx, -624(%rbp)
	movq	%rdx, -632(%rbp)
	movq	%rsi, -640(%rbp)
	movq	%r8, -648(%rbp)
	movq	-616(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	-624(%rbp), %rdx
	movq	%rdx, -608(%rbp)
	movq	-608(%rbp), %rdx
	addq	%rax, %rdx
	movq	%rcx, %rax
	andq	$1, %rax
	cmpq	$0, %rax
	movq	%rdi, -848(%rbp)        ## 8-byte Spill
	movq	%rcx, -856(%rbp)        ## 8-byte Spill
	movq	%rdx, -864(%rbp)        ## 8-byte Spill
	je	LBB283_2
## BB#1:
	movq	-864(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-856(%rbp), %rdx        ## 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -872(%rbp)        ## 8-byte Spill
	jmp	LBB283_3
LBB283_2:
	movq	-856(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -872(%rbp)        ## 8-byte Spill
LBB283_3:                               ## %_ZNSt3__16__bindIMN3fid10FidFactoryEFvRKNS_6vectorIdNS_9allocatorIdEEEERS6_dEJNS_17reference_wrapperIS2_EERNS_12placeholders4__phILi1EEERNSF_ILi2EEERNSF_ILi3EEEEEclIJS9_S9_dEEENS_13__bind_returnISB_NS_5tupleIJSD_SG_SI_SK_EEENSP_IJDpOT_EEEXsr21_is_valid_bind_returnISB_SQ_SU_EE5valueEE4typeEST_.exit
	movq	-872(%rbp), %rax        ## 8-byte Reload
	movq	-632(%rbp), %rcx
	movq	%rcx, -600(%rbp)
	movq	-600(%rbp), %rsi
	movq	-640(%rbp), %rcx
	movq	%rcx, -584(%rbp)
	movq	-584(%rbp), %rdx
	movq	-648(%rbp), %rcx
	movq	%rcx, -592(%rbp)
	movq	-592(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-864(%rbp), %rdi        ## 8-byte Reload
	callq	*%rax
	leaq	-840(%rbp), %rdi
	movq	-848(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rsi
	movq	24(%rax), %rdx
	movq	16(%rax), %rcx
	movq	40(%rax), %r8
	movq	48(%rax), %r9
	movq	-792(%rbp), %r10
	addq	$8, %r10
	movsd	64(%rax), %xmm0
	movq	%rsi, -880(%rbp)        ## 8-byte Spill
	movq	%r10, %rsi
	movq	%r8, -888(%rbp)         ## 8-byte Spill
	movq	%r9, -896(%rbp)         ## 8-byte Spill
	movq	%rdx, -904(%rbp)        ## 8-byte Spill
	movq	%rcx, -912(%rbp)        ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm3EEEd
	leaq	-808(%rbp), %rdi
	leaq	-840(%rbp), %rax
	movq	-880(%rbp), %rsi        ## 8-byte Reload
	movq	-904(%rbp), %rdx        ## 8-byte Reload
	movq	-912(%rbp), %rcx        ## 8-byte Reload
	movq	-888(%rbp), %r8         ## 8-byte Reload
	movq	-896(%rbp), %r9         ## 8-byte Reload
	movq	(%rax), %r10
	movq	%r10, (%rsp)
	movq	8(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	16(%rax), %r10
	movq	%r10, 16(%rsp)
	movq	24(%rax), %rax
	movq	%rax, 24(%rsp)
	callq	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm3ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	addq	$944, %rsp              ## imm = 0x3B0
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.weak_def_can_be_hidden	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.align	4, 0x90
__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE: ## @_ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1234:
	.cfi_def_cfa_offset 16
Ltmp1235:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1236:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEE4castEv
	movq	%rax, %rdi
	callq	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.align	4, 0x90
__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEEKNS0_9result_of4nextIT_E4typeERKSF_: ## @_ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1237:
	.cfi_def_cfa_offset 16
Ltmp1238:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1239:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm4EEEvRKNS2_5stageIT_XT0_EEE
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm4EEEvRKNS2_5stageIT_XT0_EEE
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm4EEEvRKNS2_5stageIT_XT0_EEE: ## @_ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNS8_6vectorIdNS8_9allocatorIdEEEERSF_dEJNS8_17reference_wrapperISB_EERNS8_12placeholders4__phILi1EEERNSO_ILi2EEERNSO_ILi3EEEEEESF_SF_SF_NS1_13state_wrapperISF_vEESF_dEclIdLm4EEEvRKNS2_5stageIT_XT0_EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1240:
	.cfi_def_cfa_offset 16
Ltmp1241:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1242:
	.cfi_def_cfa_register %rbp
	subq	$976, %rsp              ## imm = 0x3D0
	movq	%rdi, -784(%rbp)
	movq	%rsi, -792(%rbp)
	movq	-784(%rbp), %rdi
	movq	8(%rdi), %rax
	movq	24(%rdi), %rcx
	movq	48(%rdi), %rdx
	addq	$48, %rdx
	movsd	56(%rdi), %xmm0
	movsd	(%rsi), %xmm1
	movsd	64(%rdi), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -800(%rbp)
	movq	%rax, -720(%rbp)
	movq	%rcx, -728(%rbp)
	movq	%rdx, -736(%rbp)
	leaq	-800(%rbp), %rax
	movq	%rax, -744(%rbp)
	movq	-720(%rbp), %rax
	movq	%rax, %rcx
	addq	$16, %rcx
	movq	-728(%rbp), %rdx
	movq	%rdx, -712(%rbp)
	movq	-736(%rbp), %rsi
	movq	%rsi, -360(%rbp)
	movq	-744(%rbp), %r8
	movq	%r8, -8(%rbp)
	leaq	-776(%rbp), %r9
	movq	%r9, -328(%rbp)
	movq	%rdx, -336(%rbp)
	movq	%rsi, -344(%rbp)
	movq	%r8, -352(%rbp)
	movq	-328(%rbp), %rdx
	movq	-336(%rbp), %rsi
	movq	-344(%rbp), %r10
	movq	%rdx, -264(%rbp)
	movq	%rsi, -272(%rbp)
	movq	%r10, -280(%rbp)
	movq	%r8, -288(%rbp)
	movq	-264(%rbp), %rdx
	movq	-272(%rbp), %rsi
	movq	%rsi, -256(%rbp)
	movq	-280(%rbp), %r8
	movq	%r8, -16(%rbp)
	movq	-288(%rbp), %r10
	movq	%r10, -24(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rsi, -232(%rbp)
	movq	%r8, -240(%rbp)
	movq	%r10, -248(%rbp)
	movq	-224(%rbp), %rdx
	movq	-232(%rbp), %rsi
	movq	-240(%rbp), %r8
	movq	%rdx, -160(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%r8, -176(%rbp)
	movq	%r10, -184(%rbp)
	movq	-160(%rbp), %rdx
	movq	-168(%rbp), %rsi
	movq	%rsi, -120(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %r8
	movq	%rsi, -32(%rbp)
	movq	%rsi, (%r8)
	movq	%rdx, %rsi
	addq	$8, %rsi
	movq	-176(%rbp), %r8
	movq	%r8, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%r8, -80(%rbp)
	movq	-72(%rbp), %rsi
	movq	%r8, -64(%rbp)
	movq	%r8, (%rsi)
	addq	$16, %rdx
	movq	-184(%rbp), %rsi
	movq	%rsi, -88(%rbp)
	movq	%rdx, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movq	-104(%rbp), %rdx
	movq	%rsi, -96(%rbp)
	movq	%rsi, (%rdx)
	movq	%rax, -680(%rbp)
	movq	%rcx, -688(%rbp)
	movq	%r9, -696(%rbp)
	movq	-680(%rbp), %rax
	movq	-688(%rbp), %rcx
	movq	%rcx, -664(%rbp)
	movq	%rcx, -656(%rbp)
	movq	(%rcx), %rcx
	movq	%rcx, -704(%rbp)
	movq	-696(%rbp), %rdx
	movq	%rcx, -568(%rbp)
	movq	%rdx, -576(%rbp)
	leaq	-568(%rbp), %rcx
	movq	%rcx, -560(%rbp)
	movq	-568(%rbp), %rcx
	movq	-688(%rbp), %rdx
	movq	%rdx, -376(%rbp)
	movq	%rdx, -368(%rbp)
	movq	-696(%rbp), %rsi
	movq	%rdx, -408(%rbp)
	movq	%rsi, -416(%rbp)
	movq	$0, -424(%rbp)
	movq	-416(%rbp), %rdx
	movq	%rdx, -400(%rbp)
	movq	%rdx, -392(%rbp)
	movq	(%rdx), %rdx
	movq	%rdx, -384(%rbp)
	movq	-688(%rbp), %rsi
	movq	%rsi, -440(%rbp)
	movq	%rsi, -432(%rbp)
	movq	-696(%rbp), %r8
	movq	%rsi, -472(%rbp)
	movq	%r8, -480(%rbp)
	movq	$1, -488(%rbp)
	movq	-480(%rbp), %rsi
	movq	%rsi, -464(%rbp)
	movq	%rsi, %r8
	addq	$8, %r8
	movq	%r8, -456(%rbp)
	movq	8(%rsi), %rsi
	movq	%rsi, -448(%rbp)
	movq	-688(%rbp), %r8
	movq	%r8, -504(%rbp)
	movq	%r8, -496(%rbp)
	movq	-696(%rbp), %r9
	movq	%r8, -536(%rbp)
	movq	%r9, -544(%rbp)
	movq	$2, -552(%rbp)
	movq	-544(%rbp), %r8
	movq	%r8, -528(%rbp)
	movq	%r8, %r9
	addq	$16, %r9
	movq	%r9, -520(%rbp)
	movq	16(%r8), %r8
	movq	%r8, -512(%rbp)
	movq	%rax, -616(%rbp)
	movq	%rcx, -624(%rbp)
	movq	%rdx, -632(%rbp)
	movq	%rsi, -640(%rbp)
	movq	%r8, -648(%rbp)
	movq	-616(%rbp), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	-624(%rbp), %rdx
	movq	%rdx, -608(%rbp)
	movq	-608(%rbp), %rdx
	addq	%rax, %rdx
	movq	%rcx, %rax
	andq	$1, %rax
	cmpq	$0, %rax
	movq	%rdi, -856(%rbp)        ## 8-byte Spill
	movq	%rcx, -864(%rbp)        ## 8-byte Spill
	movq	%rdx, -872(%rbp)        ## 8-byte Spill
	je	LBB286_2
## BB#1:
	movq	-872(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	-864(%rbp), %rdx        ## 8-byte Reload
	subq	$1, %rdx
	movq	(%rcx,%rdx), %rcx
	movq	%rcx, -880(%rbp)        ## 8-byte Spill
	jmp	LBB286_3
LBB286_2:
	movq	-864(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -880(%rbp)        ## 8-byte Spill
LBB286_3:                               ## %_ZNSt3__16__bindIMN3fid10FidFactoryEFvRKNS_6vectorIdNS_9allocatorIdEEEERS6_dEJNS_17reference_wrapperIS2_EERNS_12placeholders4__phILi1EEERNSF_ILi2EEERNSF_ILi3EEEEEclIJS9_S9_dEEENS_13__bind_returnISB_NS_5tupleIJSD_SG_SI_SK_EEENSP_IJDpOT_EEEXsr21_is_valid_bind_returnISB_SQ_SU_EE5valueEE4typeEST_.exit
	movq	-880(%rbp), %rax        ## 8-byte Reload
	movq	-632(%rbp), %rcx
	movq	%rcx, -600(%rbp)
	movq	-600(%rbp), %rsi
	movq	-640(%rbp), %rcx
	movq	%rcx, -584(%rbp)
	movq	-584(%rbp), %rdx
	movq	-648(%rbp), %rcx
	movq	%rcx, -592(%rbp)
	movq	-592(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-872(%rbp), %rdi        ## 8-byte Reload
	callq	*%rax
	leaq	-848(%rbp), %rdi
	movq	-856(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rsi
	movq	32(%rax), %rdx
	movq	16(%rax), %rcx
	movq	40(%rax), %r8
	movq	48(%rax), %r9
	movq	-792(%rbp), %r10
	addq	$8, %r10
	movsd	64(%rax), %xmm0
	movq	%rsi, -888(%rbp)        ## 8-byte Spill
	movq	%r10, %rsi
	movq	%r8, -896(%rbp)         ## 8-byte Spill
	movq	%r9, -904(%rbp)         ## 8-byte Spill
	movq	%rdx, -912(%rbp)        ## 8-byte Spill
	movq	%rcx, -920(%rbp)        ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm4EEEd
	leaq	-808(%rbp), %rax
	leaq	-848(%rbp), %rcx
	movq	-816(%rbp), %rdx
	movq	%rsp, %rsi
	movq	%rdx, 32(%rsi)
	movq	-824(%rbp), %rdx
	movq	%rdx, 24(%rsi)
	movq	-832(%rbp), %rdx
	movq	%rdx, 16(%rsi)
	movq	-848(%rbp), %rdx
	movq	-840(%rbp), %rdi
	movq	%rdi, 8(%rsi)
	movq	%rdx, (%rsi)
	leaq	-808(%rbp), %rdi
	movq	-888(%rbp), %rsi        ## 8-byte Reload
	movq	-912(%rbp), %rdx        ## 8-byte Reload
	movq	-920(%rbp), %r8         ## 8-byte Reload
	movq	%rcx, -928(%rbp)        ## 8-byte Spill
	movq	%r8, %rcx
	movq	-896(%rbp), %r8         ## 8-byte Reload
	movq	-904(%rbp), %r9         ## 8-byte Reload
	movq	%rax, -936(%rbp)        ## 8-byte Spill
	callq	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm4ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	addq	$976, %rsp              ## imm = 0x3D0
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.weak_def_can_be_hidden	__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.align	4, 0x90
__ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE: ## @_ZN5boost6fusiondeINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKNS0_13iterator_baseISF_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1243:
	.cfi_def_cfa_offset 16
Ltmp1244:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1245:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEE4castEv
	movq	%rax, %rdi
	callq	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion6detail17for_each_unrolledILi0EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi4EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_
	.weak_def_can_be_hidden	__ZN5boost6fusion6detail17for_each_unrolledILi0EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi4EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_
	.align	4, 0x90
__ZN5boost6fusion6detail17for_each_unrolledILi0EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi4EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_: ## @_ZN5boost6fusion6detail17for_each_unrolledILi0EE4callINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorELi4EEENSC_15calculate_stageINSt3__16__bindIMN3fid10FidFactoryEFvRKNSH_6vectorIdNSH_9allocatorIdEEEERSO_dEJNSH_17reference_wrapperISK_EERNSH_12placeholders4__phILi1EEERNSX_ILi2EEERNSX_ILi3EEEEEESO_SO_SO_NS7_13state_wrapperISO_vEESO_dEEEEvRKT_RKT0_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1246:
	.cfi_def_cfa_offset 16
Ltmp1247:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1248:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.align	4, 0x90
__ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEEKNS0_9result_of4nextIT_E4typeERKSF_: ## @_ZN5boost6fusion4nextINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEEKNS0_9result_of4nextIT_E4typeERKSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1249:
	.cfi_def_cfa_offset 16
Ltmp1250:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1251:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_
	.align	4, 0x90
__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_: ## @_ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1252:
	.cfi_def_cfa_offset 16
Ltmp1253:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1254:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC1ERSA_
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC1ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC1ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC1ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC1ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1255:
	.cfi_def_cfa_offset 16
Ltmp1256:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1257:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC2ERSA_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC2ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC2ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC2ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi4EEC2ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1258:
	.cfi_def_cfa_offset 16
Ltmp1259:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1260:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.align	4, 0x90
__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKSF_: ## @_ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1261:
	.cfi_def_cfa_offset 16
Ltmp1262:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1263:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEE4castEv
	.weak_def_can_be_hidden	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEE4castEv
	.align	4, 0x90
__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEE4castEv: ## @_ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi3EEEE4castEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1264:
	.cfi_def_cfa_offset 16
Ltmp1265:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1266:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_
	.align	4, 0x90
__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_: ## @_ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi3EEEE4callERKSG_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1267:
	.cfi_def_cfa_offset 16
Ltmp1268:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1269:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	callq	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE
	.align	4, 0x90
__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE: ## @_ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1270:
	.cfi_def_cfa_offset 16
Ltmp1271:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1272:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	addq	$72, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm4ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm4ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm4ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_: ## @_ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm4ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1273:
	.cfi_def_cfa_offset 16
Ltmp1274:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1275:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
Ltmp1276:
	.cfi_offset %rbx, -24
	leaq	16(%rbp), %rax
	leaq	-96(%rbp), %r10
	movl	$40, %r11d
	movl	%r11d, %ebx
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%r8, -48(%rbp)
	movq	%r9, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	movq	-48(%rbp), %rdx
	movq	-56(%rbp), %rcx
	movq	-56(%rbp), %r8
	addq	$24, %r8
	movq	-56(%rbp), %r9
	addq	$48, %r9
	movq	%rdi, -104(%rbp)        ## 8-byte Spill
	movq	%r10, %rdi
	movq	%rsi, -112(%rbp)        ## 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -120(%rbp)        ## 8-byte Spill
	movq	%rbx, %rdx
	movq	%rcx, -128(%rbp)        ## 8-byte Spill
	movq	%r9, -136(%rbp)         ## 8-byte Spill
	movq	%r8, -144(%rbp)         ## 8-byte Spill
	callq	_memcpy
	movq	-64(%rbp), %rax
	movq	%rsp, %rcx
	movq	%rax, 32(%rcx)
	movq	-72(%rbp), %rax
	movq	%rax, 24(%rcx)
	movq	-80(%rbp), %rax
	movq	%rax, 16(%rcx)
	movq	-96(%rbp), %rax
	movq	-88(%rbp), %rdx
	movq	%rdx, 8(%rcx)
	movq	%rax, (%rcx)
	movq	-104(%rbp), %rdi        ## 8-byte Reload
	movq	-112(%rbp), %rsi        ## 8-byte Reload
	movq	-120(%rbp), %rdx        ## 8-byte Reload
	movq	-128(%rbp), %rcx        ## 8-byte Reload
	movq	-144(%rbp), %r8         ## 8-byte Reload
	movq	-136(%rbp), %r9         ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint13range_algebra9for_each6INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_S8_NS1_6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_RT4_T5_
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm4EEEd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm4EEEd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm4EEEd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm4EEEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1277:
	.cfi_def_cfa_offset 16
Ltmp1278:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1279:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm4EEEd
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI299_0:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm4EEEd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm4EEEd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm4EEEd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm4EEEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1280:
	.cfi_def_cfa_offset 16
Ltmp1281:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1282:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	callq	__ZNK5boost5arrayIdLm4EEixEm
	movl	$1, %edx
	movl	%edx, %esi
	movsd	(%rax), %xmm0
	mulsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rdi
	movsd	%xmm0, -40(%rbp)        ## 8-byte Spill
	callq	__ZNK5boost5arrayIdLm4EEixEm
	movl	$2, %edx
	movl	%edx, %esi
	movsd	(%rax), %xmm0
	mulsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rdi
	movsd	%xmm0, -48(%rbp)        ## 8-byte Spill
	callq	__ZNK5boost5arrayIdLm4EEixEm
	movl	$3, %edx
	movl	%edx, %esi
	movsd	(%rax), %xmm0
	mulsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rdi
	movsd	%xmm0, -56(%rbp)        ## 8-byte Spill
	callq	__ZNK5boost5arrayIdLm4EEixEm
	movsd	LCPI299_0(%rip), %xmm0
	movsd	(%rax), %xmm1
	mulsd	-24(%rbp), %xmm1
	movq	-32(%rbp), %rdi         ## 8-byte Reload
	movsd	-40(%rbp), %xmm2        ## 8-byte Reload
	movsd	%xmm1, -64(%rbp)        ## 8-byte Spill
	movaps	%xmm2, %xmm1
	movsd	-48(%rbp), %xmm2        ## 8-byte Reload
	movsd	-56(%rbp), %xmm3        ## 8-byte Reload
	movsd	-64(%rbp), %xmm4        ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint18default_operations10scale_sum5IdddddEC2Eddddd
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost5arrayIdLm4EEixEm
	.weak_def_can_be_hidden	__ZNK5boost5arrayIdLm4EEixEm
	.align	4, 0x90
__ZNK5boost5arrayIdLm4EEixEm:           ## @_ZNK5boost5arrayIdLm4EEixEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1283:
	.cfi_def_cfa_offset 16
Ltmp1284:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1285:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$4, -16(%rbp)
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movb	%cl, -25(%rbp)          ## 1-byte Spill
	jae	LBB300_2
## BB#1:
	movb	$1, %al
	movb	%al, -25(%rbp)          ## 1-byte Spill
	jmp	LBB300_2
LBB300_2:
	movb	-25(%rbp), %al          ## 1-byte Reload
	xorb	$1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	cmpq	$0, %rdx
	je	LBB300_4
## BB#3:
	leaq	L___func__._ZNK5boost5arrayIdLm4EEixEm(%rip), %rdi
	leaq	L_.str48(%rip), %rsi
	movl	$129, %edx
	leaq	L_.str49(%rip), %rcx
	callq	___assert_rtn
LBB300_4:
	jmp	LBB300_5
LBB300_5:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint18default_operations10scale_sum5IdddddEC2Eddddd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint18default_operations10scale_sum5IdddddEC2Eddddd
	.align	4, 0x90
__ZN5boost7numeric6odeint18default_operations10scale_sum5IdddddEC2Eddddd: ## @_ZN5boost7numeric6odeint18default_operations10scale_sum5IdddddEC2Eddddd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1286:
	.cfi_def_cfa_offset 16
Ltmp1287:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1288:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movsd	%xmm2, -32(%rbp)
	movsd	%xmm3, -40(%rbp)
	movsd	%xmm4, -48(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rdi)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rdi)
	movsd	-32(%rbp), %xmm0
	movsd	%xmm0, 16(%rdi)
	movsd	-40(%rbp), %xmm0
	movsd	%xmm0, 24(%rdi)
	movsd	-48(%rbp), %xmm0
	movsd	%xmm0, 32(%rdi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13range_algebra9for_each6INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_S8_NS1_6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_RT4_T5_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13range_algebra9for_each6INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_S8_NS1_6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_RT4_T5_
	.align	4, 0x90
__ZN5boost7numeric6odeint13range_algebra9for_each6INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_S8_NS1_6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_RT4_T5_: ## @_ZN5boost7numeric6odeint13range_algebra9for_each6INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_S8_NS1_6detail20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_RT4_T5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1289:
	.cfi_def_cfa_offset 16
Ltmp1290:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1291:
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
Ltmp1292:
	.cfi_offset %rbx, -32
Ltmp1293:
	.cfi_offset %r14, -24
	leaq	16(%rbp), %rax
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -64(%rbp)
	movq	-24(%rbp), %rdi
	movq	%rax, -168(%rbp)        ## 8-byte Spill
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier3endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -80(%rbp)
	movq	-32(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	movq	%rax, -88(%rbp)
	movq	-40(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -104(%rbp)
	movq	-56(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	leaq	-160(%rbp), %rcx
	movl	$40, %r10d
	movl	%r10d, %edx
	movq	%rax, -120(%rbp)
	movq	-168(%rbp), %rax        ## 8-byte Reload
	movq	%rcx, %rdi
	movq	%rax, %rsi
	callq	_memcpy
	movq	-72(%rbp), %rdi
	movq	-80(%rbp), %rsi
	movq	-88(%rbp), %rdx
	movq	-96(%rbp), %rcx
	movq	-104(%rbp), %r8
	movq	-112(%rbp), %r9
	movq	-120(%rbp), %rax
	movq	-128(%rbp), %r11
	movq	%rsp, %rbx
	movq	%r11, 40(%rbx)
	movq	-136(%rbp), %r11
	movq	%r11, 32(%rbx)
	movq	-144(%rbp), %r11
	movq	%r11, 24(%rbx)
	movq	-160(%rbp), %r11
	movq	-152(%rbp), %r14
	movq	%r14, 16(%rbx)
	movq	%r11, 8(%rbx)
	movq	%rax, (%rbx)
	callq	__ZN5boost7numeric6odeint6detail9for_each6INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_S7_NS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_T5_
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail9for_each6INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_S7_NS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_T5_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail9for_each6INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_S7_NS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_T5_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail9for_each6INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_S7_NS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_T5_: ## @_ZN5boost7numeric6odeint6detail9for_each6INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_S7_NS2_20generic_rk_scale_sumILm4ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_T5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1294:
	.cfi_def_cfa_offset 16
Ltmp1295:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1296:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$424, %rsp              ## imm = 0x1A8
Ltmp1297:
	.cfi_offset %rbx, -56
Ltmp1298:
	.cfi_offset %r12, -48
Ltmp1299:
	.cfi_offset %r13, -40
Ltmp1300:
	.cfi_offset %r14, -32
Ltmp1301:
	.cfi_offset %r15, -24
	leaq	24(%rbp), %rax
	movq	16(%rbp), %r10
	movq	%rdi, -336(%rbp)
	movq	%rsi, -344(%rbp)
	movq	%rdx, -352(%rbp)
	movq	%rcx, -360(%rbp)
	movq	%r8, -368(%rbp)
	movq	%r9, -376(%rbp)
	movq	%r10, -384(%rbp)
	movq	%rax, -440(%rbp)        ## 8-byte Spill
LBB303_1:                               ## =>This Inner Loop Header: Depth=1
	leaq	-344(%rbp), %rax
	leaq	-336(%rbp), %rcx
	movq	%rcx, -320(%rbp)
	movq	%rax, -328(%rbp)
	movq	-320(%rbp), %rax
	movq	-328(%rbp), %rcx
	movq	%rax, -304(%rbp)
	movq	%rcx, -312(%rbp)
	movq	-304(%rbp), %rax
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	-312(%rbp), %rcx
	movq	%rcx, -288(%rbp)
	movq	-288(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%dl
	xorb	$1, %dl
	testb	$1, %dl
	jne	LBB303_2
	jmp	LBB303_3
LBB303_2:                               ##   in Loop: Header=BB303_1 Depth=1
	leaq	-432(%rbp), %rax
	leaq	-384(%rbp), %rcx
	leaq	-424(%rbp), %rdx
	leaq	-376(%rbp), %rsi
	leaq	-416(%rbp), %rdi
	leaq	-368(%rbp), %r8
	leaq	-408(%rbp), %r9
	leaq	-360(%rbp), %r10
	leaq	-400(%rbp), %r11
	leaq	-352(%rbp), %rbx
	leaq	-392(%rbp), %r14
	leaq	-336(%rbp), %r15
	movq	-440(%rbp), %r12        ## 8-byte Reload
	movq	%r15, -272(%rbp)
	movl	$0, -276(%rbp)
	movq	-272(%rbp), %r15
	movq	(%r15), %r13
	movq	%r13, -264(%rbp)
	movq	%r15, -256(%rbp)
	movq	-256(%rbp), %r15
	movq	(%r15), %r13
	addq	$8, %r13
	movq	%r13, (%r15)
	movq	-264(%rbp), %r15
	movq	%r15, -392(%rbp)
	movq	%r14, -48(%rbp)
	movq	-48(%rbp), %r14
	movq	(%r14), %r14
	movq	%rbx, -72(%rbp)
	movl	$0, -76(%rbp)
	movq	-72(%rbp), %rbx
	movq	(%rbx), %r15
	movq	%r15, -64(%rbp)
	movq	%rbx, -56(%rbp)
	movq	-56(%rbp), %rbx
	movq	(%rbx), %r15
	addq	$8, %r15
	movq	%r15, (%rbx)
	movq	-64(%rbp), %rbx
	movq	%rbx, -400(%rbp)
	movq	%r11, -88(%rbp)
	movq	-88(%rbp), %r11
	movq	(%r11), %r11
	movq	%r10, -112(%rbp)
	movl	$0, -116(%rbp)
	movq	-112(%rbp), %r10
	movq	(%r10), %rbx
	movq	%rbx, -104(%rbp)
	movq	%r10, -96(%rbp)
	movq	-96(%rbp), %r10
	movq	(%r10), %rbx
	addq	$8, %rbx
	movq	%rbx, (%r10)
	movq	-104(%rbp), %r10
	movq	%r10, -408(%rbp)
	movq	%r9, -128(%rbp)
	movq	-128(%rbp), %r9
	movq	(%r9), %r9
	movq	%r8, -152(%rbp)
	movl	$0, -156(%rbp)
	movq	-152(%rbp), %r8
	movq	(%r8), %r10
	movq	%r10, -144(%rbp)
	movq	%r8, -136(%rbp)
	movq	-136(%rbp), %r8
	movq	(%r8), %r10
	addq	$8, %r10
	movq	%r10, (%r8)
	movq	-144(%rbp), %r8
	movq	%r8, -416(%rbp)
	movq	%rdi, -168(%rbp)
	movq	-168(%rbp), %rdi
	movq	(%rdi), %r8
	movq	%rsi, -192(%rbp)
	movl	$0, -196(%rbp)
	movq	-192(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	-176(%rbp), %rsi
	movq	(%rsi), %rdi
	addq	$8, %rdi
	movq	%rdi, (%rsi)
	movq	-184(%rbp), %rsi
	movq	%rsi, -424(%rbp)
	movq	%rdx, -208(%rbp)
	movq	-208(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rcx, -232(%rbp)
	movl	$0, -236(%rbp)
	movq	-232(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rsi, -224(%rbp)
	movq	%rcx, -216(%rbp)
	movq	-216(%rbp), %rcx
	movq	(%rcx), %rsi
	addq	$8, %rsi
	movq	%rsi, (%rcx)
	movq	-224(%rbp), %rcx
	movq	%rcx, -432(%rbp)
	movq	%rax, -248(%rbp)
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%r12, %rdi
	movq	%r14, %rsi
	movq	%rdx, -448(%rbp)        ## 8-byte Spill
	movq	%r11, %rdx
	movq	%r9, %rcx
	movq	-448(%rbp), %r9         ## 8-byte Reload
	movq	%rax, (%rsp)
	callq	__ZNK5boost7numeric6odeint18default_operations10scale_sum5IdddddEclIddddddEEvRT_RKT0_RKT1_RKT2_RKT3_RKT4_
	jmp	LBB303_1
LBB303_3:
	addq	$424, %rsp              ## imm = 0x1A8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.weak_def_can_be_hidden	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.align	4, 0x90
__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_: ## @_ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1302:
	.cfi_def_cfa_offset 16
Ltmp1303:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1304:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost12range_detail11range_beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17range_adl_barrier3endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.weak_def_can_be_hidden	__ZN5boost17range_adl_barrier3endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.align	4, 0x90
__ZN5boost17range_adl_barrier3endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_: ## @_ZN5boost17range_adl_barrier3endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1305:
	.cfi_def_cfa_offset 16
Ltmp1306:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1307:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost12range_detail9range_endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	.weak_def_can_be_hidden	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	.align	4, 0x90
__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_: ## @_ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1308:
	.cfi_def_cfa_offset 16
Ltmp1309:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1310:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost12range_detail11range_beginIKNSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS9_
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost12range_detail11range_beginIKNSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS9_
	.weak_def_can_be_hidden	__ZN5boost12range_detail11range_beginIKNSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS9_
	.align	4, 0x90
__ZN5boost12range_detail11range_beginIKNSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS9_: ## @_ZN5boost12range_detail11range_beginIKNSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS9_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1311:
	.cfi_def_cfa_offset 16
Ltmp1312:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1313:
	.cfi_def_cfa_register %rbp
	leaq	-40(%rbp), %rax
	movq	%rdi, -88(%rbp)
	movq	-88(%rbp), %rdi
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rdi
	movq	(%rdi), %rcx
	movq	%rdi, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	%rax, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost12range_detail9range_endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.weak_def_can_be_hidden	__ZN5boost12range_detail9range_endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.align	4, 0x90
__ZN5boost12range_detail9range_endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_: ## @_ZN5boost12range_detail9range_endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1314:
	.cfi_def_cfa_offset 16
Ltmp1315:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1316:
	.cfi_def_cfa_register %rbp
	leaq	-40(%rbp), %rax
	movq	%rdi, -88(%rbp)
	movq	-88(%rbp), %rdi
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rdi
	movq	8(%rdi), %rcx
	movq	%rdi, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	%rax, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost12range_detail11range_beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.weak_def_can_be_hidden	__ZN5boost12range_detail11range_beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.align	4, 0x90
__ZN5boost12range_detail11range_beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_: ## @_ZN5boost12range_detail11range_beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1317:
	.cfi_def_cfa_offset 16
Ltmp1318:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1319:
	.cfi_def_cfa_register %rbp
	leaq	-40(%rbp), %rax
	movq	%rdi, -88(%rbp)
	movq	-88(%rbp), %rdi
	movq	%rdi, -72(%rbp)
	movq	-72(%rbp), %rdi
	movq	(%rdi), %rcx
	movq	%rdi, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	%rax, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	-40(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint18default_operations10scale_sum5IdddddEclIddddddEEvRT_RKT0_RKT1_RKT2_RKT3_RKT4_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint18default_operations10scale_sum5IdddddEclIddddddEEvRT_RKT0_RKT1_RKT2_RKT3_RKT4_
	.align	4, 0x90
__ZNK5boost7numeric6odeint18default_operations10scale_sum5IdddddEclIddddddEEvRT_RKT0_RKT1_RKT2_RKT3_RKT4_: ## @_ZNK5boost7numeric6odeint18default_operations10scale_sum5IdddddEclIddddddEEvRT_RKT0_RKT1_RKT2_RKT3_RKT4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1320:
	.cfi_def_cfa_offset 16
Ltmp1321:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1322:
	.cfi_def_cfa_register %rbp
	movq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	%rax, -56(%rbp)
	movq	-8(%rbp), %rax
	movsd	(%rax), %xmm0
	movq	-24(%rbp), %rcx
	mulsd	(%rcx), %xmm0
	movsd	8(%rax), %xmm1
	movq	-32(%rbp), %rcx
	mulsd	(%rcx), %xmm1
	addsd	%xmm1, %xmm0
	movsd	16(%rax), %xmm1
	movq	-40(%rbp), %rcx
	mulsd	(%rcx), %xmm1
	addsd	%xmm1, %xmm0
	movsd	24(%rax), %xmm1
	movq	-48(%rbp), %rcx
	mulsd	(%rcx), %xmm1
	addsd	%xmm1, %xmm0
	movsd	32(%rax), %xmm1
	movq	-56(%rbp), %rax
	mulsd	(%rax), %xmm1
	addsd	%xmm1, %xmm0
	movq	-16(%rbp), %rax
	movsd	%xmm0, (%rax)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_
	.align	4, 0x90
__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_: ## @_ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1323:
	.cfi_def_cfa_offset 16
Ltmp1324:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1325:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC1ERSA_
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC1ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC1ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC1ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC1ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1326:
	.cfi_def_cfa_offset 16
Ltmp1327:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1328:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC2ERSA_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC2ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC2ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC2ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi3EEC2ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1329:
	.cfi_def_cfa_offset 16
Ltmp1330:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1331:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.align	4, 0x90
__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKSF_: ## @_ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1332:
	.cfi_def_cfa_offset 16
Ltmp1333:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1334:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEE4castEv
	.weak_def_can_be_hidden	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEE4castEv
	.align	4, 0x90
__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEE4castEv: ## @_ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi2EEEE4castEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1335:
	.cfi_def_cfa_offset 16
Ltmp1336:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1337:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_
	.align	4, 0x90
__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_: ## @_ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi2EEEE4callERKSG_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1338:
	.cfi_def_cfa_offset 16
Ltmp1339:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1340:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	callq	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE
	.align	4, 0x90
__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE: ## @_ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1341:
	.cfi_def_cfa_offset 16
Ltmp1342:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1343:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	addq	$40, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm3ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm3ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm3ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_: ## @_ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm3ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1344:
	.cfi_def_cfa_offset 16
Ltmp1345:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1346:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	leaq	16(%rbp), %rax
	leaq	-80(%rbp), %r10
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	-48(%rbp), %r8
	addq	$24, %r8
	movq	(%rax), %r9
	movq	%r9, -80(%rbp)
	movq	8(%rax), %r9
	movq	%r9, -72(%rbp)
	movq	16(%rax), %r9
	movq	%r9, -64(%rbp)
	movq	24(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	(%r10), %rax
	movq	%rax, (%rsp)
	movq	8(%r10), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r10), %rax
	movq	%rax, 16(%rsp)
	movq	24(%r10), %rax
	movq	%rax, 24(%rsp)
	callq	__ZN5boost7numeric6odeint13range_algebra9for_each5INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_NS1_6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_T4_
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm3EEEd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm3EEEd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm3EEEd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm3EEEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1347:
	.cfi_def_cfa_offset 16
Ltmp1348:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1349:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm3EEEd
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI320_0:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm3EEEd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm3EEEd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm3EEEd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm3EEEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1350:
	.cfi_def_cfa_offset 16
Ltmp1351:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1352:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	callq	__ZNK5boost5arrayIdLm3EEixEm
	movl	$1, %edx
	movl	%edx, %esi
	movsd	(%rax), %xmm0
	mulsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rdi
	movsd	%xmm0, -40(%rbp)        ## 8-byte Spill
	callq	__ZNK5boost5arrayIdLm3EEixEm
	movl	$2, %edx
	movl	%edx, %esi
	movsd	(%rax), %xmm0
	mulsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rdi
	movsd	%xmm0, -48(%rbp)        ## 8-byte Spill
	callq	__ZNK5boost5arrayIdLm3EEixEm
	movsd	LCPI320_0(%rip), %xmm0
	movsd	(%rax), %xmm1
	mulsd	-24(%rbp), %xmm1
	movq	-32(%rbp), %rdi         ## 8-byte Reload
	movsd	-40(%rbp), %xmm2        ## 8-byte Reload
	movsd	%xmm1, -56(%rbp)        ## 8-byte Spill
	movaps	%xmm2, %xmm1
	movsd	-48(%rbp), %xmm2        ## 8-byte Reload
	movsd	-56(%rbp), %xmm3        ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint18default_operations10scale_sum4IddddEC2Edddd
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost5arrayIdLm3EEixEm
	.weak_def_can_be_hidden	__ZNK5boost5arrayIdLm3EEixEm
	.align	4, 0x90
__ZNK5boost5arrayIdLm3EEixEm:           ## @_ZNK5boost5arrayIdLm3EEixEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1353:
	.cfi_def_cfa_offset 16
Ltmp1354:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1355:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$3, -16(%rbp)
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movb	%cl, -25(%rbp)          ## 1-byte Spill
	jae	LBB321_2
## BB#1:
	movb	$1, %al
	movb	%al, -25(%rbp)          ## 1-byte Spill
	jmp	LBB321_2
LBB321_2:
	movb	-25(%rbp), %al          ## 1-byte Reload
	xorb	$1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	cmpq	$0, %rdx
	je	LBB321_4
## BB#3:
	leaq	L___func__._ZNK5boost5arrayIdLm4EEixEm(%rip), %rdi
	leaq	L_.str48(%rip), %rsi
	movl	$129, %edx
	leaq	L_.str49(%rip), %rcx
	callq	___assert_rtn
LBB321_4:
	jmp	LBB321_5
LBB321_5:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint18default_operations10scale_sum4IddddEC2Edddd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint18default_operations10scale_sum4IddddEC2Edddd
	.align	4, 0x90
__ZN5boost7numeric6odeint18default_operations10scale_sum4IddddEC2Edddd: ## @_ZN5boost7numeric6odeint18default_operations10scale_sum4IddddEC2Edddd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1356:
	.cfi_def_cfa_offset 16
Ltmp1357:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1358:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movsd	%xmm2, -32(%rbp)
	movsd	%xmm3, -40(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rdi)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rdi)
	movsd	-32(%rbp), %xmm0
	movsd	%xmm0, 16(%rdi)
	movsd	-40(%rbp), %xmm0
	movsd	%xmm0, 24(%rdi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13range_algebra9for_each5INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_NS1_6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_T4_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13range_algebra9for_each5INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_NS1_6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_T4_
	.align	4, 0x90
__ZN5boost7numeric6odeint13range_algebra9for_each5INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_NS1_6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_T4_: ## @_ZN5boost7numeric6odeint13range_algebra9for_each5INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_S8_NS1_6detail20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_RT3_T4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1359:
	.cfi_def_cfa_offset 16
Ltmp1360:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1361:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rax, -128(%rbp)        ## 8-byte Spill
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -48(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier3endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	movq	%rax, -64(%rbp)
	movq	-24(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -80(%rbp)
	movq	-40(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	leaq	-120(%rbp), %rcx
	movq	%rax, -88(%rbp)
	movq	-128(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rdx
	movq	%rdx, -120(%rbp)
	movq	8(%rax), %rdx
	movq	%rdx, -112(%rbp)
	movq	16(%rax), %rdx
	movq	%rdx, -104(%rbp)
	movq	24(%rax), %rdx
	movq	%rdx, -96(%rbp)
	movq	-48(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdx
	movq	-72(%rbp), %r8
	movq	-80(%rbp), %r9
	movq	-88(%rbp), %r10
	movq	%rcx, -136(%rbp)        ## 8-byte Spill
	movq	%r8, %rcx
	movq	%r9, %r8
	movq	%r10, %r9
	movq	-136(%rbp), %r10        ## 8-byte Reload
	movq	(%r10), %r11
	movq	%r11, (%rsp)
	movq	8(%r10), %r11
	movq	%r11, 8(%rsp)
	movq	16(%r10), %r11
	movq	%r11, 16(%rsp)
	movq	24(%r10), %r11
	movq	%r11, 24(%rsp)
	callq	__ZN5boost7numeric6odeint6detail9for_each5INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_NS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_
	addq	$176, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail9for_each5INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_NS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail9for_each5INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_NS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail9for_each5INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_NS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_: ## @_ZN5boost7numeric6odeint6detail9for_each5INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_S7_NS2_20generic_rk_scale_sumILm3ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_T4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1362:
	.cfi_def_cfa_offset 16
Ltmp1363:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1364:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$360, %rsp              ## imm = 0x168
Ltmp1365:
	.cfi_offset %rbx, -40
Ltmp1366:
	.cfi_offset %r14, -32
Ltmp1367:
	.cfi_offset %r15, -24
	leaq	16(%rbp), %rax
	movq	%rdi, -280(%rbp)
	movq	%rsi, -288(%rbp)
	movq	%rdx, -296(%rbp)
	movq	%rcx, -304(%rbp)
	movq	%r8, -312(%rbp)
	movq	%r9, -320(%rbp)
	movq	%rax, -368(%rbp)        ## 8-byte Spill
LBB324_1:                               ## =>This Inner Loop Header: Depth=1
	leaq	-288(%rbp), %rax
	leaq	-280(%rbp), %rcx
	movq	%rcx, -264(%rbp)
	movq	%rax, -272(%rbp)
	movq	-264(%rbp), %rax
	movq	-272(%rbp), %rcx
	movq	%rax, -248(%rbp)
	movq	%rcx, -256(%rbp)
	movq	-248(%rbp), %rax
	movq	%rax, -240(%rbp)
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	-256(%rbp), %rcx
	movq	%rcx, -232(%rbp)
	movq	-232(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%dl
	xorb	$1, %dl
	testb	$1, %dl
	jne	LBB324_2
	jmp	LBB324_3
LBB324_2:                               ##   in Loop: Header=BB324_1 Depth=1
	leaq	-360(%rbp), %rax
	leaq	-320(%rbp), %rcx
	leaq	-352(%rbp), %rdx
	leaq	-312(%rbp), %rsi
	leaq	-344(%rbp), %rdi
	leaq	-304(%rbp), %r8
	leaq	-336(%rbp), %r9
	leaq	-296(%rbp), %r10
	leaq	-328(%rbp), %r11
	leaq	-280(%rbp), %rbx
	movq	-368(%rbp), %r14        ## 8-byte Reload
	movq	%rbx, -216(%rbp)
	movl	$0, -220(%rbp)
	movq	-216(%rbp), %rbx
	movq	(%rbx), %r15
	movq	%r15, -208(%rbp)
	movq	%rbx, -200(%rbp)
	movq	-200(%rbp), %rbx
	movq	(%rbx), %r15
	addq	$8, %r15
	movq	%r15, (%rbx)
	movq	-208(%rbp), %rbx
	movq	%rbx, -328(%rbp)
	movq	%r11, -32(%rbp)
	movq	-32(%rbp), %r11
	movq	(%r11), %r11
	movq	%r10, -56(%rbp)
	movl	$0, -60(%rbp)
	movq	-56(%rbp), %r10
	movq	(%r10), %rbx
	movq	%rbx, -48(%rbp)
	movq	%r10, -40(%rbp)
	movq	-40(%rbp), %r10
	movq	(%r10), %rbx
	addq	$8, %rbx
	movq	%rbx, (%r10)
	movq	-48(%rbp), %r10
	movq	%r10, -336(%rbp)
	movq	%r9, -72(%rbp)
	movq	-72(%rbp), %r9
	movq	(%r9), %r9
	movq	%r8, -96(%rbp)
	movl	$0, -100(%rbp)
	movq	-96(%rbp), %r8
	movq	(%r8), %r10
	movq	%r10, -88(%rbp)
	movq	%r8, -80(%rbp)
	movq	-80(%rbp), %r8
	movq	(%r8), %r10
	addq	$8, %r10
	movq	%r10, (%r8)
	movq	-88(%rbp), %r8
	movq	%r8, -344(%rbp)
	movq	%rdi, -112(%rbp)
	movq	-112(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rsi, -136(%rbp)
	movl	$0, -140(%rbp)
	movq	-136(%rbp), %rsi
	movq	(%rsi), %r8
	movq	%r8, -128(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-120(%rbp), %rsi
	movq	(%rsi), %r8
	addq	$8, %r8
	movq	%r8, (%rsi)
	movq	-128(%rbp), %rsi
	movq	%rsi, -352(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-152(%rbp), %rdx
	movq	(%rdx), %r8
	movq	%rcx, -176(%rbp)
	movl	$0, -180(%rbp)
	movq	-176(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, -168(%rbp)
	movq	%rcx, -160(%rbp)
	movq	-160(%rbp), %rcx
	movq	(%rcx), %rdx
	addq	$8, %rdx
	movq	%rdx, (%rcx)
	movq	-168(%rbp), %rcx
	movq	%rcx, -360(%rbp)
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rdi, -376(%rbp)        ## 8-byte Spill
	movq	%r14, %rdi
	movq	%r11, %rsi
	movq	%r9, %rdx
	movq	-376(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, %r9
	callq	__ZNK5boost7numeric6odeint18default_operations10scale_sum4IddddEclIdddddEEvRT_RKT0_RKT1_RKT2_RKT3_
	jmp	LBB324_1
LBB324_3:
	addq	$360, %rsp              ## imm = 0x168
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint18default_operations10scale_sum4IddddEclIdddddEEvRT_RKT0_RKT1_RKT2_RKT3_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint18default_operations10scale_sum4IddddEclIdddddEEvRT_RKT0_RKT1_RKT2_RKT3_
	.align	4, 0x90
__ZNK5boost7numeric6odeint18default_operations10scale_sum4IddddEclIdddddEEvRT_RKT0_RKT1_RKT2_RKT3_: ## @_ZNK5boost7numeric6odeint18default_operations10scale_sum4IddddEclIdddddEEvRT_RKT0_RKT1_RKT2_RKT3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1368:
	.cfi_def_cfa_offset 16
Ltmp1369:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1370:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-8(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-24(%rbp), %rdx
	mulsd	(%rdx), %xmm0
	movsd	8(%rcx), %xmm1
	movq	-32(%rbp), %rdx
	mulsd	(%rdx), %xmm1
	addsd	%xmm1, %xmm0
	movsd	16(%rcx), %xmm1
	movq	-40(%rbp), %rdx
	mulsd	(%rdx), %xmm1
	addsd	%xmm1, %xmm0
	movsd	24(%rcx), %xmm1
	movq	-48(%rbp), %rcx
	mulsd	(%rcx), %xmm1
	addsd	%xmm1, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_
	.align	4, 0x90
__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_: ## @_ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1371:
	.cfi_def_cfa_offset 16
Ltmp1372:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1373:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC1ERSA_
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC1ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC1ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC1ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC1ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1374:
	.cfi_def_cfa_offset 16
Ltmp1375:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1376:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC2ERSA_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC2ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC2ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC2ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi2EEC2ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1377:
	.cfi_def_cfa_offset 16
Ltmp1378:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1379:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.align	4, 0x90
__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKSF_: ## @_ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1380:
	.cfi_def_cfa_offset 16
Ltmp1381:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1382:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEE4castEv
	.weak_def_can_be_hidden	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEE4castEv
	.align	4, 0x90
__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEE4castEv: ## @_ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi1EEEE4castEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1383:
	.cfi_def_cfa_offset 16
Ltmp1384:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1385:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_
	.align	4, 0x90
__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_: ## @_ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi1EEEE4callERKSG_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1386:
	.cfi_def_cfa_offset 16
Ltmp1387:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1388:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	callq	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE
	.align	4, 0x90
__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE: ## @_ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1389:
	.cfi_def_cfa_offset 16
Ltmp1390:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1391:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm2ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm2ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm2ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_: ## @_ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm2ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1392:
	.cfi_def_cfa_offset 16
Ltmp1393:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1394:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	leaq	16(%rbp), %rax
	leaq	-72(%rbp), %r10
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	-24(%rbp), %rdi
	movq	-32(%rbp), %rsi
	movq	-40(%rbp), %rdx
	movq	-48(%rbp), %rcx
	movq	(%rax), %r8
	movq	%r8, -72(%rbp)
	movq	8(%rax), %r8
	movq	%r8, -64(%rbp)
	movq	16(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	(%r10), %rax
	movq	%rax, (%rsp)
	movq	8(%r10), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r10), %rax
	movq	%rax, 16(%rsp)
	callq	__ZN5boost7numeric6odeint13range_algebra9for_each4INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_NS1_6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_T3_
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm2EEEd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm2EEEd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm2EEEd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm2EEEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1395:
	.cfi_def_cfa_offset 16
Ltmp1396:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1397:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm2EEEd
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI335_0:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm2EEEd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm2EEEd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm2EEEd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm2EEEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1398:
	.cfi_def_cfa_offset 16
Ltmp1399:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1400:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	callq	__ZNK5boost5arrayIdLm2EEixEm
	movl	$1, %edx
	movl	%edx, %esi
	movsd	(%rax), %xmm0
	mulsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rdi
	movsd	%xmm0, -40(%rbp)        ## 8-byte Spill
	callq	__ZNK5boost5arrayIdLm2EEixEm
	movsd	LCPI335_0(%rip), %xmm0
	movsd	(%rax), %xmm1
	mulsd	-24(%rbp), %xmm1
	movq	-32(%rbp), %rdi         ## 8-byte Reload
	movsd	-40(%rbp), %xmm2        ## 8-byte Reload
	movsd	%xmm1, -48(%rbp)        ## 8-byte Spill
	movaps	%xmm2, %xmm1
	movsd	-48(%rbp), %xmm2        ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint18default_operations10scale_sum3IdddEC2Eddd
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost5arrayIdLm2EEixEm
	.weak_def_can_be_hidden	__ZNK5boost5arrayIdLm2EEixEm
	.align	4, 0x90
__ZNK5boost5arrayIdLm2EEixEm:           ## @_ZNK5boost5arrayIdLm2EEixEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1401:
	.cfi_def_cfa_offset 16
Ltmp1402:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1403:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$2, -16(%rbp)
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movb	%cl, -25(%rbp)          ## 1-byte Spill
	jae	LBB336_2
## BB#1:
	movb	$1, %al
	movb	%al, -25(%rbp)          ## 1-byte Spill
	jmp	LBB336_2
LBB336_2:
	movb	-25(%rbp), %al          ## 1-byte Reload
	xorb	$1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	cmpq	$0, %rdx
	je	LBB336_4
## BB#3:
	leaq	L___func__._ZNK5boost5arrayIdLm4EEixEm(%rip), %rdi
	leaq	L_.str48(%rip), %rsi
	movl	$129, %edx
	leaq	L_.str49(%rip), %rcx
	callq	___assert_rtn
LBB336_4:
	jmp	LBB336_5
LBB336_5:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint18default_operations10scale_sum3IdddEC2Eddd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint18default_operations10scale_sum3IdddEC2Eddd
	.align	4, 0x90
__ZN5boost7numeric6odeint18default_operations10scale_sum3IdddEC2Eddd: ## @_ZN5boost7numeric6odeint18default_operations10scale_sum3IdddEC2Eddd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1404:
	.cfi_def_cfa_offset 16
Ltmp1405:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1406:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movsd	%xmm2, -32(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rdi)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rdi)
	movsd	-32(%rbp), %xmm0
	movsd	%xmm0, 16(%rdi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13range_algebra9for_each4INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_NS1_6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_T3_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13range_algebra9for_each4INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_NS1_6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_T3_
	.align	4, 0x90
__ZN5boost7numeric6odeint13range_algebra9for_each4INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_NS1_6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_T3_: ## @_ZN5boost7numeric6odeint13range_algebra9for_each4INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_S8_NS1_6detail20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvRT_RT0_RT1_RT2_T3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1407:
	.cfi_def_cfa_offset 16
Ltmp1408:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1409:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rax, -104(%rbp)        ## 8-byte Spill
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -40(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier3endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -48(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	leaq	-96(%rbp), %rcx
	movq	%rax, -72(%rbp)
	movq	-104(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rdx
	movq	%rdx, -96(%rbp)
	movq	8(%rax), %rdx
	movq	%rdx, -88(%rbp)
	movq	16(%rax), %rdx
	movq	%rdx, -80(%rbp)
	movq	-40(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	-64(%rbp), %r8
	movq	-72(%rbp), %r9
	movq	%rcx, -112(%rbp)        ## 8-byte Spill
	movq	%r8, %rcx
	movq	%r9, %r8
	movq	-112(%rbp), %r9         ## 8-byte Reload
	movq	(%r9), %r10
	movq	%r10, (%rsp)
	movq	8(%r9), %r10
	movq	%r10, 8(%rsp)
	movq	16(%r9), %r10
	movq	%r10, 16(%rsp)
	callq	__ZN5boost7numeric6odeint6detail9for_each4INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_NS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_
	addq	$144, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail9for_each4INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_NS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail9for_each4INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_NS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail9for_each4INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_NS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_: ## @_ZN5boost7numeric6odeint6detail9for_each4INSt3__111__wrap_iterIPdEENS5_IPKdEESA_S7_NS2_20generic_rk_scale_sumILm2ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_T3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1410:
	.cfi_def_cfa_offset 16
Ltmp1411:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1412:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$312, %rsp              ## imm = 0x138
Ltmp1413:
	.cfi_offset %rbx, -24
	leaq	16(%rbp), %rax
	movq	%rdi, -224(%rbp)
	movq	%rsi, -232(%rbp)
	movq	%rdx, -240(%rbp)
	movq	%rcx, -248(%rbp)
	movq	%r8, -256(%rbp)
	movq	%rax, -296(%rbp)        ## 8-byte Spill
LBB339_1:                               ## =>This Inner Loop Header: Depth=1
	leaq	-232(%rbp), %rax
	leaq	-224(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	%rax, -216(%rbp)
	movq	-208(%rbp), %rax
	movq	-216(%rbp), %rcx
	movq	%rax, -192(%rbp)
	movq	%rcx, -200(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	-200(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	movq	-176(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%dl
	xorb	$1, %dl
	testb	$1, %dl
	jne	LBB339_2
	jmp	LBB339_3
LBB339_2:                               ##   in Loop: Header=BB339_1 Depth=1
	leaq	-288(%rbp), %rax
	leaq	-256(%rbp), %rcx
	leaq	-280(%rbp), %rdx
	leaq	-248(%rbp), %rsi
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %r8
	leaq	-264(%rbp), %r9
	leaq	-224(%rbp), %r10
	movq	-296(%rbp), %r11        ## 8-byte Reload
	movq	%r10, -160(%rbp)
	movl	$0, -164(%rbp)
	movq	-160(%rbp), %r10
	movq	(%r10), %rbx
	movq	%rbx, -152(%rbp)
	movq	%r10, -144(%rbp)
	movq	-144(%rbp), %r10
	movq	(%r10), %rbx
	addq	$8, %rbx
	movq	%rbx, (%r10)
	movq	-152(%rbp), %r10
	movq	%r10, -264(%rbp)
	movq	%r9, -16(%rbp)
	movq	-16(%rbp), %r9
	movq	(%r9), %r9
	movq	%r8, -40(%rbp)
	movl	$0, -44(%rbp)
	movq	-40(%rbp), %r8
	movq	(%r8), %r10
	movq	%r10, -32(%rbp)
	movq	%r8, -24(%rbp)
	movq	-24(%rbp), %r8
	movq	(%r8), %r10
	addq	$8, %r10
	movq	%r10, (%r8)
	movq	-32(%rbp), %r8
	movq	%r8, -272(%rbp)
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rsi, -80(%rbp)
	movl	$0, -84(%rbp)
	movq	-80(%rbp), %rsi
	movq	(%rsi), %r8
	movq	%r8, -72(%rbp)
	movq	%rsi, -64(%rbp)
	movq	-64(%rbp), %rsi
	movq	(%rsi), %r8
	addq	$8, %r8
	movq	%r8, (%rsi)
	movq	-72(%rbp), %rsi
	movq	%rsi, -280(%rbp)
	movq	%rdx, -96(%rbp)
	movq	-96(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rcx, -120(%rbp)
	movl	$0, -124(%rbp)
	movq	-120(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rsi, -112(%rbp)
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	(%rcx), %rsi
	addq	$8, %rsi
	movq	%rsi, (%rcx)
	movq	-112(%rbp), %rcx
	movq	%rcx, -288(%rbp)
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	(%rax), %r8
	movq	%rdi, -304(%rbp)        ## 8-byte Spill
	movq	%r11, %rdi
	movq	%r9, %rsi
	movq	-304(%rbp), %rax        ## 8-byte Reload
	movq	%rdx, -312(%rbp)        ## 8-byte Spill
	movq	%rax, %rdx
	movq	-312(%rbp), %rcx        ## 8-byte Reload
	callq	__ZNK5boost7numeric6odeint18default_operations10scale_sum3IdddEclIddddEEvRT_RKT0_RKT1_RKT2_
	jmp	LBB339_1
LBB339_3:
	addq	$312, %rsp              ## imm = 0x138
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint18default_operations10scale_sum3IdddEclIddddEEvRT_RKT0_RKT1_RKT2_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint18default_operations10scale_sum3IdddEclIddddEEvRT_RKT0_RKT1_RKT2_
	.align	4, 0x90
__ZNK5boost7numeric6odeint18default_operations10scale_sum3IdddEclIddddEEvRT_RKT0_RKT1_RKT2_: ## @_ZNK5boost7numeric6odeint18default_operations10scale_sum3IdddEclIddddEEvRT_RKT0_RKT1_RKT2_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1414:
	.cfi_def_cfa_offset 16
Ltmp1415:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1416:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-24(%rbp), %rdx
	mulsd	(%rdx), %xmm0
	movsd	8(%rcx), %xmm1
	movq	-32(%rbp), %rdx
	mulsd	(%rdx), %xmm1
	addsd	%xmm1, %xmm0
	movsd	16(%rcx), %xmm1
	movq	-40(%rbp), %rcx
	mulsd	(%rcx), %xmm1
	addsd	%xmm1, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_
	.align	4, 0x90
__ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_: ## @_ZN5boost6fusion9extension9next_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1417:
	.cfi_def_cfa_offset 16
Ltmp1418:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1419:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	leaq	-8(%rbp), %rax
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	(%rdi), %rsi
	movq	%rax, %rdi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC1ERSA_
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC1ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC1ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC1ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC1ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1420:
	.cfi_def_cfa_offset 16
Ltmp1421:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1422:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC2ERSA_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC2ERSA_
	.weak_def_can_be_hidden	__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC2ERSA_
	.align	4, 0x90
__ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC2ERSA_: ## @_ZN5boost6fusion15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorELi1EEC2ERSA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1423:
	.cfi_def_cfa_offset 16
Ltmp1424:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1425:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rdi, (%rsi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.align	4, 0x90
__ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKSF_: ## @_ZN5boost6fusion5derefINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEEENS0_9result_of5derefIT_E4typeERKSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1426:
	.cfi_def_cfa_offset 16
Ltmp1427:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1428:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEE4castEv
	.weak_def_can_be_hidden	__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEE4castEv
	.align	4, 0x90
__ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEE4castEv: ## @_ZNK5boost6fusion13iterator_baseINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vectorELi0EEEE4castEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1429:
	.cfi_def_cfa_offset 16
Ltmp1430:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1431:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_
	.align	4, 0x90
__ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_: ## @_ZN5boost6fusion9extension10deref_implINS0_19vector_iterator_tagEE5applyINS0_15vector_iteratorIKNS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS8_13range_algebraENS8_18default_operationsEE12stage_vectorELi0EEEE4callERKSG_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1432:
	.cfi_def_cfa_offset 16
Ltmp1433:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1434:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	callq	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE
	.align	4, 0x90
__ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE: ## @_ZNK5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1435:
	.cfi_def_cfa_offset 16
Ltmp1436:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1437:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm1ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm1ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm1ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_: ## @_ZNK5boost7numeric6odeint6detail23generic_rk_call_algebraILm1ENS1_13range_algebraEEclINSt3__16vectorIdNS7_9allocatorIdEEEEKSB_SC_NS1_13state_wrapperISB_vEENS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRS4_RT_RT0_RT1_PT2_T3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1438:
	.cfi_def_cfa_offset 16
Ltmp1439:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1440:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -8(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -64(%rbp)
	movq	-40(%rbp), %rdi
	movq	-48(%rbp), %rsi
	movq	-56(%rbp), %rdx
	movq	-16(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	-8(%rbp), %rcx
	movq	%rcx, -72(%rbp)
	movsd	-80(%rbp), %xmm0
	movsd	-72(%rbp), %xmm1
	callq	__ZN5boost7numeric6odeint13range_algebra9for_each3INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_NS1_6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRT_RT0_RT1_T2_
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm1EEEd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm1EEEd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm1EEEd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC1ERKNS_5arrayIdLm1EEEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1441:
	.cfi_def_cfa_offset 16
Ltmp1442:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1443:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-24(%rbp), %xmm0
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm1EEEd
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI350_0:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm1EEEd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm1EEEd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm1EEEd: ## @_ZN5boost7numeric6odeint6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEC2ERKNS_5arrayIdLm1EEEd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1444:
	.cfi_def_cfa_offset 16
Ltmp1445:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1446:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movsd	%xmm0, -24(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	%rsi, -32(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	callq	__ZNK5boost5arrayIdLm1EEixEm
	movsd	LCPI350_0(%rip), %xmm0
	movsd	(%rax), %xmm1
	mulsd	-24(%rbp), %xmm1
	movq	-32(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint18default_operations10scale_sum2IddEC2Edd
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost5arrayIdLm1EEixEm
	.weak_def_can_be_hidden	__ZNK5boost5arrayIdLm1EEixEm
	.align	4, 0x90
__ZNK5boost5arrayIdLm1EEixEm:           ## @_ZNK5boost5arrayIdLm1EEixEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1447:
	.cfi_def_cfa_offset 16
Ltmp1448:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1449:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$1, -16(%rbp)
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movb	%cl, -25(%rbp)          ## 1-byte Spill
	jae	LBB351_2
## BB#1:
	movb	$1, %al
	movb	%al, -25(%rbp)          ## 1-byte Spill
	jmp	LBB351_2
LBB351_2:
	movb	-25(%rbp), %al          ## 1-byte Reload
	xorb	$1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	cmpq	$0, %rdx
	je	LBB351_4
## BB#3:
	leaq	L___func__._ZNK5boost5arrayIdLm4EEixEm(%rip), %rdi
	leaq	L_.str48(%rip), %rsi
	movl	$129, %edx
	leaq	L_.str49(%rip), %rcx
	callq	___assert_rtn
LBB351_4:
	jmp	LBB351_5
LBB351_5:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint18default_operations10scale_sum2IddEC2Edd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint18default_operations10scale_sum2IddEC2Edd
	.align	4, 0x90
__ZN5boost7numeric6odeint18default_operations10scale_sum2IddEC2Edd: ## @_ZN5boost7numeric6odeint18default_operations10scale_sum2IddEC2Edd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1450:
	.cfi_def_cfa_offset 16
Ltmp1451:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1452:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -24(%rbp)
	movq	-8(%rbp), %rdi
	movsd	-16(%rbp), %xmm0
	movsd	%xmm0, (%rdi)
	movsd	-24(%rbp), %xmm0
	movsd	%xmm0, 8(%rdi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13range_algebra9for_each3INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_NS1_6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRT_RT0_RT1_T2_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13range_algebra9for_each3INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_NS1_6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRT_RT0_RT1_T2_
	.align	4, 0x90
__ZN5boost7numeric6odeint13range_algebra9for_each3INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_NS1_6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRT_RT0_RT1_T2_: ## @_ZN5boost7numeric6odeint13range_algebra9for_each3INSt3__16vectorIdNS4_9allocatorIdEEEEKS8_S9_NS1_6detail20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvRT_RT0_RT1_T2_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1453:
	.cfi_def_cfa_offset 16
Ltmp1454:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1455:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movsd	%xmm0, -16(%rbp)
	movsd	%xmm1, -8(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier3endINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIT_vE4typeERS8_
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	movq	%rax, -64(%rbp)
	movq	-40(%rbp), %rdi
	callq	__ZN5boost17range_adl_barrier5beginINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_14range_iteratorIKT_vE4typeERS9_
	movq	%rax, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-48(%rbp), %rdi
	movq	-56(%rbp), %rsi
	movq	-64(%rbp), %rdx
	movq	-72(%rbp), %rcx
	movsd	-88(%rbp), %xmm0
	movsd	-80(%rbp), %xmm1
	callq	__ZN5boost7numeric6odeint6detail9for_each3INSt3__111__wrap_iterIPdEENS5_IPKdEESA_NS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail9for_each3INSt3__111__wrap_iterIPdEENS5_IPKdEESA_NS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail9for_each3INSt3__111__wrap_iterIPdEENS5_IPKdEESA_NS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail9for_each3INSt3__111__wrap_iterIPdEENS5_IPKdEESA_NS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_: ## @_ZN5boost7numeric6odeint6detail9for_each3INSt3__111__wrap_iterIPdEENS5_IPKdEESA_NS2_20generic_rk_scale_sumILm1ENS1_18default_operationsEddEEEEvT_SE_T0_T1_T2_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1456:
	.cfi_def_cfa_offset 16
Ltmp1457:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1458:
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              ## imm = 0x100
	movq	%rdi, -176(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	%rcx, -200(%rbp)
	movsd	%xmm0, -216(%rbp)
	movsd	%xmm1, -208(%rbp)
LBB354_1:                               ## =>This Inner Loop Header: Depth=1
	leaq	-184(%rbp), %rax
	leaq	-176(%rbp), %rcx
	movq	%rcx, -160(%rbp)
	movq	%rax, -168(%rbp)
	movq	-160(%rbp), %rax
	movq	-168(%rbp), %rcx
	movq	%rax, -144(%rbp)
	movq	%rcx, -152(%rbp)
	movq	-144(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	-152(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rcx
	cmpq	(%rcx), %rax
	sete	%dl
	xorb	$1, %dl
	testb	$1, %dl
	jne	LBB354_2
	jmp	LBB354_3
LBB354_2:                               ##   in Loop: Header=BB354_1 Depth=1
	leaq	-240(%rbp), %rax
	leaq	-200(%rbp), %rcx
	leaq	-232(%rbp), %rdx
	leaq	-192(%rbp), %rsi
	leaq	-224(%rbp), %rdi
	leaq	-176(%rbp), %r8
	leaq	-216(%rbp), %r9
	movq	%r8, -112(%rbp)
	movl	$0, -116(%rbp)
	movq	-112(%rbp), %r8
	movq	(%r8), %r10
	movq	%r10, -104(%rbp)
	movq	%r8, -96(%rbp)
	movq	-96(%rbp), %r8
	movq	(%r8), %r10
	addq	$8, %r10
	movq	%r10, (%r8)
	movq	-104(%rbp), %r8
	movq	%r8, -224(%rbp)
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	%rsi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rsi
	movq	(%rsi), %r8
	movq	%r8, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rsi
	movq	(%rsi), %r8
	addq	$8, %r8
	movq	%r8, (%rsi)
	movq	-24(%rbp), %rsi
	movq	%rsi, -232(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rcx, -72(%rbp)
	movl	$0, -76(%rbp)
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rsi
	movq	%rsi, -64(%rbp)
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	(%rcx), %rsi
	addq	$8, %rsi
	movq	%rsi, (%rcx)
	movq	-64(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movq	(%rax), %rcx
	movq	%rdi, -248(%rbp)        ## 8-byte Spill
	movq	%r9, %rdi
	movq	-248(%rbp), %rsi        ## 8-byte Reload
	callq	__ZNK5boost7numeric6odeint18default_operations10scale_sum2IddEclIdddEEvRT_RKT0_RKT1_
	jmp	LBB354_1
LBB354_3:
	addq	$256, %rsp              ## imm = 0x100
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint18default_operations10scale_sum2IddEclIdddEEvRT_RKT0_RKT1_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint18default_operations10scale_sum2IddEclIdddEEvRT_RKT0_RKT1_
	.align	4, 0x90
__ZNK5boost7numeric6odeint18default_operations10scale_sum2IddEclIdddEEvRT_RKT0_RKT1_: ## @_ZNK5boost7numeric6odeint18default_operations10scale_sum2IddEclIdddEEvRT_RKT0_RKT1_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1459:
	.cfi_def_cfa_offset 16
Ltmp1460:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1461:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-24(%rbp), %rdx
	mulsd	(%rdx), %xmm0
	movsd	8(%rcx), %xmm1
	movq	-32(%rbp), %rcx
	mulsd	(%rcx), %xmm1
	addsd	%xmm1, %xmm0
	movq	-16(%rbp), %rcx
	movsd	%xmm0, (%rcx)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint28adjust_size_by_resizeabilityINS1_13state_wrapperINSt3__16vectorIdNS4_9allocatorIdEEEEvEES8_EEbRT_RKT0_NS_17integral_constantIbLb1EEE
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint28adjust_size_by_resizeabilityINS1_13state_wrapperINSt3__16vectorIdNS4_9allocatorIdEEEEvEES8_EEbRT_RKT0_NS_17integral_constantIbLb1EEE
	.align	4, 0x90
__ZN5boost7numeric6odeint28adjust_size_by_resizeabilityINS1_13state_wrapperINSt3__16vectorIdNS4_9allocatorIdEEEEvEES8_EEbRT_RKT0_NS_17integral_constantIbLb1EEE: ## @_ZN5boost7numeric6odeint28adjust_size_by_resizeabilityINS1_13state_wrapperINSt3__16vectorIdNS4_9allocatorIdEEEEvEES8_EEbRT_RKT0_NS_17integral_constantIbLb1EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1462:
	.cfi_def_cfa_offset 16
Ltmp1463:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1464:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint9same_sizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEbRKT_RKT0_
	testb	$1, %al
	jne	LBB356_2
## BB#1:
	movq	-16(%rbp), %rdi
	movq	-24(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint6resizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEvRT_RKT0_
	movb	$1, -1(%rbp)
	jmp	LBB356_3
LBB356_2:
	movb	$0, -1(%rbp)
LBB356_3:
	movb	-1(%rbp), %al
	andb	$1, %al
	movzbl	%al, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint9same_sizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEbRKT_RKT0_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint9same_sizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEbRKT_RKT0_
	.align	4, 0x90
__ZN5boost7numeric6odeint9same_sizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEbRKT_RKT0_: ## @_ZN5boost7numeric6odeint9same_sizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEbRKT_RKT0_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1465:
	.cfi_def_cfa_offset 16
Ltmp1466:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1467:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint14same_size_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E9same_sizeERKS7_SA_
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6resizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEvRT_RKT0_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6resizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEvRT_RKT0_
	.align	4, 0x90
__ZN5boost7numeric6odeint6resizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEvRT_RKT0_: ## @_ZN5boost7numeric6odeint6resizeINSt3__16vectorIdNS3_9allocatorIdEEEES7_EEvRT_RKT0_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1468:
	.cfi_def_cfa_offset 16
Ltmp1469:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1470:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint11resize_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E6resizeERS7_RKS7_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint11resize_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E6resizeERS7_RKS7_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint11resize_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E6resizeERS7_RKS7_
	.align	4, 0x90
__ZN5boost7numeric6odeint11resize_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E6resizeERS7_RKS7_: ## @_ZN5boost7numeric6odeint11resize_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E6resizeERS7_RKS7_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1471:
	.cfi_def_cfa_offset 16
Ltmp1472:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1473:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint18resize_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE6resizeERS7_RKS7_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint18resize_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE6resizeERS7_RKS7_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint18resize_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE6resizeERS7_RKS7_
	.align	4, 0x90
__ZN5boost7numeric6odeint18resize_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE6resizeERS7_RKS7_: ## @_ZN5boost7numeric6odeint18resize_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE6resizeERS7_RKS7_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1474:
	.cfi_def_cfa_offset 16
Ltmp1475:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1476:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	callq	__ZN5boost4sizeINSt3__16vectorIdNS1_9allocatorIdEEEEEENS_10range_sizeIKT_E4typeERS8_
	movq	-24(%rbp), %rdi         ## 8-byte Reload
	movq	%rax, %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE6resizeEm
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost4sizeINSt3__16vectorIdNS1_9allocatorIdEEEEEENS_10range_sizeIKT_E4typeERS8_
	.weak_def_can_be_hidden	__ZN5boost4sizeINSt3__16vectorIdNS1_9allocatorIdEEEEEENS_10range_sizeIKT_E4typeERS8_
	.align	4, 0x90
__ZN5boost4sizeINSt3__16vectorIdNS1_9allocatorIdEEEEEENS_10range_sizeIKT_E4typeERS8_: ## @_ZN5boost4sizeINSt3__16vectorIdNS1_9allocatorIdEEEEEENS_10range_sizeIKT_E4typeERS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1477:
	.cfi_def_cfa_offset 16
Ltmp1478:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1479:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost12range_detail20range_calculate_sizeINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_9enable_ifINS0_15has_member_sizeIT_EENS_10range_sizeIKS9_E4typeEE4typeERSC_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost12range_detail20range_calculate_sizeINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_9enable_ifINS0_15has_member_sizeIT_EENS_10range_sizeIKS9_E4typeEE4typeERSC_
	.weak_def_can_be_hidden	__ZN5boost12range_detail20range_calculate_sizeINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_9enable_ifINS0_15has_member_sizeIT_EENS_10range_sizeIKS9_E4typeEE4typeERSC_
	.align	4, 0x90
__ZN5boost12range_detail20range_calculate_sizeINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_9enable_ifINS0_15has_member_sizeIT_EENS_10range_sizeIKS9_E4typeEE4typeERSC_: ## @_ZN5boost12range_detail20range_calculate_sizeINSt3__16vectorIdNS2_9allocatorIdEEEEEENS_9enable_ifINS0_15has_member_sizeIT_EENS_10range_sizeIKS9_E4typeEE4typeERSC_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1480:
	.cfi_def_cfa_offset 16
Ltmp1481:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1482:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint14same_size_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E9same_sizeERKS7_SA_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint14same_size_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E9same_sizeERKS7_SA_
	.align	4, 0x90
__ZN5boost7numeric6odeint14same_size_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E9same_sizeERKS7_SA_: ## @_ZN5boost7numeric6odeint14same_size_implINSt3__16vectorIdNS3_9allocatorIdEEEES7_E9same_sizeERKS7_SA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1483:
	.cfi_def_cfa_offset 16
Ltmp1484:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1485:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost7numeric6odeint21same_size_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE9same_sizeERKS7_SA_
	andb	$1, %al
	movzbl	%al, %eax
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint21same_size_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE9same_sizeERKS7_SA_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint21same_size_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE9same_sizeERKS7_SA_
	.align	4, 0x90
__ZN5boost7numeric6odeint21same_size_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE9same_sizeERKS7_SA_: ## @_ZN5boost7numeric6odeint21same_size_impl_sfinaeINSt3__16vectorIdNS3_9allocatorIdEEEES7_vE9same_sizeERKS7_SA_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1486:
	.cfi_def_cfa_offset 16
Ltmp1487:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1488:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost4sizeINSt3__16vectorIdNS1_9allocatorIdEEEEEENS_10range_sizeIKT_E4typeERS8_
	movq	-16(%rbp), %rdi
	movq	%rax, -24(%rbp)         ## 8-byte Spill
	callq	__ZN5boost4sizeINSt3__16vectorIdNS1_9allocatorIdEEEEEENS_10range_sizeIKT_E4typeERS8_
	movq	-24(%rbp), %rsi         ## 8-byte Reload
	cmpq	%rax, %rsi
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %eax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint14get_unit_valueIdEENS1_6detail19get_unit_value_implIT_vE11result_typeERKS5_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint14get_unit_valueIdEENS1_6detail19get_unit_value_implIT_vE11result_typeERKS5_
	.align	4, 0x90
__ZN5boost7numeric6odeint14get_unit_valueIdEENS1_6detail19get_unit_value_implIT_vE11result_typeERKS5_: ## @_ZN5boost7numeric6odeint14get_unit_valueIdEENS1_6detail19get_unit_value_implIT_vE11result_typeERKS5_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1489:
	.cfi_def_cfa_offset 16
Ltmp1490:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1491:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint6detail19get_unit_value_implIdvE5valueERKd
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail19get_unit_value_implIdvE5valueERKd
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail19get_unit_value_implIdvE5valueERKd
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail19get_unit_value_implIdvE5valueERKd: ## @_ZN5boost7numeric6odeint6detail19get_unit_value_implIdvE5valueERKd
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1492:
	.cfi_def_cfa_offset 16
Ltmp1493:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1494:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movsd	(%rdi), %xmm0
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKS8_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKS8_
	.align	4, 0x90
__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKS8_: ## @_ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKS8_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1495:
	.cfi_def_cfa_offset 16
Ltmp1496:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1497:
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	leaq	-120(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rax, %rdi
	movq	%rsi, -232(%rbp)        ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC1Ev
	leaq	-136(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC1Ev
	leaq	-160(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC1Ev
	leaq	-112(%rbp), %rdi
	leaq	-120(%rbp), %rsi
	leaq	-136(%rbp), %rdx
	leaq	-160(%rbp), %rcx
	callq	__ZN5boost6fusion11make_vectorINS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEENS0_7vector3INS0_6detail17as_fusion_elementIT_E4typeENSC_IT0_E4typeENSC_IT1_E4typeEEERKSD_RKSG_RKSJ_
	leaq	-64(%rbp), %rdi
	leaq	-112(%rbp), %rsi
	callq	__ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC1INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE
	leaq	-192(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint18rk4_coefficients_bIdEC1Ev
	leaq	-224(%rbp), %rdi
	leaq	-192(%rbp), %rax
	movq	%rax, -240(%rbp)        ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint18rk4_coefficients_cIdEC1Ev
	leaq	-64(%rbp), %rsi
	leaq	-224(%rbp), %rax
	movq	-16(%rbp), %r8
	movq	-232(%rbp), %rdi        ## 8-byte Reload
	movq	-240(%rbp), %rdx        ## 8-byte Reload
	movq	%rax, %rcx
	callq	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSE_IdLm2EEEKNSE_IdLm3EEEEERKNSE_IdLm4EEESQ_RKS8_
	addq	$240, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion11make_vectorINS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEENS0_7vector3INS0_6detail17as_fusion_elementIT_E4typeENSC_IT0_E4typeENSC_IT1_E4typeEEERKSD_RKSG_RKSJ_
	.weak_def_can_be_hidden	__ZN5boost6fusion11make_vectorINS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEENS0_7vector3INS0_6detail17as_fusion_elementIT_E4typeENSC_IT0_E4typeENSC_IT1_E4typeEEERKSD_RKSG_RKSJ_
	.align	4, 0x90
__ZN5boost6fusion11make_vectorINS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEENS0_7vector3INS0_6detail17as_fusion_elementIT_E4typeENSC_IT0_E4typeENSC_IT1_E4typeEEERKSD_RKSG_RKSJ_: ## @_ZN5boost6fusion11make_vectorINS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEENS0_7vector3INS0_6detail17as_fusion_elementIT_E4typeENSC_IT0_E4typeENSC_IT1_E4typeEEERKSD_RKSG_RKSJ_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1498:
	.cfi_def_cfa_offset 16
Ltmp1499:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1500:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, %rax
	movq	%rsi, -8(%rbp)
	movq	%rdx, -16(%rbp)
	movq	%rcx, -24(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	callq	__ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC1ERKS5_RKS7_RKS9_
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC1Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC1Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC1Ev: ## @_ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1501:
	.cfi_def_cfa_offset 16
Ltmp1502:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1503:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC1Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC1Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC1Ev: ## @_ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1504:
	.cfi_def_cfa_offset 16
Ltmp1505:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1506:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC1Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC1Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC1Ev: ## @_ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1507:
	.cfi_def_cfa_offset 16
Ltmp1508:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1509:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC1INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC1INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE
	.align	4, 0x90
__ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC1INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE: ## @_ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC1INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1510:
	.cfi_def_cfa_offset 16
Ltmp1511:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1512:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	callq	__ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint18rk4_coefficients_bIdEC1Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint18rk4_coefficients_bIdEC1Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint18rk4_coefficients_bIdEC1Ev: ## @_ZN5boost7numeric6odeint18rk4_coefficients_bIdEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1513:
	.cfi_def_cfa_offset 16
Ltmp1514:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1515:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint18rk4_coefficients_bIdEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint18rk4_coefficients_cIdEC1Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint18rk4_coefficients_cIdEC1Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint18rk4_coefficients_cIdEC1Ev: ## @_ZN5boost7numeric6odeint18rk4_coefficients_cIdEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1516:
	.cfi_def_cfa_offset 16
Ltmp1517:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1518:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint18rk4_coefficients_cIdEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSE_IdLm2EEEKNSE_IdLm3EEEEERKNSE_IdLm4EEESQ_RKS8_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSE_IdLm2EEEKNSE_IdLm3EEEEERKNSE_IdLm4EEESQ_RKS8_
	.align	4, 0x90
__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSE_IdLm2EEEKNSE_IdLm3EEEEERKNSE_IdLm4EEESQ_RKS8_: ## @_ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSE_IdLm2EEEKNSE_IdLm3EEEEERKNSE_IdLm4EEESQ_RKS8_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin375:
	.cfi_lsda 16, Lexception375
## BB#0:
	pushq	%rbp
Ltmp1524:
	.cfi_def_cfa_offset 16
Ltmp1525:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1526:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdi
	movq	%r8, %rsi
	movq	%rcx, -64(%rbp)         ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKS9_
	movq	-64(%rbp), %rcx         ## 8-byte Reload
	addq	$32, %rcx
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi
Ltmp1519:
	movq	%rdi, -72(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	movq	-72(%rbp), %rcx         ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_
Ltmp1520:
	jmp	LBB375_1
LBB375_1:
	movq	-64(%rbp), %rax         ## 8-byte Reload
	addq	$144, %rax
Ltmp1521:
	movq	%rax, %rdi
	callq	__ZN5boost7numeric6odeint17initially_resizerC1Ev
Ltmp1522:
	jmp	LBB375_2
LBB375_2:
	movq	-64(%rbp), %rax         ## 8-byte Reload
	addq	$152, %rax
	movq	%rax, %rdi
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1Ev
	movq	-64(%rbp), %rax         ## 8-byte Reload
	addq	$176, %rax
	movq	%rax, %rdi
	addq	$72, %rdi
	movq	%rdi, -80(%rbp)         ## 8-byte Spill
	movq	%rax, -88(%rbp)         ## 8-byte Spill
LBB375_3:                               ## =>This Inner Loop Header: Depth=1
	movq	-88(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1Ev
	movq	-96(%rbp), %rax         ## 8-byte Reload
	addq	$24, %rax
	movq	-80(%rbp), %rdi         ## 8-byte Reload
	cmpq	%rdi, %rax
	movq	%rax, -88(%rbp)         ## 8-byte Spill
	jne	LBB375_3
## BB#4:
	addq	$96, %rsp
	popq	%rbp
	retq
LBB375_5:
Ltmp1523:
	movl	%edx, %ecx
	movq	%rax, -48(%rbp)
	movl	%ecx, -52(%rbp)
	movq	-64(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_ED2Ev
## BB#6:
	movq	-48(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end375:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table375:
Lexception375:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset341 = Leh_func_begin375-Leh_func_begin375 ## >> Call Site 1 <<
	.long	Lset341
Lset342 = Ltmp1519-Leh_func_begin375    ##   Call between Leh_func_begin375 and Ltmp1519
	.long	Lset342
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset343 = Ltmp1519-Leh_func_begin375    ## >> Call Site 2 <<
	.long	Lset343
Lset344 = Ltmp1522-Ltmp1519             ##   Call between Ltmp1519 and Ltmp1522
	.long	Lset344
Lset345 = Ltmp1523-Leh_func_begin375    ##     jumps to Ltmp1523
	.long	Lset345
	.byte	0                       ##   On action: cleanup
Lset346 = Ltmp1522-Leh_func_begin375    ## >> Call Site 3 <<
	.long	Lset346
Lset347 = Leh_func_end375-Ltmp1522      ##   Call between Ltmp1522 and Leh_func_end375
	.long	Lset347
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKS9_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKS9_
	.align	4, 0x90
__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKS9_: ## @_ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_EC2ERKS9_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1527:
	.cfi_def_cfa_offset 16
Ltmp1528:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1529:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	%rsi, %rdi
	movq	-16(%rbp), %rax
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movq	%rax, %rsi
	callq	__ZN5boost7numeric6odeint20algebra_stepper_baseINS1_13range_algebraENS1_18default_operationsEEC2ERKS3_
	movq	-24(%rbp), %rax         ## 8-byte Reload
	addq	$1, %rax
	movq	%rax, %rdi
	callq	__ZN5boost7numeric6odeint17initially_resizerC1Ev
	movq	-24(%rbp), %rax         ## 8-byte Reload
	addq	$8, %rax
	movq	%rax, %rdi
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1Ev
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1530:
	.cfi_def_cfa_offset 16
Ltmp1531:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1532:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint17initially_resizerC1Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint17initially_resizerC1Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint17initially_resizerC1Ev: ## @_ZN5boost7numeric6odeint17initially_resizerC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1533:
	.cfi_def_cfa_offset 16
Ltmp1534:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1535:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint17initially_resizerC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1Ev: ## @_ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1536:
	.cfi_def_cfa_offset 16
Ltmp1537:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1538:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2Ev: ## @_ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1539:
	.cfi_def_cfa_offset 16
Ltmp1540:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1541:
	.cfi_def_cfa_register %rbp
	leaq	-32(%rbp), %rax
	leaq	-56(%rbp), %rcx
	movq	%rdi, -112(%rbp)
	movq	-112(%rbp), %rdi
	movq	%rdi, -104(%rbp)
	movq	-104(%rbp), %rdi
	movq	%rdi, -96(%rbp)
	movq	-96(%rbp), %rdi
	movq	%rdi, -88(%rbp)
	movq	-88(%rbp), %rdi
	movq	%rdi, %rdx
	movq	%rdx, -80(%rbp)
	movq	$0, (%rdi)
	movq	$0, 8(%rdi)
	addq	$16, %rdi
	movq	%rdi, -64(%rbp)
	movq	$0, -72(%rbp)
	movq	-64(%rbp), %rdx
	movq	-72(%rbp), %rdi
	movq	%rdx, -48(%rbp)
	movq	%rdi, -56(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rcx, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	movq	%rdx, -16(%rbp)
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rcx)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint17initially_resizerC2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint17initially_resizerC2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint17initially_resizerC2Ev: ## @_ZN5boost7numeric6odeint17initially_resizerC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1542:
	.cfi_def_cfa_offset 16
Ltmp1543:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1544:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movb	$0, (%rdi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEEC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNS9_IdLm2EEEKNS9_IdLm3EEEEERKNS9_IdLm4EEESL_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1545:
	.cfi_def_cfa_offset 16
Ltmp1546:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1547:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC1ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1548:
	.cfi_def_cfa_offset 16
Ltmp1549:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1550:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vectorC2ERKNS_6fusion7vector3IKNS_5arrayIdLm1EEEKNSA_IdLm2EEEKNSA_IdLm3EEEEERKNSA_IdLm4EEESM_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1551:
	.cfi_def_cfa_offset 16
Ltmp1552:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1553:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	movq	%rdx, %rdi
	movq	%rcx, -64(%rbp)         ## 8-byte Spill
	callq	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev
	leaq	-56(%rbp), %rdi
	movq	-64(%rbp), %rcx         ## 8-byte Reload
	movq	-16(%rbp), %rdx
	movq	-32(%rbp), %rsi
	movq	%rsi, -72(%rbp)         ## 8-byte Spill
	movq	%rcx, %rsi
	movq	-72(%rbp), %rcx         ## 8-byte Reload
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC1ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE
	leaq	-56(%rbp), %rcx
	xorl	%eax, %eax
	movl	%eax, %edi
	movq	(%rcx), %rdx
	movq	%rdx, (%rsp)
	movq	8(%rcx), %rdx
	movq	%rdx, 8(%rsp)
	movq	16(%rcx), %rcx
	movq	%rcx, 16(%rsp)
	callq	__ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS5_13range_algebraENS5_18default_operationsEE12stage_vector12do_insertionEEEvT0_PT_
	movl	$3, %eax
	movl	%eax, %esi
	movq	-32(%rbp), %rdi
	callq	__ZNK5boost5arrayIdLm4EEixEm
	movsd	(%rax), %xmm0
	movq	-64(%rbp), %rdi         ## 8-byte Reload
	movsd	%xmm0, -80(%rbp)        ## 8-byte Spill
	callq	__ZN5boost6fusion4at_cILi3ENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of4at_cISC_XT_EEEE4typeERSC_
	movsd	-80(%rbp), %xmm0        ## 8-byte Reload
	movsd	%xmm0, (%rax)
	movq	-64(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN5boost6fusion4at_cILi3ENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of4at_cISC_XT_EEEE4typeERSC_
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	%rdx, 8(%rax)
	movq	8(%rcx), %rdx
	movq	%rdx, 16(%rax)
	movq	16(%rcx), %rdx
	movq	%rdx, 24(%rax)
	movq	24(%rcx), %rcx
	movq	%rcx, 32(%rax)
	addq	$112, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev
	.align	4, 0x90
__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev: ## @_ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1554:
	.cfi_def_cfa_offset 16
Ltmp1555:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1556:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS5_13range_algebraENS5_18default_operationsEE12stage_vector12do_insertionEEEvT0_PT_
	.weak_def_can_be_hidden	__ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS5_13range_algebraENS5_18default_operationsEE12stage_vector12do_insertionEEEvT0_PT_
	.align	4, 0x90
__ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS5_13range_algebraENS5_18default_operationsEE12stage_vector12do_insertionEEEvT0_PT_: ## @_ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS5_13range_algebraENS5_18default_operationsEE12stage_vector12do_insertionEEEvT0_PT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1557:
	.cfi_def_cfa_offset 16
Ltmp1558:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1559:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	16(%rbp), %rax
	leaq	-32(%rbp), %rcx
	xorl	%edx, %edx
	movl	%edx, %esi
	movq	%rdi, -8(%rbp)
	movq	(%rax), %rdi
	movq	%rdi, -32(%rbp)
	movq	8(%rax), %rdi
	movq	%rdi, -24(%rbp)
	movq	16(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	(%rcx), %rax
	movq	%rax, (%rsp)
	movq	8(%rcx), %rax
	movq	%rax, 8(%rsp)
	movq	16(%rcx), %rax
	movq	%rax, 16(%rsp)
	movq	%rsi, %rdi
	callq	__ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS0_8identityIN4mpl_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS9_13range_algebraENS9_18default_operationsEE12stage_vector12do_insertionEEEvT1_PT_PT0_
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC1ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC1ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC1ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC1ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1560:
	.cfi_def_cfa_offset 16
Ltmp1561:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1562:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC2ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion4at_cILi3ENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of4at_cISC_XT_EEEE4typeERSC_
	.weak_def_can_be_hidden	__ZN5boost6fusion4at_cILi3ENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of4at_cISC_XT_EEEE4typeERSC_
	.align	4, 0x90
__ZN5boost6fusion4at_cILi3ENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of4at_cISC_XT_EEEE4typeERSC_: ## @_ZN5boost6fusion4at_cILi3ENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS3_13range_algebraENS3_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of4at_cISC_XT_EEEE4typeERSC_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1563:
	.cfi_def_cfa_offset 16
Ltmp1564:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1565:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion2atIN4mpl_4int_ILi3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS6_13range_algebraENS6_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISF_T_EEE4typeERSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion2atIN4mpl_4int_ILi3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS6_13range_algebraENS6_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISF_T_EEE4typeERSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion2atIN4mpl_4int_ILi3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS6_13range_algebraENS6_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISF_T_EEE4typeERSF_
	.align	4, 0x90
__ZN5boost6fusion2atIN4mpl_4int_ILi3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS6_13range_algebraENS6_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISF_T_EEE4typeERSF_: ## @_ZN5boost6fusion2atIN4mpl_4int_ILi3EEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS6_13range_algebraENS6_18default_operationsEE12stage_vectorEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISF_T_EEE4typeERSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1566:
	.cfi_def_cfa_offset 16
Ltmp1567:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1568:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEN4mpl_4int_ILi3EEEE4callERSD_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEN4mpl_4int_ILi3EEEE4callERSD_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEN4mpl_4int_ILi3EEEE4callERSD_
	.align	4, 0x90
__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEN4mpl_4int_ILi3EEEE4callERSD_: ## @_ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS7_13range_algebraENS7_18default_operationsEE12stage_vectorEN4mpl_4int_ILi3EEEE4callERSD_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1569:
	.cfi_def_cfa_offset 16
Ltmp1570:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1571:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE
	.align	4, 0x90
__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE: ## @_ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi3EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1572:
	.cfi_def_cfa_offset 16
Ltmp1573:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1574:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	addq	$72, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC2ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC2ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE
	.align	4, 0x90
__ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC2ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE: ## @_ZN5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionC2ERNS_6fusion7vector4INS2_5stageIdLm1EEENSB_IdLm2EEENSB_IdLm3EEENSB_IdLm4EEEEERKNS9_7vector3IKNS_5arrayIdLm1EEEKNSJ_IdLm2EEEKNSJ_IdLm3EEEEERKNSJ_IdLm4EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1575:
	.cfi_def_cfa_offset 16
Ltmp1576:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1577:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	%rdx, (%rcx)
	movq	-24(%rbp), %rdx
	movq	%rdx, 8(%rcx)
	movq	-32(%rbp), %rdx
	movq	%rdx, 16(%rcx)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS0_8identityIN4mpl_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS9_13range_algebraENS9_18default_operationsEE12stage_vector12do_insertionEEEvT1_PT_PT0_
	.weak_def_can_be_hidden	__ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS0_8identityIN4mpl_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS9_13range_algebraENS9_18default_operationsEE12stage_vector12do_insertionEEEvT1_PT_PT0_
	.align	4, 0x90
__ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS0_8identityIN4mpl_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS9_13range_algebraENS9_18default_operationsEE12stage_vector12do_insertionEEEvT1_PT_PT0_: ## @_ZN5boost3mpl8for_eachINS0_7range_cImLm0ELm3EEENS0_8identityIN4mpl_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS9_13range_algebraENS9_18default_operationsEE12stage_vector12do_insertionEEEvT1_PT_PT0_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1578:
	.cfi_def_cfa_offset 16
Ltmp1579:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1580:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	leaq	16(%rbp), %rax
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	leaq	-40(%rbp), %r8
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	(%rax), %rsi
	movq	%rsi, -40(%rbp)
	movq	8(%rax), %rsi
	movq	%rsi, -32(%rbp)
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	%rdx, %rdi
	movq	%rdx, %rsi
	movq	(%r8), %rax
	movq	%rax, (%rsp)
	movq	8(%r8), %rax
	movq	%rax, 8(%rsp)
	movq	16(%r8), %rax
	movq	%rax, 16(%rsp)
	callq	__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm0EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm0EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.weak_def_can_be_hidden	__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm0EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.align	4, 0x90
__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm0EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_: ## @_ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm0EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin394:
	.cfi_lsda 16, Lexception394
## BB#0:
	pushq	%rbp
Ltmp1590:
	.cfi_def_cfa_offset 16
Ltmp1591:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1592:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rdi
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC1Ev
Ltmp1581:
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	-80(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN5boost3mpl3aux6unwrapINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vector12do_insertionEEERT_SD_l
Ltmp1582:
	movq	%rax, -88(%rbp)         ## 8-byte Spill
	jmp	LBB394_1
LBB394_1:
Ltmp1583:
	leaq	-32(%rbp), %rdi
	callq	__ZN5boost3getIN4mpl_10integral_cImLm0EEEEERT_RNS_17value_initializedIS4_EE
Ltmp1584:
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	jmp	LBB394_2
LBB394_2:
Ltmp1585:
	movq	-88(%rbp), %rdi         ## 8-byte Reload
	callq	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm0EEEEEvT_
Ltmp1586:
	jmp	LBB394_3
LBB394_3:
	movq	-80(%rbp), %rax         ## 8-byte Reload
	movq	16(%rax), %rcx
	movq	%rcx, -56(%rbp)
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	movq	%rdx, -64(%rbp)
	movq	%rcx, -72(%rbp)
Ltmp1587:
	movq	-56(%rbp), %rcx
	movq	%rsp, %rdx
	movq	%rcx, 16(%rdx)
	movq	-72(%rbp), %rcx
	movq	-64(%rbp), %rsi
	movq	%rsi, 8(%rdx)
	movq	%rcx, (%rdx)
	xorl	%edi, %edi
	movl	%edi, %ecx
	movq	%rcx, %rdi
	movq	%rcx, %rsi
	movq	%rcx, %rdx
	callq	__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm1EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
Ltmp1588:
	jmp	LBB394_4
LBB394_4:
	leaq	-32(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED1Ev
	addq	$128, %rsp
	popq	%rbp
	retq
LBB394_5:
Ltmp1589:
	leaq	-32(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED1Ev
## BB#6:
	movq	-40(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end394:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table394:
Lexception394:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset348 = Leh_func_begin394-Leh_func_begin394 ## >> Call Site 1 <<
	.long	Lset348
Lset349 = Ltmp1581-Leh_func_begin394    ##   Call between Leh_func_begin394 and Ltmp1581
	.long	Lset349
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset350 = Ltmp1581-Leh_func_begin394    ## >> Call Site 2 <<
	.long	Lset350
Lset351 = Ltmp1588-Ltmp1581             ##   Call between Ltmp1581 and Ltmp1588
	.long	Lset351
Lset352 = Ltmp1589-Leh_func_begin394    ##     jumps to Ltmp1589
	.long	Lset352
	.byte	0                       ##   On action: cleanup
Lset353 = Ltmp1588-Leh_func_begin394    ## >> Call Site 3 <<
	.long	Lset353
Lset354 = Leh_func_end394-Ltmp1588      ##   Call between Ltmp1588 and Leh_func_end394
	.long	Lset354
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC1Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC1Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC1Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1593:
	.cfi_def_cfa_offset 16
Ltmp1594:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1595:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3mpl3aux6unwrapINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vector12do_insertionEEERT_SD_l
	.weak_def_can_be_hidden	__ZN5boost3mpl3aux6unwrapINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vector12do_insertionEEERT_SD_l
	.align	4, 0x90
__ZN5boost3mpl3aux6unwrapINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vector12do_insertionEEERT_SD_l: ## @_ZN5boost3mpl3aux6unwrapINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vector12do_insertionEEERT_SD_l
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1596:
	.cfi_def_cfa_offset 16
Ltmp1597:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1598:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm0EEEEEvT_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm0EEEEEvT_
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm0EEEEEvT_: ## @_ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm0EEEEEvT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1599:
	.cfi_def_cfa_offset 16
Ltmp1600:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1601:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	16(%rdi), %rcx
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	callq	__ZNK5boost5arrayIdLm4EEixEm
	movsd	(%rax), %xmm0
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	(%rax), %rdi
	movsd	%xmm0, -32(%rbp)        ## 8-byte Spill
	callq	__ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	movsd	-32(%rbp), %xmm0        ## 8-byte Reload
	movsd	%xmm0, (%rax)
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	(%rax), %rdi
	callq	__ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	movq	8(%rcx), %rdi
	movq	%rax, -40(%rbp)         ## 8-byte Spill
	callq	__ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	movq	(%rax), %rax
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	movq	%rax, 8(%rcx)
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3getIN4mpl_10integral_cImLm0EEEEERT_RNS_17value_initializedIS4_EE
	.weak_def_can_be_hidden	__ZN5boost3getIN4mpl_10integral_cImLm0EEEEERT_RNS_17value_initializedIS4_EE
	.align	4, 0x90
__ZN5boost3getIN4mpl_10integral_cImLm0EEEEERT_RNS_17value_initializedIS4_EE: ## @_ZN5boost3getIN4mpl_10integral_cImLm0EEEEERT_RNS_17value_initializedIS4_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1602:
	.cfi_def_cfa_offset 16
Ltmp1603:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1604:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEE4dataEv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm1EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.weak_def_can_be_hidden	__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm1EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.align	4, 0x90
__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm1EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_: ## @_ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm1EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin399:
	.cfi_lsda 16, Lexception399
## BB#0:
	pushq	%rbp
Ltmp1614:
	.cfi_def_cfa_offset 16
Ltmp1615:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1616:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rdi
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC1Ev
Ltmp1605:
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	-80(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN5boost3mpl3aux6unwrapINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vector12do_insertionEEERT_SD_l
Ltmp1606:
	movq	%rax, -88(%rbp)         ## 8-byte Spill
	jmp	LBB399_1
LBB399_1:
Ltmp1607:
	leaq	-32(%rbp), %rdi
	callq	__ZN5boost3getIN4mpl_10integral_cImLm1EEEEERT_RNS_17value_initializedIS4_EE
Ltmp1608:
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	jmp	LBB399_2
LBB399_2:
Ltmp1609:
	movq	-88(%rbp), %rdi         ## 8-byte Reload
	callq	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm1EEEEEvT_
Ltmp1610:
	jmp	LBB399_3
LBB399_3:
	movq	-80(%rbp), %rax         ## 8-byte Reload
	movq	16(%rax), %rcx
	movq	%rcx, -56(%rbp)
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	movq	%rdx, -64(%rbp)
	movq	%rcx, -72(%rbp)
Ltmp1611:
	movq	-56(%rbp), %rcx
	movq	%rsp, %rdx
	movq	%rcx, 16(%rdx)
	movq	-72(%rbp), %rcx
	movq	-64(%rbp), %rsi
	movq	%rsi, 8(%rdx)
	movq	%rcx, (%rdx)
	xorl	%edi, %edi
	movl	%edi, %ecx
	movq	%rcx, %rdi
	movq	%rcx, %rsi
	movq	%rcx, %rdx
	callq	__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm2EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
Ltmp1612:
	jmp	LBB399_4
LBB399_4:
	leaq	-32(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED1Ev
	addq	$128, %rsp
	popq	%rbp
	retq
LBB399_5:
Ltmp1613:
	leaq	-32(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED1Ev
## BB#6:
	movq	-40(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end399:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table399:
Lexception399:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset355 = Leh_func_begin399-Leh_func_begin399 ## >> Call Site 1 <<
	.long	Lset355
Lset356 = Ltmp1605-Leh_func_begin399    ##   Call between Leh_func_begin399 and Ltmp1605
	.long	Lset356
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset357 = Ltmp1605-Leh_func_begin399    ## >> Call Site 2 <<
	.long	Lset357
Lset358 = Ltmp1612-Ltmp1605             ##   Call between Ltmp1605 and Ltmp1612
	.long	Lset358
Lset359 = Ltmp1613-Leh_func_begin399    ##     jumps to Ltmp1613
	.long	Lset359
	.byte	0                       ##   On action: cleanup
Lset360 = Ltmp1612-Leh_func_begin399    ## >> Call Site 3 <<
	.long	Lset360
Lset361 = Leh_func_end399-Ltmp1612      ##   Call between Ltmp1612 and Leh_func_end399
	.long	Lset361
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED1Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED1Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED1Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1617:
	.cfi_def_cfa_offset 16
Ltmp1618:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1619:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED2Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED2Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED2Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1620:
	.cfi_def_cfa_offset 16
Ltmp1621:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1622:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED1Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED1Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED1Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1623:
	.cfi_def_cfa_offset 16
Ltmp1624:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1625:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED2Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED2Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED2Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm0EEEED2Ev
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin403:
	.cfi_lsda 16, Lexception403
## BB#0:
	pushq	%rbp
Ltmp1629:
	.cfi_def_cfa_offset 16
Ltmp1630:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1631:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
Ltmp1626:
	callq	__ZNK5boost11initializedIN4mpl_10integral_cImLm0EEEE15wrapper_addressEv
Ltmp1627:
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	jmp	LBB403_1
LBB403_1:
	addq	$32, %rsp
	popq	%rbp
	retq
LBB403_2:
Ltmp1628:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -20(%rbp)         ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end403:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table403:
Lexception403:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	21                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	13                      ## Call site table length
Lset362 = Ltmp1626-Leh_func_begin403    ## >> Call Site 1 <<
	.long	Lset362
Lset363 = Ltmp1627-Ltmp1626             ##   Call between Ltmp1626 and Ltmp1627
	.long	Lset363
Lset364 = Ltmp1628-Leh_func_begin403    ##     jumps to Ltmp1628
	.long	Lset364
	.byte	1                       ##   On action: 1
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNK5boost11initializedIN4mpl_10integral_cImLm0EEEE15wrapper_addressEv
	.weak_def_can_be_hidden	__ZNK5boost11initializedIN4mpl_10integral_cImLm0EEEE15wrapper_addressEv
	.align	4, 0x90
__ZNK5boost11initializedIN4mpl_10integral_cImLm0EEEE15wrapper_addressEv: ## @_ZNK5boost11initializedIN4mpl_10integral_cImLm0EEEE15wrapper_addressEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1632:
	.cfi_def_cfa_offset 16
Ltmp1633:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1634:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC1Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC1Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC1Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1635:
	.cfi_def_cfa_offset 16
Ltmp1636:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1637:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm1EEEEEvT_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm1EEEEEvT_
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm1EEEEEvT_: ## @_ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm1EEEEEvT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1638:
	.cfi_def_cfa_offset 16
Ltmp1639:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1640:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1, %eax
	movl	%eax, %esi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	16(%rdi), %rcx
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	callq	__ZNK5boost5arrayIdLm4EEixEm
	movsd	(%rax), %xmm0
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	(%rax), %rdi
	movsd	%xmm0, -32(%rbp)        ## 8-byte Spill
	callq	__ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	movsd	-32(%rbp), %xmm0        ## 8-byte Reload
	movsd	%xmm0, (%rax)
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	(%rax), %rdi
	callq	__ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	movq	8(%rcx), %rdi
	movq	%rax, -40(%rbp)         ## 8-byte Spill
	callq	__ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	movq	(%rax), %rcx
	movq	-40(%rbp), %rsi         ## 8-byte Reload
	movq	%rcx, 8(%rsi)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsi)
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3getIN4mpl_10integral_cImLm1EEEEERT_RNS_17value_initializedIS4_EE
	.weak_def_can_be_hidden	__ZN5boost3getIN4mpl_10integral_cImLm1EEEEERT_RNS_17value_initializedIS4_EE
	.align	4, 0x90
__ZN5boost3getIN4mpl_10integral_cImLm1EEEEERT_RNS_17value_initializedIS4_EE: ## @_ZN5boost3getIN4mpl_10integral_cImLm1EEEEERT_RNS_17value_initializedIS4_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1641:
	.cfi_def_cfa_offset 16
Ltmp1642:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1643:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEE4dataEv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm2EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.weak_def_can_be_hidden	__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm2EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.align	4, 0x90
__ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm2EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_: ## @_ZN5boost3mpl3aux13for_each_implILb0EE7executeINS0_6r_iterIN4mpl_10integral_cImLm2EEEEENS5_INS7_ImLm3EEEEENS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSG_13range_algebraENSG_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin408:
	.cfi_lsda 16, Lexception408
## BB#0:
	pushq	%rbp
Ltmp1653:
	.cfi_def_cfa_offset 16
Ltmp1654:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1655:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	leaq	16(%rbp), %rax
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	leaq	-32(%rbp), %rdi
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC1Ev
Ltmp1644:
	xorl	%ecx, %ecx
	movl	%ecx, %esi
	movq	-80(%rbp), %rdi         ## 8-byte Reload
	callq	__ZN5boost3mpl3aux6unwrapINS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNS4_13range_algebraENS4_18default_operationsEE12stage_vector12do_insertionEEERT_SD_l
Ltmp1645:
	movq	%rax, -88(%rbp)         ## 8-byte Spill
	jmp	LBB408_1
LBB408_1:
Ltmp1646:
	leaq	-32(%rbp), %rdi
	callq	__ZN5boost3getIN4mpl_10integral_cImLm2EEEEERT_RNS_17value_initializedIS4_EE
Ltmp1647:
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	jmp	LBB408_2
LBB408_2:
Ltmp1648:
	movq	-88(%rbp), %rdi         ## 8-byte Reload
	callq	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm2EEEEEvT_
Ltmp1649:
	jmp	LBB408_3
LBB408_3:
	movq	-80(%rbp), %rax         ## 8-byte Reload
	movq	16(%rax), %rcx
	movq	%rcx, -56(%rbp)
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	movq	%rdx, -64(%rbp)
	movq	%rcx, -72(%rbp)
Ltmp1650:
	movq	-56(%rbp), %rcx
	movq	%rsp, %rdx
	movq	%rcx, 16(%rdx)
	movq	-72(%rbp), %rcx
	movq	-64(%rbp), %rsi
	movq	%rsi, 8(%rdx)
	movq	%rcx, (%rdx)
	xorl	%edi, %edi
	movl	%edi, %ecx
	movq	%rcx, %rdi
	movq	%rcx, %rsi
	movq	%rcx, %rdx
	callq	__ZN5boost3mpl3aux13for_each_implILb1EE7executeINS0_6r_iterIN4mpl_10integral_cImLm3EEEEES9_NS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSE_13range_algebraENSE_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
Ltmp1651:
	jmp	LBB408_4
LBB408_4:
	leaq	-32(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED1Ev
	addq	$128, %rsp
	popq	%rbp
	retq
LBB408_5:
Ltmp1652:
	leaq	-32(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -40(%rbp)
	movl	%ecx, -44(%rbp)
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED1Ev
## BB#6:
	movq	-40(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end408:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table408:
Lexception408:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset365 = Leh_func_begin408-Leh_func_begin408 ## >> Call Site 1 <<
	.long	Lset365
Lset366 = Ltmp1644-Leh_func_begin408    ##   Call between Leh_func_begin408 and Ltmp1644
	.long	Lset366
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset367 = Ltmp1644-Leh_func_begin408    ## >> Call Site 2 <<
	.long	Lset367
Lset368 = Ltmp1651-Ltmp1644             ##   Call between Ltmp1644 and Ltmp1651
	.long	Lset368
Lset369 = Ltmp1652-Leh_func_begin408    ##     jumps to Ltmp1652
	.long	Lset369
	.byte	0                       ##   On action: cleanup
Lset370 = Ltmp1651-Leh_func_begin408    ## >> Call Site 3 <<
	.long	Lset370
Lset371 = Leh_func_end408-Ltmp1651      ##   Call between Ltmp1651 and Leh_func_end408
	.long	Lset371
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED1Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED1Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED1Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1656:
	.cfi_def_cfa_offset 16
Ltmp1657:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1658:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED2Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED2Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED2Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1659:
	.cfi_def_cfa_offset 16
Ltmp1660:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1661:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED1Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED1Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED1Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1662:
	.cfi_def_cfa_offset 16
Ltmp1663:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1664:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED2Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED2Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED2Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm1EEEED2Ev
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin412:
	.cfi_lsda 16, Lexception412
## BB#0:
	pushq	%rbp
Ltmp1668:
	.cfi_def_cfa_offset 16
Ltmp1669:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1670:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
Ltmp1665:
	callq	__ZNK5boost11initializedIN4mpl_10integral_cImLm1EEEE15wrapper_addressEv
Ltmp1666:
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	jmp	LBB412_1
LBB412_1:
	addq	$32, %rsp
	popq	%rbp
	retq
LBB412_2:
Ltmp1667:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -20(%rbp)         ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end412:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table412:
Lexception412:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	21                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	13                      ## Call site table length
Lset372 = Ltmp1665-Leh_func_begin412    ## >> Call Site 1 <<
	.long	Lset372
Lset373 = Ltmp1666-Ltmp1665             ##   Call between Ltmp1665 and Ltmp1666
	.long	Lset373
Lset374 = Ltmp1667-Leh_func_begin412    ##     jumps to Ltmp1667
	.long	Lset374
	.byte	1                       ##   On action: 1
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNK5boost11initializedIN4mpl_10integral_cImLm1EEEE15wrapper_addressEv
	.weak_def_can_be_hidden	__ZNK5boost11initializedIN4mpl_10integral_cImLm1EEEE15wrapper_addressEv
	.align	4, 0x90
__ZNK5boost11initializedIN4mpl_10integral_cImLm1EEEE15wrapper_addressEv: ## @_ZNK5boost11initializedIN4mpl_10integral_cImLm1EEEE15wrapper_addressEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1671:
	.cfi_def_cfa_offset 16
Ltmp1672:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1673:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC1Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC1Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC1Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1674:
	.cfi_def_cfa_offset 16
Ltmp1675:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1676:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm2EEEEEvT_
	.weak_def_can_be_hidden	__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm2EEEEEvT_
	.align	4, 0x90
__ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm2EEEEEvT_: ## @_ZNK5boost7numeric6odeint6detail20generic_rk_algorithmILm4EdNS1_13range_algebraENS1_18default_operationsEE12stage_vector12do_insertionclIN4mpl_10integral_cImLm2EEEEEvT_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1677:
	.cfi_def_cfa_offset 16
Ltmp1678:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1679:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2, %eax
	movl	%eax, %esi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	16(%rdi), %rcx
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	callq	__ZNK5boost5arrayIdLm4EEixEm
	movsd	(%rax), %xmm0
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	(%rax), %rdi
	movsd	%xmm0, -32(%rbp)        ## 8-byte Spill
	callq	__ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	movsd	-32(%rbp), %xmm0        ## 8-byte Reload
	movsd	%xmm0, (%rax)
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	(%rax), %rdi
	callq	__ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	movq	8(%rcx), %rdi
	movq	%rax, -40(%rbp)         ## 8-byte Spill
	callq	__ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	movq	(%rax), %rcx
	movq	-40(%rbp), %rsi         ## 8-byte Reload
	movq	%rcx, 8(%rsi)
	movq	8(%rax), %rcx
	movq	%rcx, 16(%rsi)
	movq	16(%rax), %rax
	movq	%rax, 24(%rsi)
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3getIN4mpl_10integral_cImLm2EEEEERT_RNS_17value_initializedIS4_EE
	.weak_def_can_be_hidden	__ZN5boost3getIN4mpl_10integral_cImLm2EEEEERT_RNS_17value_initializedIS4_EE
	.align	4, 0x90
__ZN5boost3getIN4mpl_10integral_cImLm2EEEEERT_RNS_17value_initializedIS4_EE: ## @_ZN5boost3getIN4mpl_10integral_cImLm2EEEEERT_RNS_17value_initializedIS4_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1680:
	.cfi_def_cfa_offset 16
Ltmp1681:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1682:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEE4dataEv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost3mpl3aux13for_each_implILb1EE7executeINS0_6r_iterIN4mpl_10integral_cImLm3EEEEES9_NS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSE_13range_algebraENSE_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.weak_def_can_be_hidden	__ZN5boost3mpl3aux13for_each_implILb1EE7executeINS0_6r_iterIN4mpl_10integral_cImLm3EEEEES9_NS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSE_13range_algebraENSE_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.align	4, 0x90
__ZN5boost3mpl3aux13for_each_implILb1EE7executeINS0_6r_iterIN4mpl_10integral_cImLm3EEEEES9_NS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSE_13range_algebraENSE_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_: ## @_ZN5boost3mpl3aux13for_each_implILb1EE7executeINS0_6r_iterIN4mpl_10integral_cImLm3EEEEES9_NS0_8identityINS6_2naEEENS_7numeric6odeint6detail20generic_rk_algorithmILm4EdNSE_13range_algebraENSE_18default_operationsEE12stage_vector12do_insertionEEEvPT_PT0_PT1_T2_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1683:
	.cfi_def_cfa_offset 16
Ltmp1684:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1685:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED1Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED1Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED1Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1686:
	.cfi_def_cfa_offset 16
Ltmp1687:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1688:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED2Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED2Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED2Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1689:
	.cfi_def_cfa_offset 16
Ltmp1690:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1691:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED1Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED1Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED1Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1692:
	.cfi_def_cfa_offset 16
Ltmp1693:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1694:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED2Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED2Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED2Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm2EEEED2Ev
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin421:
	.cfi_lsda 16, Lexception421
## BB#0:
	pushq	%rbp
Ltmp1698:
	.cfi_def_cfa_offset 16
Ltmp1699:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1700:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
Ltmp1695:
	callq	__ZNK5boost11initializedIN4mpl_10integral_cImLm2EEEE15wrapper_addressEv
Ltmp1696:
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	jmp	LBB421_1
LBB421_1:
	addq	$32, %rsp
	popq	%rbp
	retq
LBB421_2:
Ltmp1697:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -20(%rbp)         ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end421:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table421:
Lexception421:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	21                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	13                      ## Call site table length
Lset375 = Ltmp1695-Leh_func_begin421    ## >> Call Site 1 <<
	.long	Lset375
Lset376 = Ltmp1696-Ltmp1695             ##   Call between Ltmp1695 and Ltmp1696
	.long	Lset376
Lset377 = Ltmp1697-Leh_func_begin421    ##     jumps to Ltmp1697
	.long	Lset377
	.byte	1                       ##   On action: 1
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNK5boost11initializedIN4mpl_10integral_cImLm2EEEE15wrapper_addressEv
	.weak_def_can_be_hidden	__ZNK5boost11initializedIN4mpl_10integral_cImLm2EEEE15wrapper_addressEv
	.align	4, 0x90
__ZNK5boost11initializedIN4mpl_10integral_cImLm2EEEE15wrapper_addressEv: ## @_ZNK5boost11initializedIN4mpl_10integral_cImLm2EEEE15wrapper_addressEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1701:
	.cfi_def_cfa_offset 16
Ltmp1702:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1703:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEE4dataEv
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEE4dataEv
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEE4dataEv: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEE4dataEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1704:
	.cfi_def_cfa_offset 16
Ltmp1705:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1706:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE4dataEv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE4dataEv
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE4dataEv
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE4dataEv: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE4dataEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1707:
	.cfi_def_cfa_offset 16
Ltmp1708:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1709:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost11initializedIN4mpl_10integral_cImLm2EEEE15wrapper_addressEv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	.weak_def_can_be_hidden	__ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	.align	4, 0x90
__ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_: ## @_ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1710:
	.cfi_def_cfa_offset 16
Ltmp1711:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1712:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	.weak_def_can_be_hidden	__ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	.align	4, 0x90
__ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_: ## @_ZN5boost6fusion2atIN4mpl_10integral_cImLm2EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1713:
	.cfi_def_cfa_offset 16
Ltmp1714:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1715:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_
	.align	4, 0x90
__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_: ## @_ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1716:
	.cfi_def_cfa_offset 16
Ltmp1717:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1718:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	.align	4, 0x90
__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_: ## @_ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1719:
	.cfi_def_cfa_offset 16
Ltmp1720:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1721:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi2EEE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi2EEE
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi2EEE
	.align	4, 0x90
__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi2EEE: ## @_ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi2EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1722:
	.cfi_def_cfa_offset 16
Ltmp1723:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1724:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	addq	$24, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_
	.align	4, 0x90
__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_: ## @_ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm2EEEE4callERSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1725:
	.cfi_def_cfa_offset 16
Ltmp1726:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1727:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	.align	4, 0x90
__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_: ## @_ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm2EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1728:
	.cfi_def_cfa_offset 16
Ltmp1729:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1730:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE
	.align	4, 0x90
__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE: ## @_ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi2EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1731:
	.cfi_def_cfa_offset 16
Ltmp1732:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1733:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	addq	$40, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC2Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC2Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC2Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm2EEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1734:
	.cfi_def_cfa_offset 16
Ltmp1735:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1736:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC1Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC1Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC1Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1737:
	.cfi_def_cfa_offset 16
Ltmp1738:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1739:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC2Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC2Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC2Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm2EEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1740:
	.cfi_def_cfa_offset 16
Ltmp1741:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1742:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost11initializedIN4mpl_10integral_cImLm2EEEE15wrapper_addressEv
	cmpq	$0, %rax
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	je	LBB435_2
## BB#1:
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC1Ev
LBB435_2:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC1Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC1Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC1Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1743:
	.cfi_def_cfa_offset 16
Ltmp1744:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1745:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC2Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC2Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC2Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm2EEEE7wrapperC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1746:
	.cfi_def_cfa_offset 16
Ltmp1747:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1748:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEE4dataEv
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEE4dataEv
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEE4dataEv: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEE4dataEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1749:
	.cfi_def_cfa_offset 16
Ltmp1750:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1751:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE4dataEv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE4dataEv
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE4dataEv
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE4dataEv: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE4dataEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1752:
	.cfi_def_cfa_offset 16
Ltmp1753:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1754:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost11initializedIN4mpl_10integral_cImLm1EEEE15wrapper_addressEv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	.weak_def_can_be_hidden	__ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	.align	4, 0x90
__ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_: ## @_ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1755:
	.cfi_def_cfa_offset 16
Ltmp1756:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1757:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	.weak_def_can_be_hidden	__ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	.align	4, 0x90
__ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_: ## @_ZN5boost6fusion2atIN4mpl_10integral_cImLm1EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1758:
	.cfi_def_cfa_offset 16
Ltmp1759:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1760:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_
	.align	4, 0x90
__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_: ## @_ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1761:
	.cfi_def_cfa_offset 16
Ltmp1762:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1763:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	.align	4, 0x90
__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_: ## @_ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1764:
	.cfi_def_cfa_offset 16
Ltmp1765:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1766:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi1EEE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi1EEE
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi1EEE
	.align	4, 0x90
__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi1EEE: ## @_ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi1EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1767:
	.cfi_def_cfa_offset 16
Ltmp1768:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1769:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	addq	$8, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_
	.align	4, 0x90
__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_: ## @_ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm1EEEE4callERSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1770:
	.cfi_def_cfa_offset 16
Ltmp1771:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1772:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	.align	4, 0x90
__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_: ## @_ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm1EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1773:
	.cfi_def_cfa_offset 16
Ltmp1774:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1775:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE
	.align	4, 0x90
__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE: ## @_ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi1EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1776:
	.cfi_def_cfa_offset 16
Ltmp1777:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1778:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC2Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC2Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC2Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm1EEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1779:
	.cfi_def_cfa_offset 16
Ltmp1780:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1781:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC1Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC1Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC1Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1782:
	.cfi_def_cfa_offset 16
Ltmp1783:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1784:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC2Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC2Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC2Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm1EEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1785:
	.cfi_def_cfa_offset 16
Ltmp1786:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1787:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost11initializedIN4mpl_10integral_cImLm1EEEE15wrapper_addressEv
	cmpq	$0, %rax
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	je	LBB450_2
## BB#1:
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC1Ev
LBB450_2:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC1Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC1Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC1Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1788:
	.cfi_def_cfa_offset 16
Ltmp1789:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1790:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC2Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC2Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC2Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm1EEEE7wrapperC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1791:
	.cfi_def_cfa_offset 16
Ltmp1792:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1793:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEE4dataEv
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEE4dataEv
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEE4dataEv: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEE4dataEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1794:
	.cfi_def_cfa_offset 16
Ltmp1795:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1796:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE4dataEv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE4dataEv
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE4dataEv
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE4dataEv: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE4dataEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1797:
	.cfi_def_cfa_offset 16
Ltmp1798:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1799:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost11initializedIN4mpl_10integral_cImLm0EEEE15wrapper_addressEv
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	.weak_def_can_be_hidden	__ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	.align	4, 0x90
__ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_: ## @_ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS9_IdLm2EEENS9_IdLm3EEENS9_IdLm4EEEEEEENS_15lazy_disable_ifINS_8is_constIT0_EENS0_9result_of2atISH_T_EEE4typeERSH_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1800:
	.cfi_def_cfa_offset 16
Ltmp1801:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1802:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	.weak_def_can_be_hidden	__ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	.align	4, 0x90
__ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_: ## @_ZN5boost6fusion2atIN4mpl_10integral_cImLm0EEENS0_7vector3IKNS_5arrayIdLm1EEEKNS6_IdLm2EEEKNS6_IdLm3EEEEEEENS0_9result_of2atIKT0_T_E4typeERSH_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1803:
	.cfi_def_cfa_offset 16
Ltmp1804:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1805:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_
	.align	4, 0x90
__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_: ## @_ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyIKNS0_7vector3IKNS_5arrayIdLm1EEEKNS7_IdLm2EEEKNS7_IdLm3EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1806:
	.cfi_def_cfa_offset 16
Ltmp1807:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1808:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	.align	4, 0x90
__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_: ## @_ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_9add_constINS_3mpl2atINSG_7vector3IS4_S6_S8_EET_E4typeEE4typeEE4typeESK_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1809:
	.cfi_def_cfa_offset 16
Ltmp1810:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1811:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi0EEE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi0EEE
	.weak_def_can_be_hidden	__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi0EEE
	.align	4, 0x90
__ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi0EEE: ## @_ZNK5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEE7at_implEN4mpl_4int_ILi0EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1812:
	.cfi_def_cfa_offset 16
Ltmp1813:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1814:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_
	.weak_def_can_be_hidden	__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_
	.align	4, 0x90
__ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_: ## @_ZN5boost6fusion9extension7at_implINS0_10vector_tagEE5applyINS0_7vector4INS_7numeric6odeint6detail5stageIdLm1EEENSA_IdLm2EEENSA_IdLm3EEENSA_IdLm4EEEEEN4mpl_10integral_cImLm0EEEE4callERSF_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1815:
	.cfi_def_cfa_offset 16
Ltmp1816:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1817:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	.align	4, 0x90
__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_: ## @_ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implIN4mpl_10integral_cImLm0EEEEENS_13add_referenceINS_3mpl2atINSG_7vector4IS6_S7_S8_S9_EET_E4typeEE4typeESK_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1818:
	.cfi_def_cfa_offset 16
Ltmp1819:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1820:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	callq	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE
	.align	4, 0x90
__ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE: ## @_ZN5boost6fusion7vector4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEE7at_implEN4mpl_4int_ILi0EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1821:
	.cfi_def_cfa_offset 16
Ltmp1822:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1823:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC2Ev
	.weak_def_can_be_hidden	__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC2Ev
	.align	4, 0x90
__ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC2Ev: ## @_ZN5boost17value_initializedIN4mpl_10integral_cImLm0EEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1824:
	.cfi_def_cfa_offset 16
Ltmp1825:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1826:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC1Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC1Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC1Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1827:
	.cfi_def_cfa_offset 16
Ltmp1828:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1829:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC2Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC2Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC2Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm0EEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1830:
	.cfi_def_cfa_offset 16
Ltmp1831:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1832:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNK5boost11initializedIN4mpl_10integral_cImLm0EEEE15wrapper_addressEv
	cmpq	$0, %rax
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	je	LBB465_2
## BB#1:
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC1Ev
LBB465_2:
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC1Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC1Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC1Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1833:
	.cfi_def_cfa_offset 16
Ltmp1834:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1835:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC2Ev
	.weak_def_can_be_hidden	__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC2Ev
	.align	4, 0x90
__ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC2Ev: ## @_ZN5boost11initializedIN4mpl_10integral_cImLm0EEEE7wrapperC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1836:
	.cfi_def_cfa_offset 16
Ltmp1837:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1838:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev
	.weak_def_can_be_hidden	__ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev
	.align	4, 0x90
__ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev: ## @_ZN5boost6fusion12vector_data4INS_7numeric6odeint6detail5stageIdLm1EEENS5_IdLm2EEENS5_IdLm3EEENS5_IdLm4EEEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1839:
	.cfi_def_cfa_offset 16
Ltmp1840:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1841:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	xorl	%eax, %eax
	movl	$40, %ecx
	movl	%ecx, %edx
	movl	$32, %ecx
	movl	%ecx, %esi
	movl	$24, %ecx
	movl	%ecx, %r8d
	movl	$16, %ecx
	movl	%ecx, %r9d
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %r10
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%r10, %rdi
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movl	%eax, %esi
	movq	%rdx, -32(%rbp)         ## 8-byte Spill
	movq	%r9, %rdx
	movq	%r8, -40(%rbp)          ## 8-byte Spill
	movl	%eax, -44(%rbp)         ## 4-byte Spill
	callq	_memset
	movq	-16(%rbp), %rdx         ## 8-byte Reload
	addq	$16, %rdx
	movq	%rdx, %rdi
	movl	-44(%rbp), %esi         ## 4-byte Reload
	movq	-40(%rbp), %rdx         ## 8-byte Reload
	callq	_memset
	movq	-16(%rbp), %rdx         ## 8-byte Reload
	addq	$40, %rdx
	movq	%rdx, %rdi
	movl	-44(%rbp), %esi         ## 4-byte Reload
	movq	-24(%rbp), %rdx         ## 8-byte Reload
	callq	_memset
	movq	-16(%rbp), %rdx         ## 8-byte Reload
	addq	$72, %rdx
	movq	%rdx, %rdi
	movl	-44(%rbp), %esi         ## 4-byte Reload
	movq	-32(%rbp), %rdx         ## 8-byte Reload
	callq	_memset
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint20algebra_stepper_baseINS1_13range_algebraENS1_18default_operationsEEC2ERKS3_
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint20algebra_stepper_baseINS1_13range_algebraENS1_18default_operationsEEC2ERKS3_
	.align	4, 0x90
__ZN5boost7numeric6odeint20algebra_stepper_baseINS1_13range_algebraENS1_18default_operationsEEC2ERKS3_: ## @_ZN5boost7numeric6odeint20algebra_stepper_baseINS1_13range_algebraENS1_18default_operationsEEC2ERKS3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1842:
	.cfi_def_cfa_offset 16
Ltmp1843:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1844:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI470_0:
	.quad	4607182418800017408     ## double 1
LCPI470_1:
	.quad	4602678819172646912     ## double 0.5
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint18rk4_coefficients_cIdEC2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint18rk4_coefficients_cIdEC2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint18rk4_coefficients_cIdEC2Ev: ## @_ZN5boost7numeric6odeint18rk4_coefficients_cIdEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1845:
	.cfi_def_cfa_offset 16
Ltmp1846:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1847:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	callq	__ZN5boost5arrayIdLm4EEixEm
	movl	$1, %edx
	movl	%edx, %esi
	xorps	%xmm0, %xmm0
	movsd	%xmm0, (%rax)
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost5arrayIdLm4EEixEm
	movl	$2, %edx
	movl	%edx, %esi
	movsd	LCPI470_1(%rip), %xmm0
	movsd	%xmm0, (%rax)
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost5arrayIdLm4EEixEm
	movl	$3, %edx
	movl	%edx, %esi
	movsd	LCPI470_1(%rip), %xmm0
	movsd	%xmm0, (%rax)
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost5arrayIdLm4EEixEm
	movsd	LCPI470_0(%rip), %xmm0
	movsd	%xmm0, (%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost5arrayIdLm4EEixEm
	.weak_def_can_be_hidden	__ZN5boost5arrayIdLm4EEixEm
	.align	4, 0x90
__ZN5boost5arrayIdLm4EEixEm:            ## @_ZN5boost5arrayIdLm4EEixEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1848:
	.cfi_def_cfa_offset 16
Ltmp1849:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1850:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$4, -16(%rbp)
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movb	%cl, -25(%rbp)          ## 1-byte Spill
	jae	LBB471_2
## BB#1:
	movb	$1, %al
	movb	%al, -25(%rbp)          ## 1-byte Spill
	jmp	LBB471_2
LBB471_2:
	movb	-25(%rbp), %al          ## 1-byte Reload
	xorb	$1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	cmpq	$0, %rdx
	je	LBB471_4
## BB#3:
	leaq	L___func__._ZNK5boost5arrayIdLm4EEixEm(%rip), %rdi
	leaq	L_.str48(%rip), %rsi
	movl	$123, %edx
	leaq	L_.str49(%rip), %rcx
	callq	___assert_rtn
LBB471_4:
	jmp	LBB471_5
LBB471_5:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI472_0:
	.quad	4595172819793696085     ## double 0.16666666666666666
LCPI472_1:
	.quad	4599676419421066581     ## double 0.33333333333333331
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint18rk4_coefficients_bIdEC2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint18rk4_coefficients_bIdEC2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint18rk4_coefficients_bIdEC2Ev: ## @_ZN5boost7numeric6odeint18rk4_coefficients_bIdEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1851:
	.cfi_def_cfa_offset 16
Ltmp1852:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1853:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	callq	__ZN5boost5arrayIdLm4EEixEm
	movl	$1, %edx
	movl	%edx, %esi
	movsd	LCPI472_0(%rip), %xmm0
	movsd	%xmm0, (%rax)
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost5arrayIdLm4EEixEm
	movl	$2, %edx
	movl	%edx, %esi
	movsd	LCPI472_1(%rip), %xmm0
	movsd	%xmm0, (%rax)
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost5arrayIdLm4EEixEm
	movl	$3, %edx
	movl	%edx, %esi
	movsd	LCPI472_1(%rip), %xmm0
	movsd	%xmm0, (%rax)
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost5arrayIdLm4EEixEm
	movsd	LCPI472_0(%rip), %xmm0
	movsd	%xmm0, (%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE
	.align	4, 0x90
__ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE: ## @_ZN5boost6fusion7vector3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2INS_7numeric6odeint19rk4_coefficients_a1IdEENSC_19rk4_coefficients_a2IdEENSC_19rk4_coefficients_a3IdEEEERKNS1_IT_T0_T1_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1854:
	.cfi_def_cfa_offset 16
Ltmp1855:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1856:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movl	%eax, %r8d
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	movq	-16(%rbp), %rdi
	movq	-16(%rbp), %rcx
	addq	$8, %rcx
	movq	-16(%rbp), %rdx
	addq	$24, %rdx
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
	movq	%rsi, %rdi
	movq	-24(%rbp), %rsi         ## 8-byte Reload
	movq	%rdx, -32(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdx
	movq	-32(%rbp), %rcx         ## 8-byte Reload
	callq	__ZN5boost6fusion12vector_data3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2IRKNS_7numeric6odeint19rk4_coefficients_a1IdEERKNSC_19rk4_coefficients_a2IdEERKNSC_19rk4_coefficients_a3IdEEEEOT_OT0_OT1_PNS_9enable_ifINS_14is_convertibleISP_S4_EEvE4typeE
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion12vector_data3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2IRKNS_7numeric6odeint19rk4_coefficients_a1IdEERKNSC_19rk4_coefficients_a2IdEERKNSC_19rk4_coefficients_a3IdEEEEOT_OT0_OT1_PNS_9enable_ifINS_14is_convertibleISP_S4_EEvE4typeE
	.weak_def_can_be_hidden	__ZN5boost6fusion12vector_data3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2IRKNS_7numeric6odeint19rk4_coefficients_a1IdEERKNSC_19rk4_coefficients_a2IdEERKNSC_19rk4_coefficients_a3IdEEEEOT_OT0_OT1_PNS_9enable_ifINS_14is_convertibleISP_S4_EEvE4typeE
	.align	4, 0x90
__ZN5boost6fusion12vector_data3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2IRKNS_7numeric6odeint19rk4_coefficients_a1IdEERKNSC_19rk4_coefficients_a2IdEERKNSC_19rk4_coefficients_a3IdEEEEOT_OT0_OT1_PNS_9enable_ifINS_14is_convertibleISP_S4_EEvE4typeE: ## @_ZN5boost6fusion12vector_data3IKNS_5arrayIdLm1EEEKNS2_IdLm2EEEKNS2_IdLm3EEEEC2IRKNS_7numeric6odeint19rk4_coefficients_a1IdEERKNSC_19rk4_coefficients_a2IdEERKNSC_19rk4_coefficients_a3IdEEEEOT_OT0_OT1_PNS_9enable_ifINS_14is_convertibleISP_S4_EEvE4typeE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1857:
	.cfi_def_cfa_offset 16
Ltmp1858:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1859:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -64(%rbp)
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, (%rcx)
	movq	-48(%rbp), %rdx
	movq	%rdx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	%rsi, 8(%rcx)
	movq	8(%rdx), %rdx
	movq	%rdx, 16(%rcx)
	movq	-56(%rbp), %rdx
	movq	%rdx, -16(%rbp)
	movq	-16(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	%rsi, 24(%rcx)
	movq	8(%rdx), %rsi
	movq	%rsi, 32(%rcx)
	movq	16(%rdx), %rdx
	movq	%rdx, 40(%rcx)
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI475_0:
	.quad	4607182418800017408     ## double 1
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC2Ev: ## @_ZN5boost7numeric6odeint19rk4_coefficients_a3IdEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1860:
	.cfi_def_cfa_offset 16
Ltmp1861:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1862:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	callq	__ZN5boost5arrayIdLm3EEixEm
	movl	$1, %edx
	movl	%edx, %esi
	xorps	%xmm0, %xmm0
	movsd	%xmm0, (%rax)
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost5arrayIdLm3EEixEm
	movl	$2, %edx
	movl	%edx, %esi
	xorps	%xmm0, %xmm0
	movsd	%xmm0, (%rax)
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost5arrayIdLm3EEixEm
	movsd	LCPI475_0(%rip), %xmm0
	movsd	%xmm0, (%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost5arrayIdLm3EEixEm
	.weak_def_can_be_hidden	__ZN5boost5arrayIdLm3EEixEm
	.align	4, 0x90
__ZN5boost5arrayIdLm3EEixEm:            ## @_ZN5boost5arrayIdLm3EEixEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1863:
	.cfi_def_cfa_offset 16
Ltmp1864:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1865:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$3, -16(%rbp)
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movb	%cl, -25(%rbp)          ## 1-byte Spill
	jae	LBB476_2
## BB#1:
	movb	$1, %al
	movb	%al, -25(%rbp)          ## 1-byte Spill
	jmp	LBB476_2
LBB476_2:
	movb	-25(%rbp), %al          ## 1-byte Reload
	xorb	$1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	cmpq	$0, %rdx
	je	LBB476_4
## BB#3:
	leaq	L___func__._ZNK5boost5arrayIdLm4EEixEm(%rip), %rdi
	leaq	L_.str48(%rip), %rsi
	movl	$123, %edx
	leaq	L_.str49(%rip), %rcx
	callq	___assert_rtn
LBB476_4:
	jmp	LBB476_5
LBB476_5:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI477_0:
	.quad	4602678819172646912     ## double 0.5
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC2Ev: ## @_ZN5boost7numeric6odeint19rk4_coefficients_a2IdEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1866:
	.cfi_def_cfa_offset 16
Ltmp1867:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1868:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rcx
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	callq	__ZN5boost5arrayIdLm2EEixEm
	movl	$1, %edx
	movl	%edx, %esi
	xorps	%xmm0, %xmm0
	movsd	%xmm0, (%rax)
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost5arrayIdLm2EEixEm
	movsd	LCPI477_0(%rip), %xmm0
	movsd	%xmm0, (%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost5arrayIdLm2EEixEm
	.weak_def_can_be_hidden	__ZN5boost5arrayIdLm2EEixEm
	.align	4, 0x90
__ZN5boost5arrayIdLm2EEixEm:            ## @_ZN5boost5arrayIdLm2EEixEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1869:
	.cfi_def_cfa_offset 16
Ltmp1870:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1871:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$2, -16(%rbp)
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movb	%cl, -25(%rbp)          ## 1-byte Spill
	jae	LBB478_2
## BB#1:
	movb	$1, %al
	movb	%al, -25(%rbp)          ## 1-byte Spill
	jmp	LBB478_2
LBB478_2:
	movb	-25(%rbp), %al          ## 1-byte Reload
	xorb	$1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	cmpq	$0, %rdx
	je	LBB478_4
## BB#3:
	leaq	L___func__._ZNK5boost5arrayIdLm4EEixEm(%rip), %rdi
	leaq	L_.str48(%rip), %rsi
	movl	$123, %edx
	leaq	L_.str49(%rip), %rcx
	callq	___assert_rtn
LBB478_4:
	jmp	LBB478_5
LBB478_5:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI479_0:
	.quad	4602678819172646912     ## double 0.5
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC2Ev: ## @_ZN5boost7numeric6odeint19rk4_coefficients_a1IdEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1872:
	.cfi_def_cfa_offset 16
Ltmp1873:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1874:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost5arrayIdLm1EEixEm
	movsd	LCPI479_0(%rip), %xmm0
	movsd	%xmm0, (%rax)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost5arrayIdLm1EEixEm
	.weak_def_can_be_hidden	__ZN5boost5arrayIdLm1EEixEm
	.align	4, 0x90
__ZN5boost5arrayIdLm1EEixEm:            ## @_ZN5boost5arrayIdLm1EEixEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1875:
	.cfi_def_cfa_offset 16
Ltmp1876:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1877:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	xorl	%eax, %eax
	movb	%al, %cl
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-8(%rbp), %rsi
	cmpq	$1, -16(%rbp)
	movq	%rsi, -24(%rbp)         ## 8-byte Spill
	movb	%cl, -25(%rbp)          ## 1-byte Spill
	jae	LBB480_2
## BB#1:
	movb	$1, %al
	movb	%al, -25(%rbp)          ## 1-byte Spill
	jmp	LBB480_2
LBB480_2:
	movb	-25(%rbp), %al          ## 1-byte Reload
	xorb	$1, %al
	andb	$1, %al
	movzbl	%al, %ecx
	movl	%ecx, %edx
	cmpq	$0, %rdx
	je	LBB480_4
## BB#3:
	leaq	L___func__._ZNK5boost5arrayIdLm4EEixEm(%rip), %rdi
	leaq	L_.str48(%rip), %rsi
	movl	$123, %edx
	leaq	L_.str49(%rip), %rcx
	callq	___assert_rtn
LBB480_4:
	jmp	LBB480_5
LBB480_5:
	movq	-16(%rbp), %rax
	shlq	$3, %rax
	movq	-24(%rbp), %rcx         ## 8-byte Reload
	addq	%rax, %rcx
	movq	%rcx, %rax
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC1ERKS5_RKS7_RKS9_
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC1ERKS5_RKS7_RKS9_
	.align	4, 0x90
__ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC1ERKS5_RKS7_RKS9_: ## @_ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC1ERKS5_RKS7_RKS9_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1878:
	.cfi_def_cfa_offset 16
Ltmp1879:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1880:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	__ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_
	.weak_def_can_be_hidden	__ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_
	.align	4, 0x90
__ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_: ## @_ZN5boost6fusion7vector3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1881:
	.cfi_def_cfa_offset 16
Ltmp1882:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1883:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rdi
	movq	%rdi, -40(%rbp)         ## 8-byte Spill
	movq	%rcx, %rdi
	movq	-40(%rbp), %rcx         ## 8-byte Reload
	callq	__ZN5boost6fusion12vector_data3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion12vector_data3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_
	.weak_def_can_be_hidden	__ZN5boost6fusion12vector_data3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_
	.align	4, 0x90
__ZN5boost6fusion12vector_data3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_: ## @_ZN5boost6fusion12vector_data3INS_7numeric6odeint19rk4_coefficients_a1IdEENS3_19rk4_coefficients_a2IdEENS3_19rk4_coefficients_a3IdEEEC2ERKS5_RKS7_RKS9_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1884:
	.cfi_def_cfa_offset 16
Ltmp1885:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1886:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, (%rcx)
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	%rsi, 8(%rcx)
	movq	8(%rdx), %rdx
	movq	%rdx, 16(%rcx)
	movq	-32(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	%rsi, 24(%rcx)
	movq	8(%rdx), %rsi
	movq	%rsi, 32(%rcx)
	movq	16(%rdx), %rdx
	movq	%rdx, 40(%rcx)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE6assignIPdEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIdNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin484:
	.cfi_lsda 16, Lexception484
## BB#0:
	pushq	%rbp
Ltmp1890:
	.cfi_def_cfa_offset 16
Ltmp1891:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1892:
	.cfi_def_cfa_register %rbp
	subq	$640, %rsp              ## imm = 0x280
	movq	%rdi, -536(%rbp)
	movq	%rsi, -544(%rbp)
	movq	%rdx, -552(%rbp)
	movq	-536(%rbp), %rdx
	movq	-544(%rbp), %rsi
	movq	-552(%rbp), %rdi
	movq	%rsi, -512(%rbp)
	movq	%rdi, -520(%rbp)
	movq	-512(%rbp), %rsi
	movq	-520(%rbp), %rdi
	movq	%rsi, -496(%rbp)
	movq	%rdi, -504(%rbp)
	movq	-504(%rbp), %rsi
	movq	-496(%rbp), %rdi
	subq	%rdi, %rsi
	sarq	$3, %rsi
	movq	%rsi, -560(%rbp)
	movq	-560(%rbp), %rsi
	movq	%rdx, -488(%rbp)
	movq	-488(%rbp), %rdi
	movq	%rdi, -480(%rbp)
	movq	-480(%rbp), %rdi
	movq	%rdi, -472(%rbp)
	movq	-472(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -464(%rbp)
	movq	-464(%rbp), %rax
	movq	%rax, -456(%rbp)
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	cmpq	%rax, %rsi
	movq	%rdx, -592(%rbp)        ## 8-byte Spill
	ja	LBB484_12
## BB#1:
	movq	-552(%rbp), %rax
	movq	%rax, -568(%rbp)
	movb	$0, -569(%rbp)
	movq	-560(%rbp), %rax
	movq	-592(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -448(%rbp)
	movq	-448(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	(%rdx), %rdx
	subq	%rdx, %rsi
	sarq	$3, %rsi
	cmpq	%rsi, %rax
	jbe	LBB484_3
## BB#2:
	leaq	-568(%rbp), %rax
	movb	$1, -569(%rbp)
	movq	-544(%rbp), %rcx
	movq	%rcx, -568(%rbp)
	movq	-592(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -280(%rbp)
	movq	-280(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	(%rdx), %rdx
	subq	%rdx, %rsi
	sarq	$3, %rsi
	movq	%rax, -256(%rbp)
	movq	%rsi, -264(%rbp)
	movq	-256(%rbp), %rax
	movq	-264(%rbp), %rdx
	movq	%rax, -240(%rbp)
	movq	%rdx, -248(%rbp)
	movq	-248(%rbp), %rax
	movq	-240(%rbp), %rdx
	movq	(%rdx), %rsi
	shlq	$3, %rax
	addq	%rax, %rsi
	movq	%rsi, (%rdx)
LBB484_3:
	movq	-544(%rbp), %rax
	movq	-568(%rbp), %rcx
	movq	-592(%rbp), %rdx        ## 8-byte Reload
	movq	(%rdx), %rsi
	movq	%rax, -216(%rbp)
	movq	%rcx, -224(%rbp)
	movq	%rsi, -232(%rbp)
	movq	-216(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movq	-224(%rbp), %rcx
	movq	%rcx, -160(%rbp)
	movq	-160(%rbp), %rcx
	movq	-232(%rbp), %rsi
	movq	%rsi, -168(%rbp)
	movq	-168(%rbp), %rsi
	movq	%rax, -176(%rbp)
	movq	%rcx, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	-184(%rbp), %rax
	movq	-176(%rbp), %rcx
	subq	%rcx, %rax
	sarq	$3, %rax
	movq	%rax, -200(%rbp)
	movq	-192(%rbp), %rax
	movq	-176(%rbp), %rcx
	movq	-200(%rbp), %rsi
	shlq	$3, %rsi
	movq	%rax, %rdi
	movq	%rsi, -600(%rbp)        ## 8-byte Spill
	movq	%rcx, %rsi
	movq	-600(%rbp), %rdx        ## 8-byte Reload
	callq	_memmove
	movq	-192(%rbp), %rax
	movq	-200(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	%rax, -584(%rbp)
	testb	$1, -569(%rbp)
	je	LBB484_5
## BB#4:
	movq	-568(%rbp), %rsi
	movq	-552(%rbp), %rdx
	movq	-592(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_
	jmp	LBB484_11
LBB484_5:
	movq	-584(%rbp), %rax
	movq	-592(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -136(%rbp)
	movq	%rax, -144(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rdx
	movq	8(%rdx), %rsi
	movq	(%rdx), %rdx
	subq	%rdx, %rsi
	sarq	$3, %rsi
	movq	%rsi, -152(%rbp)
	movq	%rax, %rdx
	movq	-144(%rbp), %rsi
	movq	%rdx, -112(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-112(%rbp), %rdx
	movq	%rax, -608(%rbp)        ## 8-byte Spill
	movq	%rdx, -616(%rbp)        ## 8-byte Spill
LBB484_6:                               ## =>This Inner Loop Header: Depth=1
	movq	-120(%rbp), %rax
	movq	-616(%rbp), %rcx        ## 8-byte Reload
	cmpq	8(%rcx), %rax
	je	LBB484_8
## BB#7:                                ##   in Loop: Header=BB484_6 Depth=1
	movq	-616(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rcx
	addq	$16, %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rcx
	movq	%rcx, -88(%rbp)
	movq	-88(%rbp), %rcx
	movq	8(%rax), %rdx
	addq	$-8, %rdx
	movq	%rdx, 8(%rax)
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	%rcx, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-48(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	%rcx, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-32(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movq	%rcx, -8(%rbp)
	movq	%rdx, -16(%rbp)
	jmp	LBB484_6
LBB484_8:                               ## %_ZNSt3__113__vector_baseIdNS_9allocatorIdEEE17__destruct_at_endEPd.exit.i
	movq	-152(%rbp), %rsi
Ltmp1887:
	movq	-608(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_shrinkEm
Ltmp1888:
	jmp	LBB484_10
LBB484_9:
Ltmp1889:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -620(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
LBB484_10:                              ## %_ZNSt3__16vectorIdNS_9allocatorIdEEE17__destruct_at_endEPd.exit
	jmp	LBB484_11
LBB484_11:
	jmp	LBB484_21
LBB484_12:
	movq	-592(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE10deallocateEv
	movq	-560(%rbp), %rdi
	movq	-592(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -408(%rbp)
	movq	%rdi, -416(%rbp)
	movq	-408(%rbp), %rdi
	movq	%rdi, -632(%rbp)        ## 8-byte Spill
	callq	__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv
	movq	%rax, -424(%rbp)
	movq	-416(%rbp), %rax
	cmpq	-424(%rbp), %rax
	jbe	LBB484_14
## BB#13:
	movq	-632(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
LBB484_14:
	movq	-632(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rcx
	movq	%rcx, -384(%rbp)
	movq	-384(%rbp), %rcx
	movq	%rcx, -376(%rbp)
	movq	-376(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -368(%rbp)
	movq	-368(%rbp), %rdx
	movq	%rdx, -360(%rbp)
	movq	-360(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	movq	%rdx, -432(%rbp)
	movq	-432(%rbp), %rcx
	movq	-424(%rbp), %rdx
	shrq	$1, %rdx
	cmpq	%rdx, %rcx
	jb	LBB484_16
## BB#15:
	movq	-424(%rbp), %rax
	movq	%rax, -400(%rbp)
	jmp	LBB484_20
LBB484_16:
	leaq	-312(%rbp), %rax
	leaq	-416(%rbp), %rcx
	leaq	-440(%rbp), %rdx
	movq	-432(%rbp), %rsi
	shlq	$1, %rsi
	movq	%rsi, -440(%rbp)
	movq	%rdx, -336(%rbp)
	movq	%rcx, -344(%rbp)
	movq	-336(%rbp), %rcx
	movq	-344(%rbp), %rdx
	movq	%rcx, -320(%rbp)
	movq	%rdx, -328(%rbp)
	movq	-320(%rbp), %rcx
	movq	-328(%rbp), %rdx
	movq	%rax, -288(%rbp)
	movq	%rcx, -296(%rbp)
	movq	%rdx, -304(%rbp)
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	-304(%rbp), %rcx
	cmpq	(%rcx), %rax
	jae	LBB484_18
## BB#17:
	movq	-328(%rbp), %rax
	movq	%rax, -640(%rbp)        ## 8-byte Spill
	jmp	LBB484_19
LBB484_18:
	movq	-320(%rbp), %rax
	movq	%rax, -640(%rbp)        ## 8-byte Spill
LBB484_19:                              ## %_ZNSt3__13maxImEERKT_S3_S3_.exit.i
	movq	-640(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, -400(%rbp)
LBB484_20:                              ## %_ZNKSt3__16vectorIdNS_9allocatorIdEEE11__recommendEm.exit
	movq	-400(%rbp), %rsi
	movq	-592(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEm
	movq	-544(%rbp), %rsi
	movq	-552(%rbp), %rdx
	movq	-592(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endIPdEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_
LBB484_21:
	addq	$640, %rsp              ## imm = 0x280
	popq	%rbp
	retq
	.cfi_endproc
Leh_func_end484:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table484:
Lexception484:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\257\200"              ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset378 = Leh_func_begin484-Leh_func_begin484 ## >> Call Site 1 <<
	.long	Lset378
Lset379 = Ltmp1887-Leh_func_begin484    ##   Call between Leh_func_begin484 and Ltmp1887
	.long	Lset379
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset380 = Ltmp1887-Leh_func_begin484    ## >> Call Site 2 <<
	.long	Lset380
Lset381 = Ltmp1888-Ltmp1887             ##   Call between Ltmp1887 and Ltmp1888
	.long	Lset381
Lset382 = Ltmp1889-Leh_func_begin484    ##     jumps to Ltmp1889
	.long	Lset382
	.byte	1                       ##   On action: 1
Lset383 = Ltmp1888-Leh_func_begin484    ## >> Call Site 3 <<
	.long	Lset383
Lset384 = Leh_func_end484-Ltmp1888      ##   Call between Ltmp1888 and Leh_func_end484
	.long	Lset384
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI485_0:
	.quad	4607182418800017408     ## double 1
LCPI485_1:
	.quad	-4616189618054758400    ## double -1
LCPI485_2:
	.quad	-4611686018427387904    ## double -2
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__119normal_distributionIdEclINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEEdRT_RKNS1_10param_typeE
	.weak_def_can_be_hidden	__ZNSt3__119normal_distributionIdEclINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEEdRT_RKNS1_10param_typeE
	.align	4, 0x90
__ZNSt3__119normal_distributionIdEclINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEEdRT_RKNS1_10param_typeE: ## @_ZNSt3__119normal_distributionIdEclINS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEEdRT_RKNS1_10param_typeE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1893:
	.cfi_def_cfa_offset 16
Ltmp1894:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1895:
	.cfi_def_cfa_register %rbp
	subq	$352, %rsp              ## imm = 0x160
	movq	%rdi, -248(%rbp)
	movq	%rsi, -256(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-248(%rbp), %rdx
	testb	$1, 24(%rdx)
	movq	%rdx, -328(%rbp)        ## 8-byte Spill
	je	LBB485_2
## BB#1:
	movq	-328(%rbp), %rax        ## 8-byte Reload
	movb	$0, 24(%rax)
	movsd	16(%rax), %xmm0
	movsd	%xmm0, -272(%rbp)
	jmp	LBB485_8
LBB485_2:
	movsd	LCPI485_0(%rip), %xmm0
	movsd	LCPI485_1(%rip), %xmm1
	leaq	-288(%rbp), %rax
	movq	%rax, -224(%rbp)
	movsd	%xmm1, -232(%rbp)
	movsd	%xmm0, -240(%rbp)
	movq	-224(%rbp), %rax
	movsd	-232(%rbp), %xmm0
	movsd	-240(%rbp), %xmm1
	movq	%rax, -200(%rbp)
	movsd	%xmm0, -208(%rbp)
	movsd	%xmm1, -216(%rbp)
	movq	-200(%rbp), %rax
	movsd	-208(%rbp), %xmm0
	movsd	-216(%rbp), %xmm1
	movq	%rax, -176(%rbp)
	movsd	%xmm0, -184(%rbp)
	movsd	%xmm1, -192(%rbp)
	movq	-176(%rbp), %rax
	movsd	-184(%rbp), %xmm0
	movsd	-192(%rbp), %xmm1
	movq	%rax, -152(%rbp)
	movsd	%xmm0, -160(%rbp)
	movsd	%xmm1, -168(%rbp)
	movq	-152(%rbp), %rax
	movsd	-160(%rbp), %xmm0
	movsd	%xmm0, (%rax)
	movsd	-168(%rbp), %xmm0
	movsd	%xmm0, 8(%rax)
LBB485_3:                               ## =>This Inner Loop Header: Depth=1
	leaq	-288(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	%rax, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	%rax, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movsd	8(%rax), %xmm0
	movq	-48(%rbp), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	subsd	(%rax), %xmm0
	movq	-40(%rbp), %rdi
	movsd	%xmm0, -336(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__118generate_canonicalIdLm53ENS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEET_RT1_
	leaq	-288(%rbp), %rax
	movsd	-336(%rbp), %xmm1       ## 8-byte Reload
	mulsd	%xmm0, %xmm1
	movq	-48(%rbp), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	addsd	(%rcx), %xmm1
	movsd	%xmm1, -296(%rbp)
	movq	-256(%rbp), %rcx
	movq	%rax, -120(%rbp)
	movq	%rcx, -128(%rbp)
	movq	-120(%rbp), %rax
	movq	-128(%rbp), %rcx
	movq	%rax, -96(%rbp)
	movq	%rcx, -104(%rbp)
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movsd	8(%rax), %xmm0
	movq	-112(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	subsd	(%rax), %xmm0
	movq	-104(%rbp), %rdi
	movsd	%xmm0, -344(%rbp)       ## 8-byte Spill
	callq	__ZNSt3__118generate_canonicalIdLm53ENS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEET_RT1_
	movsd	-344(%rbp), %xmm1       ## 8-byte Reload
	mulsd	%xmm0, %xmm1
	movq	-112(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	addsd	(%rax), %xmm1
	movsd	%xmm1, -304(%rbp)
	movsd	-296(%rbp), %xmm0
	mulsd	-296(%rbp), %xmm0
	movsd	-304(%rbp), %xmm1
	mulsd	-304(%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, -312(%rbp)
## BB#4:                                ##   in Loop: Header=BB485_3 Depth=1
	movb	$1, %al
	movsd	LCPI485_0(%rip), %xmm0
	movsd	-312(%rbp), %xmm1
	ucomisd	%xmm0, %xmm1
	movb	%al, -345(%rbp)         ## 1-byte Spill
	ja	LBB485_6
## BB#5:                                ##   in Loop: Header=BB485_3 Depth=1
	xorps	%xmm0, %xmm0
	movsd	-312(%rbp), %xmm1
	ucomisd	%xmm0, %xmm1
	sete	%al
	setnp	%cl
	andb	%cl, %al
	movb	%al, -345(%rbp)         ## 1-byte Spill
LBB485_6:                               ##   in Loop: Header=BB485_3 Depth=1
	movb	-345(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB485_3
## BB#7:
	movsd	-312(%rbp), %xmm0
	callq	_log
	movsd	LCPI485_2(%rip), %xmm1
	mulsd	%xmm0, %xmm1
	divsd	-312(%rbp), %xmm1
	sqrtsd	%xmm1, %xmm0
	movsd	%xmm0, -320(%rbp)
	movsd	-304(%rbp), %xmm0
	mulsd	-320(%rbp), %xmm0
	movq	-328(%rbp), %rax        ## 8-byte Reload
	movsd	%xmm0, 16(%rax)
	movb	$1, 24(%rax)
	movsd	-296(%rbp), %xmm0
	mulsd	-320(%rbp), %xmm0
	movsd	%xmm0, -272(%rbp)
LBB485_8:
	movsd	-272(%rbp), %xmm0
	movq	-264(%rbp), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	mulsd	8(%rax), %xmm0
	movq	-264(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	addsd	(%rax), %xmm0
	addq	$352, %rsp              ## imm = 0x160
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI486_0:
	.quad	4746794007240114176     ## double 2147483646
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__118generate_canonicalIdLm53ENS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEET_RT1_
	.weak_def_can_be_hidden	__ZNSt3__118generate_canonicalIdLm53ENS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEET_RT1_
	.align	4, 0x90
__ZNSt3__118generate_canonicalIdLm53ENS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEET_RT1_: ## @_ZNSt3__118generate_canonicalIdLm53ENS_26linear_congruential_engineIjLj48271ELj0ELj2147483647EEEEET_RT1_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1896:
	.cfi_def_cfa_offset 16
Ltmp1897:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1898:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -88(%rbp)
	movq	$53, -96(%rbp)
	movq	$53, -104(%rbp)
	movq	$30, -112(%rbp)
	movq	$2, -120(%rbp)
	movabsq	$4746794007240114176, %rdi ## imm = 0x41DFFFFFFF800000
	movq	%rdi, -128(%rbp)
	movq	%rdi, -136(%rbp)
	movq	-88(%rbp), %rdi
	movq	%rdi, -40(%rbp)
	movl	(%rdi), %eax
	movl	%eax, -4(%rbp)
	movl	$48271, -8(%rbp)        ## imm = 0xBC8F
	movl	$2147483647, -12(%rbp)  ## imm = 0x7FFFFFFF
	movl	$44488, -16(%rbp)       ## imm = 0xADC8
	movl	$3399, -20(%rbp)        ## imm = 0xD47
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	movl	%ecx, %eax
	movl	$3163493265, %edx       ## imm = 0xBC8F1391
	movl	%edx, %esi
	imulq	%rsi, %rcx
	shrq	$47, %rcx
	movl	%ecx, %edx
	imull	 $44488, %edx           ## imm = 0xADC8
	subl	%edx, %eax
	imull	 $48271, %eax           ## imm = 0xBC8F
	movl	%eax, -24(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	imulq	%rsi, %rcx
	shrq	$47, %rcx
	movl	%ecx, %eax
	imull	 $3399, %eax            ## imm = 0xD47
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %edx
	movl	%edx, %r8d
	subl	%eax, %r8d
	sbbl	%r9d, %r9d
	andl	$1, %r9d
	imull	 $2147483647, %r9d      ## imm = 0x7FFFFFFF
	addl	%r9d, %edx
	subl	%eax, %edx
	movl	%edx, -4(%rbp)
	movl	%edx, (%rdi)
	decl	%edx
	movl	%edx, %ecx
	cvtsi2sdq	%rcx, %xmm0
	movsd	%xmm0, -144(%rbp)
	movq	$1, -152(%rbp)
	movl	%r8d, -156(%rbp)        ## 4-byte Spill
LBB486_1:                               ## =>This Inner Loop Header: Depth=1
	cmpq	$2, -152(%rbp)
	jae	LBB486_4
## BB#2:                                ##   in Loop: Header=BB486_1 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	(%rax), %ecx
	movl	%ecx, -44(%rbp)
	movl	$48271, -48(%rbp)       ## imm = 0xBC8F
	movl	$2147483647, -52(%rbp)  ## imm = 0x7FFFFFFF
	movl	$44488, -56(%rbp)       ## imm = 0xADC8
	movl	$3399, -60(%rbp)        ## imm = 0xD47
	movl	-44(%rbp), %ecx
	movl	%ecx, %edx
	movl	%edx, %ecx
	movl	$3163493265, %esi       ## imm = 0xBC8F1391
	movl	%esi, %edi
	imulq	%rdi, %rdx
	shrq	$47, %rdx
	movl	%edx, %esi
	imull	 $44488, %esi           ## imm = 0xADC8
	subl	%esi, %ecx
	imull	 $48271, %ecx           ## imm = 0xBC8F
	movl	%ecx, -64(%rbp)
	movl	-44(%rbp), %ecx
	movl	%ecx, %edx
	imulq	%rdi, %rdx
	shrq	$47, %rdx
	movl	%edx, %ecx
	imull	 $3399, %ecx            ## imm = 0xD47
	movl	%ecx, -68(%rbp)
	movl	-64(%rbp), %esi
	movl	%esi, %r8d
	subl	%ecx, %r8d
	sbbl	%r9d, %r9d
	andl	$1, %r9d
	imull	 $2147483647, %r9d      ## imm = 0x7FFFFFFF
	addl	%r9d, %esi
	subl	%ecx, %esi
	movl	%esi, -44(%rbp)
	movl	%esi, (%rax)
	decl	%esi
	movl	%esi, %eax
	cvtsi2sdq	%rax, %xmm0
	mulsd	-136(%rbp), %xmm0
	movsd	-144(%rbp), %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, -144(%rbp)
	movl	%r8d, -160(%rbp)        ## 4-byte Spill
## BB#3:                                ##   in Loop: Header=BB486_1 Depth=1
	movsd	LCPI486_0(%rip), %xmm0
	movq	-152(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -152(%rbp)
	movsd	-136(%rbp), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, -136(%rbp)
	jmp	LBB486_1
LBB486_4:
	movsd	-144(%rbp), %xmm0
	divsd	-136(%rbp), %xmm0
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIRKdEEvOT_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin487:
	.cfi_lsda 16, Lexception487
## BB#0:
	pushq	%rbp
Ltmp1902:
	.cfi_def_cfa_offset 16
Ltmp1903:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1904:
	.cfi_def_cfa_register %rbp
	subq	$464, %rsp              ## imm = 0x1D0
	movq	%rdi, -344(%rbp)
	movq	%rsi, -352(%rbp)
	movq	-344(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rdi, -336(%rbp)
	movq	-336(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -328(%rbp)
	movq	-328(%rbp), %rdi
	movq	%rdi, -320(%rbp)
	movq	-320(%rbp), %rdi
	movq	%rdi, -360(%rbp)
	movq	%rsi, -312(%rbp)
	movq	-312(%rbp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	addq	$1, %rax
	movq	%rsi, -272(%rbp)
	movq	%rax, -280(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, %rdi
	movq	%rsi, -424(%rbp)        ## 8-byte Spill
	movq	%rax, -432(%rbp)        ## 8-byte Spill
	callq	__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv
	movq	%rax, -288(%rbp)
	movq	-280(%rbp), %rax
	cmpq	-288(%rbp), %rax
	jbe	LBB487_2
## BB#1:
	movq	-432(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
LBB487_2:
	movq	-432(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rcx
	movq	%rcx, -248(%rbp)
	movq	-248(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	-240(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -232(%rbp)
	movq	-232(%rbp), %rdx
	movq	%rdx, -224(%rbp)
	movq	-224(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	movq	%rdx, -296(%rbp)
	movq	-296(%rbp), %rcx
	movq	-288(%rbp), %rdx
	shrq	$1, %rdx
	cmpq	%rdx, %rcx
	jb	LBB487_4
## BB#3:
	movq	-288(%rbp), %rax
	movq	%rax, -264(%rbp)
	jmp	LBB487_8
LBB487_4:
	leaq	-176(%rbp), %rax
	leaq	-280(%rbp), %rcx
	leaq	-304(%rbp), %rdx
	movq	-296(%rbp), %rsi
	shlq	$1, %rsi
	movq	%rsi, -304(%rbp)
	movq	%rdx, -200(%rbp)
	movq	%rcx, -208(%rbp)
	movq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	%rcx, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	%rax, -152(%rbp)
	movq	%rcx, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	-168(%rbp), %rcx
	cmpq	(%rcx), %rax
	jae	LBB487_6
## BB#5:
	movq	-192(%rbp), %rax
	movq	%rax, -440(%rbp)        ## 8-byte Spill
	jmp	LBB487_7
LBB487_6:
	movq	-184(%rbp), %rax
	movq	%rax, -440(%rbp)        ## 8-byte Spill
LBB487_7:                               ## %_ZNSt3__13maxImEERKT_S3_S3_.exit.i
	movq	-440(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, -264(%rbp)
LBB487_8:                               ## %_ZNKSt3__16vectorIdNS_9allocatorIdEEE11__recommendEm.exit
	leaq	-400(%rbp), %rdi
	movq	-264(%rbp), %rsi
	movq	-424(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	movq	-360(%rbp), %rcx
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EmmS3_
	movq	-360(%rbp), %rax
	movq	-384(%rbp), %rcx
	movq	%rcx, -136(%rbp)
	movq	-136(%rbp), %rcx
	movq	-352(%rbp), %rdx
	movq	%rdx, -128(%rbp)
	movq	-128(%rbp), %rdx
	movq	%rax, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-88(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	%rax, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	%rax, -16(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -448(%rbp)        ## 8-byte Spill
	je	LBB487_10
## BB#9:
	movq	-448(%rbp), %rax        ## 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-448(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -456(%rbp)        ## 8-byte Spill
LBB487_10:                              ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJRKdEEEvRS2_PT_DpOT0_.exit
## BB#11:
	movq	-384(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -384(%rbp)
Ltmp1899:
	leaq	-400(%rbp), %rsi
	movq	-424(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE
Ltmp1900:
	jmp	LBB487_12
LBB487_12:
	leaq	-400(%rbp), %rdi
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
	addq	$464, %rsp              ## imm = 0x1D0
	popq	%rbp
	retq
LBB487_13:
Ltmp1901:
	leaq	-400(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -408(%rbp)
	movl	%ecx, -412(%rbp)
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
## BB#14:
	movq	-408(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end487:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table487:
Lexception487:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset385 = Leh_func_begin487-Leh_func_begin487 ## >> Call Site 1 <<
	.long	Lset385
Lset386 = Ltmp1899-Leh_func_begin487    ##   Call between Leh_func_begin487 and Ltmp1899
	.long	Lset386
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset387 = Ltmp1899-Leh_func_begin487    ## >> Call Site 2 <<
	.long	Lset387
Lset388 = Ltmp1900-Ltmp1899             ##   Call between Ltmp1899 and Ltmp1900
	.long	Lset388
Lset389 = Ltmp1901-Leh_func_begin487    ##     jumps to Ltmp1901
	.long	Lset389
	.byte	0                       ##   On action: cleanup
Lset390 = Ltmp1900-Leh_func_begin487    ## >> Call Site 3 <<
	.long	Lset390
Lset391 = Leh_func_end487-Ltmp1900      ##   Call between Ltmp1900 and Leh_func_end487
	.long	Lset391
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EmmS3_
	.weak_def_can_be_hidden	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EmmS3_
	.align	4, 0x90
__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EmmS3_: ## @_ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EmmS3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1905:
	.cfi_def_cfa_offset 16
Ltmp1906:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1907:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-32(%rbp), %rcx
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1908:
	.cfi_def_cfa_offset 16
Ltmp1909:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1910:
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$328, %rsp              ## imm = 0x148
Ltmp1911:
	.cfi_offset %rbx, -24
	movq	%rdi, -288(%rbp)
	movq	%rsi, -296(%rbp)
	movq	-288(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rsi, -304(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv
	leaq	-200(%rbp), %rsi
	leaq	-104(%rbp), %rdi
	leaq	-56(%rbp), %rax
	xorl	%ecx, %ecx
	movl	%ecx, %edx
	movq	-304(%rbp), %r8         ## 8-byte Reload
	movq	%r8, -280(%rbp)
	movq	-280(%rbp), %r8
	addq	$16, %r8
	movq	%r8, -272(%rbp)
	movq	-272(%rbp), %r8
	movq	%r8, -264(%rbp)
	movq	-264(%rbp), %r8
	movq	-304(%rbp), %r9         ## 8-byte Reload
	movq	(%r9), %r10
	movq	8(%r9), %r11
	movq	-296(%rbp), %rbx
	addq	$8, %rbx
	movq	%r8, -216(%rbp)
	movq	%r10, -224(%rbp)
	movq	%r11, -232(%rbp)
	movq	%rbx, -240(%rbp)
	movq	-232(%rbp), %r8
	movq	-224(%rbp), %r10
	subq	%r10, %r8
	sarq	$3, %r8
	movq	%r8, -248(%rbp)
	movq	-248(%rbp), %r8
	movq	-240(%rbp), %r10
	movq	(%r10), %r11
	subq	%r8, %rdx
	shlq	$3, %rdx
	addq	%rdx, %r11
	movq	%r11, (%r10)
	movq	-240(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-224(%rbp), %r8
	movq	-248(%rbp), %r10
	shlq	$3, %r10
	movq	%rdi, -312(%rbp)        ## 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, -320(%rbp)        ## 8-byte Spill
	movq	%r8, %rsi
	movq	%r10, %rdx
	movq	%rax, -328(%rbp)        ## 8-byte Spill
	callq	_memcpy
	movq	-304(%rbp), %rax        ## 8-byte Reload
	movq	-296(%rbp), %rdx
	addq	$8, %rdx
	movq	%rax, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	-40(%rbp), %rdx
	movq	%rax, (%rdx)
	movq	-328(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-48(%rbp), %rsi
	movq	%rdx, (%rsi)
	movq	-304(%rbp), %rdx        ## 8-byte Reload
	addq	$8, %rdx
	movq	-296(%rbp), %rsi
	addq	$16, %rsi
	movq	%rdx, -88(%rbp)
	movq	%rsi, -96(%rbp)
	movq	-88(%rbp), %rdx
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -104(%rbp)
	movq	-96(%rbp), %rdx
	movq	%rdx, -64(%rbp)
	movq	-64(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	-88(%rbp), %rsi
	movq	%rdx, (%rsi)
	movq	-312(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -72(%rbp)
	movq	-72(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	-96(%rbp), %rdi
	movq	%rsi, (%rdi)
	movq	-304(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -128(%rbp)
	movq	-128(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -120(%rbp)
	movq	-120(%rbp), %rsi
	movq	%rsi, -112(%rbp)
	movq	-112(%rbp), %rsi
	movq	-296(%rbp), %rdi
	movq	%rdi, -152(%rbp)
	movq	-152(%rbp), %rdi
	addq	$24, %rdi
	movq	%rdi, -144(%rbp)
	movq	-144(%rbp), %rdi
	movq	%rdi, -136(%rbp)
	movq	-136(%rbp), %rdi
	movq	%rsi, -184(%rbp)
	movq	%rdi, -192(%rbp)
	movq	-184(%rbp), %rsi
	movq	%rsi, -176(%rbp)
	movq	-176(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rsi, -200(%rbp)
	movq	-192(%rbp), %rsi
	movq	%rsi, -160(%rbp)
	movq	-160(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	-184(%rbp), %rdi
	movq	%rsi, (%rdi)
	movq	-320(%rbp), %rsi        ## 8-byte Reload
	movq	%rsi, -168(%rbp)
	movq	-168(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	-192(%rbp), %r8
	movq	%rdi, (%r8)
	movq	-296(%rbp), %rdi
	movq	8(%rdi), %rdi
	movq	-296(%rbp), %r8
	movq	%rdi, (%r8)
	movq	-304(%rbp), %rdi        ## 8-byte Reload
	movq	%rdi, -208(%rbp)
	movq	-208(%rbp), %r8
	movq	8(%r8), %r9
	movq	(%r8), %r8
	subq	%r8, %r9
	sarq	$3, %r9
	movq	%r9, %rsi
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEm
	movq	-304(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -256(%rbp)
	addq	$328, %rsp              ## imm = 0x148
	popq	%rbx
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
	.weak_def_can_be_hidden	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
	.align	4, 0x90
__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev: ## @_ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1912:
	.cfi_def_cfa_offset 16
Ltmp1913:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1914:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev
	.weak_def_can_be_hidden	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev
	.align	4, 0x90
__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev: ## @_ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1915:
	.cfi_def_cfa_offset 16
Ltmp1916:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1917:
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp              ## imm = 0x140
	movq	%rdi, -280(%rbp)
	movq	-280(%rbp), %rdi
	movq	%rdi, -272(%rbp)
	movq	-272(%rbp), %rax
	movq	8(%rax), %rcx
	movq	%rax, -248(%rbp)
	movq	%rcx, -256(%rbp)
	movq	-248(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	%rax, -232(%rbp)
	movq	%rcx, -240(%rbp)
	movq	-232(%rbp), %rax
	movq	%rdi, -288(%rbp)        ## 8-byte Spill
	movq	%rax, -296(%rbp)        ## 8-byte Spill
LBB491_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-240(%rbp), %rax
	movq	-296(%rbp), %rcx        ## 8-byte Reload
	cmpq	16(%rcx), %rax
	je	LBB491_3
## BB#2:                                ##   in Loop: Header=BB491_1 Depth=1
	movq	-296(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -216(%rbp)
	movq	-216(%rbp), %rcx
	addq	$24, %rcx
	movq	%rcx, -208(%rbp)
	movq	-208(%rbp), %rcx
	movq	%rcx, -200(%rbp)
	movq	-200(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	16(%rax), %rdx
	addq	$-8, %rdx
	movq	%rdx, 16(%rax)
	movq	%rdx, -192(%rbp)
	movq	-192(%rbp), %rdx
	movq	%rcx, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-160(%rbp), %rcx
	movq	-168(%rbp), %rdx
	movq	%rcx, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movq	-144(%rbp), %rcx
	movq	-152(%rbp), %rdx
	movq	%rcx, -120(%rbp)
	movq	%rdx, -128(%rbp)
	jmp	LBB491_1
LBB491_3:                               ## %_ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE5clearEv.exit
	movq	-288(%rbp), %rax        ## 8-byte Reload
	cmpq	$0, (%rax)
	je	LBB491_6
## BB#4:
	movq	-288(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rcx
	addq	$24, %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	(%rax), %rdx
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rsi
	movq	%rsi, -24(%rbp)
	movq	-24(%rbp), %rdi
	addq	$24, %rdi
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	(%rsi), %rsi
	subq	%rsi, %rdi
	sarq	$3, %rdi
	movq	%rcx, -304(%rbp)        ## 8-byte Spill
	movq	%rdx, -312(%rbp)        ## 8-byte Spill
	movq	%rdi, -320(%rbp)        ## 8-byte Spill
## BB#5:
	movq	-304(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -72(%rbp)
	movq	-312(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -80(%rbp)
	movq	-320(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -88(%rbp)
	movq	-72(%rbp), %rsi
	movq	-80(%rbp), %rdi
	movq	-88(%rbp), %r8
	movq	%rsi, -48(%rbp)
	movq	%rdi, -56(%rbp)
	movq	%r8, -64(%rbp)
	movq	-56(%rbp), %rsi
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rdi
	callq	__ZdlPv
LBB491_6:
	addq	$320, %rsp              ## imm = 0x140
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE17__annotate_deleteEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1918:
	.cfi_def_cfa_offset 16
Ltmp1919:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1920:
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -160(%rbp)
	movq	-160(%rbp), %rdi
	movq	%rdi, -152(%rbp)
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movq	%rdi, -136(%rbp)
	movq	-136(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	%rdx, -32(%rbp)
	movq	-32(%rbp), %rdx
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rsi
	addq	$16, %rsi
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rsi
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	(%rdx), %rdx
	subq	%rdx, %rsi
	sarq	$3, %rsi
	shlq	$3, %rsi
	addq	%rsi, %rcx
	movq	%rdi, -56(%rbp)
	movq	-56(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	%rdx, -48(%rbp)
	movq	-48(%rbp), %rdx
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rsi
	movq	8(%rsi), %r8
	movq	(%rsi), %rsi
	subq	%rsi, %r8
	sarq	$3, %r8
	shlq	$3, %r8
	addq	%r8, %rdx
	movq	%rdi, -80(%rbp)
	movq	-80(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	%rsi, -72(%rbp)
	movq	-72(%rbp), %rsi
	movq	%rdi, -120(%rbp)
	movq	-120(%rbp), %r8
	movq	%r8, -112(%rbp)
	movq	-112(%rbp), %r8
	movq	%r8, -104(%rbp)
	movq	-104(%rbp), %r9
	addq	$16, %r9
	movq	%r9, -96(%rbp)
	movq	-96(%rbp), %r9
	movq	%r9, -88(%rbp)
	movq	-88(%rbp), %r9
	movq	(%r9), %r9
	movq	(%r8), %r8
	subq	%r8, %r9
	sarq	$3, %r9
	shlq	$3, %r9
	addq	%r9, %rsi
	movq	%rsi, -168(%rbp)        ## 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -176(%rbp)        ## 8-byte Spill
	movq	%rcx, %rdx
	movq	-176(%rbp), %rcx        ## 8-byte Reload
	movq	-168(%rbp), %r8         ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_
	addq	$176, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_
	.weak_def_can_be_hidden	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_
	.align	4, 0x90
__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_: ## @_ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC2EmmS3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1921:
	.cfi_def_cfa_offset 16
Ltmp1922:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1923:
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              ## imm = 0x100
	leaq	-136(%rbp), %rax
	leaq	-168(%rbp), %r8
	movq	%rdi, -208(%rbp)
	movq	%rsi, -216(%rbp)
	movq	%rdx, -224(%rbp)
	movq	%rcx, -232(%rbp)
	movq	-208(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$24, %rdx
	movq	-232(%rbp), %rsi
	movq	%rdx, -184(%rbp)
	movq	$0, -192(%rbp)
	movq	%rsi, -200(%rbp)
	movq	-184(%rbp), %rdx
	movq	-192(%rbp), %rsi
	movq	-200(%rbp), %rdi
	movq	%rdx, -160(%rbp)
	movq	%rsi, -168(%rbp)
	movq	%rdi, -176(%rbp)
	movq	-160(%rbp), %rdx
	movq	%r8, -152(%rbp)
	movq	-152(%rbp), %rsi
	movq	(%rsi), %rsi
	movq	-176(%rbp), %rdi
	movq	%rdi, -104(%rbp)
	movq	-104(%rbp), %rdi
	movq	%rdx, -128(%rbp)
	movq	%rsi, -136(%rbp)
	movq	%rdi, -144(%rbp)
	movq	-128(%rbp), %rdx
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, (%rdx)
	movq	-144(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	%rax, 8(%rdx)
	cmpq	$0, -216(%rbp)
	movq	%rcx, -240(%rbp)        ## 8-byte Spill
	je	LBB493_2
## BB#1:
	movq	-240(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rcx
	addq	$24, %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	-216(%rbp), %rdx
	movq	%rcx, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-64(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	%rcx, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	$0, -56(%rbp)
	movq	-48(%rbp), %rcx
	shlq	$3, %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	__Znwm
	movq	%rax, -248(%rbp)        ## 8-byte Spill
	jmp	LBB493_3
LBB493_2:
	xorl	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -248(%rbp)        ## 8-byte Spill
	jmp	LBB493_3
LBB493_3:
	movq	-248(%rbp), %rax        ## 8-byte Reload
	movq	-240(%rbp), %rcx        ## 8-byte Reload
	movq	%rax, (%rcx)
	movq	(%rcx), %rax
	movq	-224(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rax, 16(%rcx)
	movq	%rax, 8(%rcx)
	movq	(%rcx), %rax
	movq	-216(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rax
	movq	%rcx, -96(%rbp)
	movq	-96(%rbp), %rdx
	addq	$24, %rdx
	movq	%rdx, -88(%rbp)
	movq	-88(%rbp), %rdx
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	%rax, (%rdx)
	addq	$256, %rsp              ## imm = 0x100
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE21__push_back_slow_pathIdEEvOT_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin494:
	.cfi_lsda 16, Lexception494
## BB#0:
	pushq	%rbp
Ltmp1927:
	.cfi_def_cfa_offset 16
Ltmp1928:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1929:
	.cfi_def_cfa_register %rbp
	subq	$464, %rsp              ## imm = 0x1D0
	movq	%rdi, -344(%rbp)
	movq	%rsi, -352(%rbp)
	movq	-344(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rdi, -336(%rbp)
	movq	-336(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -328(%rbp)
	movq	-328(%rbp), %rdi
	movq	%rdi, -320(%rbp)
	movq	-320(%rbp), %rdi
	movq	%rdi, -360(%rbp)
	movq	%rsi, -312(%rbp)
	movq	-312(%rbp), %rdi
	movq	8(%rdi), %rax
	movq	(%rdi), %rdi
	subq	%rdi, %rax
	sarq	$3, %rax
	addq	$1, %rax
	movq	%rsi, -272(%rbp)
	movq	%rax, -280(%rbp)
	movq	-272(%rbp), %rax
	movq	%rax, %rdi
	movq	%rsi, -424(%rbp)        ## 8-byte Spill
	movq	%rax, -432(%rbp)        ## 8-byte Spill
	callq	__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv
	movq	%rax, -288(%rbp)
	movq	-280(%rbp), %rax
	cmpq	-288(%rbp), %rax
	jbe	LBB494_2
## BB#1:
	movq	-432(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
LBB494_2:
	movq	-432(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -256(%rbp)
	movq	-256(%rbp), %rcx
	movq	%rcx, -248(%rbp)
	movq	-248(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	-240(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -232(%rbp)
	movq	-232(%rbp), %rdx
	movq	%rdx, -224(%rbp)
	movq	-224(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	movq	%rdx, -296(%rbp)
	movq	-296(%rbp), %rcx
	movq	-288(%rbp), %rdx
	shrq	$1, %rdx
	cmpq	%rdx, %rcx
	jb	LBB494_4
## BB#3:
	movq	-288(%rbp), %rax
	movq	%rax, -264(%rbp)
	jmp	LBB494_8
LBB494_4:
	leaq	-176(%rbp), %rax
	leaq	-280(%rbp), %rcx
	leaq	-304(%rbp), %rdx
	movq	-296(%rbp), %rsi
	shlq	$1, %rsi
	movq	%rsi, -304(%rbp)
	movq	%rdx, -200(%rbp)
	movq	%rcx, -208(%rbp)
	movq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	%rcx, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	-184(%rbp), %rcx
	movq	-192(%rbp), %rdx
	movq	%rax, -152(%rbp)
	movq	%rcx, -160(%rbp)
	movq	%rdx, -168(%rbp)
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	-168(%rbp), %rcx
	cmpq	(%rcx), %rax
	jae	LBB494_6
## BB#5:
	movq	-192(%rbp), %rax
	movq	%rax, -440(%rbp)        ## 8-byte Spill
	jmp	LBB494_7
LBB494_6:
	movq	-184(%rbp), %rax
	movq	%rax, -440(%rbp)        ## 8-byte Spill
LBB494_7:                               ## %_ZNSt3__13maxImEERKT_S3_S3_.exit.i
	movq	-440(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, -264(%rbp)
LBB494_8:                               ## %_ZNKSt3__16vectorIdNS_9allocatorIdEEE11__recommendEm.exit
	leaq	-400(%rbp), %rdi
	movq	-264(%rbp), %rsi
	movq	-424(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	movq	-360(%rbp), %rcx
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EmmS3_
	movq	-360(%rbp), %rax
	movq	-384(%rbp), %rcx
	movq	%rcx, -136(%rbp)
	movq	-136(%rbp), %rcx
	movq	-352(%rbp), %rdx
	movq	%rdx, -128(%rbp)
	movq	-128(%rbp), %rdx
	movq	%rax, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%rdx, -104(%rbp)
	movq	-88(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movq	%rdx, -80(%rbp)
	movq	-80(%rbp), %rdx
	movq	%rax, -56(%rbp)
	movq	%rcx, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rdx
	movq	%rax, -16(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -448(%rbp)        ## 8-byte Spill
	je	LBB494_10
## BB#9:
	movq	-448(%rbp), %rax        ## 8-byte Reload
	movq	-32(%rbp), %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movsd	(%rcx), %xmm0
	movq	-448(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -456(%rbp)        ## 8-byte Spill
LBB494_10:                              ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJdEEEvRS2_PT_DpOT0_.exit
## BB#11:
	movq	-384(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -384(%rbp)
Ltmp1924:
	leaq	-400(%rbp), %rsi
	movq	-424(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE
Ltmp1925:
	jmp	LBB494_12
LBB494_12:
	leaq	-400(%rbp), %rdi
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
	addq	$464, %rsp              ## imm = 0x1D0
	popq	%rbp
	retq
LBB494_13:
Ltmp1926:
	leaq	-400(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -408(%rbp)
	movl	%ecx, -412(%rbp)
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
## BB#14:
	movq	-408(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end494:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table494:
Lexception494:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset392 = Leh_func_begin494-Leh_func_begin494 ## >> Call Site 1 <<
	.long	Lset392
Lset393 = Ltmp1924-Leh_func_begin494    ##   Call between Leh_func_begin494 and Ltmp1924
	.long	Lset393
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset394 = Ltmp1924-Leh_func_begin494    ## >> Call Site 2 <<
	.long	Lset394
Lset395 = Ltmp1925-Ltmp1924             ##   Call between Ltmp1924 and Ltmp1925
	.long	Lset395
Lset396 = Ltmp1926-Leh_func_begin494    ##     jumps to Ltmp1926
	.long	Lset396
	.byte	0                       ##   On action: cleanup
Lset397 = Ltmp1925-Leh_func_begin494    ## >> Call Site 3 <<
	.long	Lset397
Lset398 = Leh_func_end494-Ltmp1925      ##   Call between Ltmp1925 and Leh_func_end494
	.long	Lset398
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEE8__appendEm
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin495:
	.cfi_lsda 16, Lexception495
## BB#0:
	pushq	%rbp
Ltmp1935:
	.cfi_def_cfa_offset 16
Ltmp1936:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1937:
	.cfi_def_cfa_register %rbp
	subq	$336, %rsp              ## imm = 0x150
	movq	%rdi, -232(%rbp)
	movq	%rsi, -240(%rbp)
	movq	-232(%rbp), %rsi
	movq	%rsi, %rdi
	movq	%rdi, -224(%rbp)
	movq	-224(%rbp), %rdi
	addq	$16, %rdi
	movq	%rdi, -216(%rbp)
	movq	-216(%rbp), %rdi
	movq	%rdi, -208(%rbp)
	movq	-208(%rbp), %rdi
	movq	(%rdi), %rdi
	movq	8(%rsi), %rax
	subq	%rax, %rdi
	sarq	$3, %rdi
	cmpq	-240(%rbp), %rdi
	movq	%rsi, -312(%rbp)        ## 8-byte Spill
	jb	LBB495_2
## BB#1:
	movq	-240(%rbp), %rsi
	movq	-312(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE18__construct_at_endEm
	jmp	LBB495_14
LBB495_2:
	movq	-312(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rax
	movq	%rax, -248(%rbp)
	movq	-312(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rcx
	movq	8(%rcx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	addq	-240(%rbp), %rdx
	movq	%rax, -136(%rbp)
	movq	%rdx, -144(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdi
	movq	%rcx, -320(%rbp)        ## 8-byte Spill
	callq	__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv
	movq	%rax, -152(%rbp)
	movq	-144(%rbp), %rax
	cmpq	-152(%rbp), %rax
	jbe	LBB495_4
## BB#3:
	movq	-320(%rbp), %rax        ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv
LBB495_4:
	movq	-320(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rcx
	movq	%rcx, -112(%rbp)
	movq	-112(%rbp), %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rdx
	addq	$16, %rdx
	movq	%rdx, -96(%rbp)
	movq	-96(%rbp), %rdx
	movq	%rdx, -88(%rbp)
	movq	-88(%rbp), %rdx
	movq	(%rdx), %rdx
	movq	(%rcx), %rcx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	movq	%rdx, -160(%rbp)
	movq	-160(%rbp), %rcx
	movq	-152(%rbp), %rdx
	shrq	$1, %rdx
	cmpq	%rdx, %rcx
	jb	LBB495_6
## BB#5:
	movq	-152(%rbp), %rax
	movq	%rax, -128(%rbp)
	jmp	LBB495_10
LBB495_6:
	leaq	-40(%rbp), %rax
	leaq	-144(%rbp), %rcx
	leaq	-168(%rbp), %rdx
	movq	-160(%rbp), %rsi
	shlq	$1, %rsi
	movq	%rsi, -168(%rbp)
	movq	%rdx, -64(%rbp)
	movq	%rcx, -72(%rbp)
	movq	-64(%rbp), %rcx
	movq	-72(%rbp), %rdx
	movq	%rcx, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-48(%rbp), %rcx
	movq	-56(%rbp), %rdx
	movq	%rax, -16(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	-32(%rbp), %rcx
	cmpq	(%rcx), %rax
	jae	LBB495_8
## BB#7:
	movq	-56(%rbp), %rax
	movq	%rax, -328(%rbp)        ## 8-byte Spill
	jmp	LBB495_9
LBB495_8:
	movq	-48(%rbp), %rax
	movq	%rax, -328(%rbp)        ## 8-byte Spill
LBB495_9:                               ## %_ZNSt3__13maxImEERKT_S3_S3_.exit.i
	movq	-328(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
LBB495_10:                              ## %_ZNKSt3__16vectorIdNS_9allocatorIdEEE11__recommendEm.exit
	movq	-128(%rbp), %rsi
	movq	-312(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -8(%rbp)
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	subq	%rcx, %rdx
	sarq	$3, %rdx
	movq	-248(%rbp), %rcx
	leaq	-288(%rbp), %rdi
	movq	%rdi, -336(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEEC1EmmS3_
	movq	-240(%rbp), %rsi
Ltmp1930:
	movq	-336(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEm
Ltmp1931:
	jmp	LBB495_11
LBB495_11:
Ltmp1932:
	leaq	-288(%rbp), %rsi
	movq	-312(%rbp), %rdi        ## 8-byte Reload
	callq	__ZNSt3__16vectorIdNS_9allocatorIdEEE26__swap_out_circular_bufferERNS_14__split_bufferIdRS2_EE
Ltmp1933:
	jmp	LBB495_12
LBB495_12:
	leaq	-288(%rbp), %rdi
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
	jmp	LBB495_14
LBB495_13:
Ltmp1934:
	leaq	-288(%rbp), %rdi
	movl	%edx, %ecx
	movq	%rax, -296(%rbp)
	movl	%ecx, -300(%rbp)
	callq	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEED1Ev
	jmp	LBB495_15
LBB495_14:
	addq	$336, %rsp              ## imm = 0x150
	popq	%rbp
	retq
LBB495_15:
	movq	-296(%rbp), %rdi
	callq	__Unwind_Resume
	.cfi_endproc
Leh_func_end495:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table495:
Lexception495:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.byte	41                      ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	39                      ## Call site table length
Lset399 = Leh_func_begin495-Leh_func_begin495 ## >> Call Site 1 <<
	.long	Lset399
Lset400 = Ltmp1930-Leh_func_begin495    ##   Call between Leh_func_begin495 and Ltmp1930
	.long	Lset400
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset401 = Ltmp1930-Leh_func_begin495    ## >> Call Site 2 <<
	.long	Lset401
Lset402 = Ltmp1933-Ltmp1930             ##   Call between Ltmp1930 and Ltmp1933
	.long	Lset402
Lset403 = Ltmp1934-Leh_func_begin495    ##     jumps to Ltmp1934
	.long	Lset403
	.byte	0                       ##   On action: cleanup
Lset404 = Ltmp1933-Leh_func_begin495    ## >> Call Site 3 <<
	.long	Lset404
Lset405 = Leh_func_end495-Ltmp1933      ##   Call between Ltmp1933 and Leh_func_end495
	.long	Lset405
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEm
	.weak_def_can_be_hidden	__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEm
	.align	4, 0x90
__ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEm: ## @_ZNSt3__114__split_bufferIdRNS_9allocatorIdEEE18__construct_at_endEm
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1938:
	.cfi_def_cfa_offset 16
Ltmp1939:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1940:
	.cfi_def_cfa_register %rbp
	subq	$24, %rsp
	movq	%rdi, -112(%rbp)
	movq	%rsi, -120(%rbp)
	movq	-112(%rbp), %rsi
	movq	%rsi, -104(%rbp)
	movq	-104(%rbp), %rdi
	addq	$24, %rdi
	movq	%rdi, -96(%rbp)
	movq	-96(%rbp), %rdi
	movq	%rdi, -88(%rbp)
	movq	-88(%rbp), %rdi
	movq	8(%rdi), %rdi
	movq	%rdi, -128(%rbp)
	movq	%rsi, -136(%rbp)        ## 8-byte Spill
LBB496_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-128(%rbp), %rax
	movq	-136(%rbp), %rcx        ## 8-byte Reload
	movq	16(%rcx), %rdx
	movq	%rdx, -8(%rbp)
	movq	-8(%rbp), %rdx
	movq	%rax, -56(%rbp)
	movq	%rdx, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rax, -40(%rbp)
	movq	%rdx, -48(%rbp)
	movq	-40(%rbp), %rax
	movq	-48(%rbp), %rdx
	movq	%rax, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, %rax
	movq	%rax, -144(%rbp)        ## 8-byte Spill
	je	LBB496_3
## BB#2:                                ##   in Loop: Header=BB496_1 Depth=1
	xorps	%xmm0, %xmm0
	movq	-144(%rbp), %rax        ## 8-byte Reload
	movq	-144(%rbp), %rcx        ## 8-byte Reload
	movsd	%xmm0, (%rcx)
	movq	%rax, -152(%rbp)        ## 8-byte Spill
LBB496_3:                               ## %_ZNSt3__116allocator_traitsINS_9allocatorIdEEE9constructIdJEEEvRS2_PT_DpOT0_.exit
                                        ##   in Loop: Header=BB496_1 Depth=1
	movq	-136(%rbp), %rax        ## 8-byte Reload
	movq	16(%rax), %rcx
	addq	$8, %rcx
	movq	%rcx, 16(%rax)
	movq	-120(%rbp), %rcx
	addq	$-1, %rcx
	movq	%rcx, -120(%rbp)
## BB#4:                                ##   in Loop: Header=BB496_1 Depth=1
	cmpq	$0, -120(%rbp)
	ja	LBB496_1
## BB#5:
	addq	$24, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev: ## @_ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1941:
	.cfi_def_cfa_offset 16
Ltmp1942:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1943:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev: ## @_ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1944:
	.cfi_def_cfa_offset 16
Ltmp1945:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1946:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev: ## @_ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1947:
	.cfi_def_cfa_offset 16
Ltmp1948:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1949:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev: ## @_ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1950:
	.cfi_def_cfa_offset 16
Ltmp1951:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1952:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev: ## @_ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1953:
	.cfi_def_cfa_offset 16
Ltmp1954:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1955:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev
	.weak_def_can_be_hidden	__ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev
	.align	4, 0x90
__ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev: ## @_ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1956:
	.cfi_def_cfa_offset 16
Ltmp1957:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1958:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6detail11multi_array9index_genILi0ELi0EEC2Ev
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array9index_genILi0ELi0EEC2Ev
	.align	4, 0x90
__ZN5boost6detail11multi_array9index_genILi0ELi0EEC2Ev: ## @_ZN5boost6detail11multi_array9index_genILi0ELi0EEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1959:
	.cfi_def_cfa_offset 16
Ltmp1960:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1961:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC1Ev
	.weak_def_can_be_hidden	__ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC1Ev
	.align	4, 0x90
__ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC1Ev: ## @_ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1962:
	.cfi_def_cfa_offset 16
Ltmp1963:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1964:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC2Ev
	.weak_def_can_be_hidden	__ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC2Ev
	.align	4, 0x90
__ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC2Ev: ## @_ZN5boost5arrayINS_6detail11multi_array11index_rangeIlmEELm1EEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1965:
	.cfi_def_cfa_offset 16
Ltmp1966:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1967:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	addq	$32, %rax
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
LBB505_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	callq	__ZN5boost6detail11multi_array11index_rangeIlmEC1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$32, %rax
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	cmpq	%rdi, %rax
	movq	%rax, -24(%rbp)         ## 8-byte Spill
	jne	LBB505_1
## BB#2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6detail11multi_array11index_rangeIlmEC1Ev
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array11index_rangeIlmEC1Ev
	.align	4, 0x90
__ZN5boost6detail11multi_array11index_rangeIlmEC1Ev: ## @_ZN5boost6detail11multi_array11index_rangeIlmEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1968:
	.cfi_def_cfa_offset 16
Ltmp1969:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1970:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6detail11multi_array11index_rangeIlmEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6detail11multi_array11index_rangeIlmEC2Ev
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array11index_rangeIlmEC2Ev
	.align	4, 0x90
__ZN5boost6detail11multi_array11index_rangeIlmEC2Ev: ## @_ZN5boost6detail11multi_array11index_rangeIlmEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1971:
	.cfi_def_cfa_offset 16
Ltmp1972:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1973:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	callq	__ZN5boost6detail11multi_array11index_rangeIlmE10from_startEv
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	movq	%rax, (%rdi)
	callq	__ZN5boost6detail11multi_array11index_rangeIlmE6to_endEv
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	movq	%rax, 8(%rdi)
	movq	$1, 16(%rdi)
	movb	$0, 24(%rdi)
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6detail11multi_array11index_rangeIlmE10from_startEv
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array11index_rangeIlmE10from_startEv
	.align	4, 0x90
__ZN5boost6detail11multi_array11index_rangeIlmE10from_startEv: ## @_ZN5boost6detail11multi_array11index_rangeIlmE10from_startEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1974:
	.cfi_def_cfa_offset 16
Ltmp1975:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1976:
	.cfi_def_cfa_register %rbp
	movabsq	$-9223372036854775808, %rax ## imm = 0x8000000000000000
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6detail11multi_array11index_rangeIlmE6to_endEv
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array11index_rangeIlmE6to_endEv
	.align	4, 0x90
__ZN5boost6detail11multi_array11index_rangeIlmE6to_endEv: ## @_ZN5boost6detail11multi_array11index_rangeIlmE6to_endEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1977:
	.cfi_def_cfa_offset 16
Ltmp1978:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1979:
	.cfi_def_cfa_register %rbp
	movabsq	$9223372036854775807, %rax ## imm = 0x7FFFFFFFFFFFFFFF
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6detail11multi_array10extent_genILm0EEC2Ev
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array10extent_genILm0EEC2Ev
	.align	4, 0x90
__ZN5boost6detail11multi_array10extent_genILm0EEC2Ev: ## @_ZN5boost6detail11multi_array10extent_genILm0EEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1980:
	.cfi_def_cfa_offset 16
Ltmp1981:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1982:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC1Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC1Ev
	.weak_def_can_be_hidden	__ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC1Ev
	.align	4, 0x90
__ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC1Ev: ## @_ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1983:
	.cfi_def_cfa_offset 16
Ltmp1984:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1985:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC2Ev
	.weak_def_can_be_hidden	__ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC2Ev
	.align	4, 0x90
__ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC2Ev: ## @_ZN5boost5arrayINS_6detail11multi_array12extent_rangeIlmEELm1EEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1986:
	.cfi_def_cfa_offset 16
Ltmp1987:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1988:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)         ## 8-byte Spill
	movq	%rdi, -24(%rbp)         ## 8-byte Spill
LBB512_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	callq	__ZN5boost6detail11multi_array12extent_rangeIlmEC1Ev
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$16, %rax
	movq	-16(%rbp), %rdi         ## 8-byte Reload
	cmpq	%rdi, %rax
	movq	%rax, -24(%rbp)         ## 8-byte Spill
	jne	LBB512_1
## BB#2:
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6detail11multi_array12extent_rangeIlmEC1Ev
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array12extent_rangeIlmEC1Ev
	.align	4, 0x90
__ZN5boost6detail11multi_array12extent_rangeIlmEC1Ev: ## @_ZN5boost6detail11multi_array12extent_rangeIlmEC1Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1989:
	.cfi_def_cfa_offset 16
Ltmp1990:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1991:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost6detail11multi_array12extent_rangeIlmEC2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6detail11multi_array12extent_rangeIlmEC2Ev
	.weak_def_can_be_hidden	__ZN5boost6detail11multi_array12extent_rangeIlmEC2Ev
	.align	4, 0x90
__ZN5boost6detail11multi_array12extent_rangeIlmEC2Ev: ## @_ZN5boost6detail11multi_array12extent_rangeIlmEC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1992:
	.cfi_def_cfa_offset 16
Ltmp1993:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1994:
	.cfi_def_cfa_register %rbp
	leaq	-56(%rbp), %rax
	leaq	-52(%rbp), %rcx
	movq	%rdi, -48(%rbp)
	movq	-48(%rbp), %rdi
	movl	$0, -52(%rbp)
	movl	$0, -56(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rcx, -16(%rbp)
	movq	-16(%rbp), %rcx
	movslq	(%rcx), %rcx
	movq	%rcx, (%rax)
	movq	-40(%rbp), %rcx
	movq	%rcx, -8(%rbp)
	movq	-8(%rbp), %rcx
	movslq	(%rcx), %rcx
	movq	%rcx, 8(%rax)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC2Ev
	.weak_def_can_be_hidden	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC2Ev
	.align	4, 0x90
__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC2Ev: ## @_ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4initC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1995:
	.cfi_def_cfa_offset 16
Ltmp1996:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp1997:
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	leaq	-32(%rbp), %rax
	movq	%rdi, -8(%rbp)
	fld1
	fstpt	-32(%rbp)
	movq	%rax, %rdi
	callq	__ZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_
	leaq	-32(%rbp), %rdi
	fstpt	-44(%rbp)               ## 10-byte Folded Spill
	callq	__ZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_
	leaq	-32(%rbp), %rdi
	fstpt	-56(%rbp)               ## 10-byte Folded Spill
	callq	__ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_
	leaq	-32(%rbp), %rdi
	fstpt	-68(%rbp)               ## 10-byte Folded Spill
	callq	__ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_
	fstpt	-80(%rbp)               ## 10-byte Folded Spill
	callq	__ZN5boost4math7lanczos12lanczos17m641gEv
	movsd	%xmm0, -88(%rbp)        ## 8-byte Spill
	addq	$96, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_
	.weak_def_can_be_hidden	__ZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_
	.align	4, 0x90
__ZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_: ## @_ZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp1998:
	.cfi_def_cfa_offset 16
Ltmp1999:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2000:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	callq	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE17force_instantiateEv
	movq	-8(%rbp), %rdx
	movq	__ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E3num@GOTPCREL(%rip), %rdi
	movq	__ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E5denom@GOTPCREL(%rip), %rsi
	callq	__ZN5boost4math5tools17evaluate_rationalILm17EeeeEET2_RAT__KT0_RAT__KT1_RKS3_
	fld	%st(0)
	fstpt	-20(%rbp)               ## 10-byte Folded Spill
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_
	.weak_def_can_be_hidden	__ZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_
	.align	4, 0x90
__ZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_: ## @_ZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2001:
	.cfi_def_cfa_offset 16
Ltmp2002:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2003:
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movq	%rdi, -8(%rbp)
	callq	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE17force_instantiateEv
	movq	-8(%rbp), %rdx
	movq	__ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E3num@GOTPCREL(%rip), %rdi
	movq	__ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E5denom@GOTPCREL(%rip), %rsi
	callq	__ZN5boost4math5tools17evaluate_rationalILm17EeeeEET2_RAT__KT0_RAT__KT1_RKS3_
	fld	%st(0)
	fstpt	-20(%rbp)               ## 10-byte Folded Spill
	addq	$32, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_
	.weak_def_can_be_hidden	__ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_
	.align	4, 0x90
__ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_: ## @_ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2004:
	.cfi_def_cfa_offset 16
Ltmp2005:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2006:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movq	%rdi, -8(%rbp)
	callq	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE17force_instantiateEv
	fldz
	fstpt	-32(%rbp)
	movl	$1, -36(%rbp)
LBB518_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	cmpq	$16, %rcx
	ja	LBB518_4
## BB#2:                                ##   in Loop: Header=BB518_1 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, %edx
	decl	%edx
	movl	%edx, %esi
	shlq	$4, %rsi
	movq	__ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_E1d@GOTPCREL(%rip), %rdi
	fldt	(%rdi,%rsi)
	movq	-8(%rbp), %rsi
	fldt	(%rsi)
	fmul	%st(0), %st(1)
	movq	%rcx, -48(%rbp)
	fildll	-48(%rbp)
	fmulp	%st(1)
	imull	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -56(%rbp)
	fildll	-56(%rbp)
	faddp	%st(1)
	fdivrp	%st(1)
	fldt	-32(%rbp)
	fsubp	%st(1)
	fstpt	-32(%rbp)
## BB#3:                                ##   in Loop: Header=BB518_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	LBB518_1
LBB518_4:
	fldt	-32(%rbp)
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal4,4byte_literals
	.align	2
LCPI519_0:
	.long	1073741824              ## float 2
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_
	.weak_def_can_be_hidden	__ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_
	.align	4, 0x90
__ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_: ## @_ZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2007:
	.cfi_def_cfa_offset 16
Ltmp2008:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2009:
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -8(%rbp)
	callq	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE17force_instantiateEv
	fldz
	fstpt	-32(%rbp)
	movq	-8(%rbp), %rdi
	fldt	(%rdi)
	flds	LCPI519_0(%rip)
	faddp	%st(1)
	fstpt	-48(%rbp)
	movl	$1, -52(%rbp)
LBB519_1:                               ## =>This Inner Loop Header: Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, %ecx
	cmpq	$16, %rcx
	ja	LBB519_4
## BB#2:                                ##   in Loop: Header=BB519_1 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, %ecx
	movl	%ecx, %eax
	movl	%eax, %edx
	decl	%edx
	movl	%edx, %esi
	shlq	$4, %rsi
	movq	__ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_E1d@GOTPCREL(%rip), %rdi
	fldt	(%rdi,%rsi)
	movq	-8(%rbp), %rsi
	fldt	(%rsi)
	fmulp	%st(1)
	fldt	-48(%rbp)
	movq	%rcx, -64(%rbp)
	fildll	-64(%rbp)
	fmul	%st(1)
	faddp	%st(1)
	imull	%eax, %eax
	movl	%eax, %ecx
	movq	%rcx, -72(%rbp)
	fildll	-72(%rbp)
	faddp	%st(1)
	fld1
	fchs
	faddp	%st(1)
	fdivrp	%st(1)
	fldt	-32(%rbp)
	fsubp	%st(1)
	fstpt	-32(%rbp)
## BB#3:                                ##   in Loop: Header=BB519_1 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	LBB519_1
LBB519_4:
	fldt	-32(%rbp)
	addq	$80, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__literal8,8byte_literals
	.align	3
LCPI520_0:
	.quad	4623071806624890880     ## double 12.225222736597061
	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZN5boost4math7lanczos12lanczos17m641gEv
	.weak_def_can_be_hidden	__ZN5boost4math7lanczos12lanczos17m641gEv
	.align	4, 0x90
__ZN5boost4math7lanczos12lanczos17m641gEv: ## @_ZN5boost4math7lanczos12lanczos17m641gEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2010:
	.cfi_def_cfa_offset 16
Ltmp2011:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2012:
	.cfi_def_cfa_register %rbp
	movsd	LCPI520_0(%rip), %xmm0
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE17force_instantiateEv
	.weak_def_can_be_hidden	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE17force_instantiateEv
	.align	4, 0x90
__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE17force_instantiateEv: ## @_ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE17force_instantiateEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2013:
	.cfi_def_cfa_offset 16
Ltmp2014:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2015:
	.cfi_def_cfa_register %rbp
	movq	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE@GOTPCREL(%rip), %rdi
	callq	__ZNK5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4init17force_instantiateEv
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNK5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4init17force_instantiateEv
	.weak_def_can_be_hidden	__ZNK5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4init17force_instantiateEv
	.align	4, 0x90
__ZNK5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4init17force_instantiateEv: ## @_ZNK5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE4init17force_instantiateEv
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2016:
	.cfi_def_cfa_offset 16
Ltmp2017:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2018:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost4math5tools17evaluate_rationalILm17EeeeEET2_RAT__KT0_RAT__KT1_RKS3_
	.weak_def_can_be_hidden	__ZN5boost4math5tools17evaluate_rationalILm17EeeeEET2_RAT__KT0_RAT__KT1_RKS3_
	.align	4, 0x90
__ZN5boost4math5tools17evaluate_rationalILm17EeeeEET2_RAT__KT0_RAT__KT1_RKS3_: ## @_ZN5boost4math5tools17evaluate_rationalILm17EeeeEET2_RAT__KT0_RAT__KT1_RKS3_
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2019:
	.cfi_def_cfa_offset 16
Ltmp2020:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2021:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-8(%rbp), %rdi
	movq	-16(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %ecx
	callq	__ZN5boost4math5tools6detail23evaluate_rational_c_impIeeeEET1_PKT_PKT0_RKS4_PKN4mpl_4int_ILi17EEE
	fld	%st(0)
	fstpt	-36(%rbp)               ## 10-byte Folded Spill
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost4math5tools6detail23evaluate_rational_c_impIeeeEET1_PKT_PKT0_RKS4_PKN4mpl_4int_ILi17EEE
	.weak_def_can_be_hidden	__ZN5boost4math5tools6detail23evaluate_rational_c_impIeeeEET1_PKT_PKT0_RKS4_PKN4mpl_4int_ILi17EEE
	.align	4, 0x90
__ZN5boost4math5tools6detail23evaluate_rational_c_impIeeeEET1_PKT_PKT0_RKS4_PKN4mpl_4int_ILi17EEE: ## @_ZN5boost4math5tools6detail23evaluate_rational_c_impIeeeEET1_PKT_PKT0_RKS4_PKN4mpl_4int_ILi17EEE
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2022:
	.cfi_def_cfa_offset 16
Ltmp2023:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2024:
	.cfi_def_cfa_register %rbp
	subq	$272, %rsp              ## imm = 0x110
	movl	$1, %eax
	movl	%eax, %r8d
	movq	___stack_chk_guard@GOTPCREL(%rip), %r9
	movq	(%r9), %r9
	movq	%r9, -8(%rbp)
	movq	%rdi, -168(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	%rcx, -192(%rbp)
	movq	-184(%rbp), %rcx
	fldt	(%rcx)
	fld1
	fucompi	%st(1)
	fstp	%st(0)
	movq	%r8, -248(%rbp)         ## 8-byte Spill
	jb	LBB524_2
	jmp	LBB524_1
LBB524_1:
	movq	-184(%rbp), %rax
	fldt	(%rax)
	fmul	%st(0), %st(0)
	fld	%st(0)
	fstpt	-208(%rbp)
	movq	-168(%rbp), %rax
	fldt	256(%rax)
	fmulp	%st(1)
	fldt	224(%rax)
	faddp	%st(1)
	fstpt	-80(%rbp)
	movq	-168(%rbp), %rax
	fldt	240(%rax)
	fldt	-208(%rbp)
	fmulp	%st(1)
	fldt	208(%rax)
	faddp	%st(1)
	fstpt	-64(%rbp)
	movq	-176(%rbp), %rax
	fldt	256(%rax)
	fldt	-208(%rbp)
	fmulp	%st(1)
	fldt	224(%rax)
	faddp	%st(1)
	fstpt	-48(%rbp)
	movq	-176(%rbp), %rax
	fldt	240(%rax)
	fldt	-208(%rbp)
	fmulp	%st(1)
	fldt	208(%rax)
	faddp	%st(1)
	fstpt	-32(%rbp)
	fldt	-208(%rbp)
	fldt	-80(%rbp)
	fmulp	%st(1)
	fstpt	-80(%rbp)
	fldt	-208(%rbp)
	fldt	-64(%rbp)
	fmulp	%st(1)
	fstpt	-64(%rbp)
	fldt	-208(%rbp)
	fldt	-48(%rbp)
	fmulp	%st(1)
	fstpt	-48(%rbp)
	fldt	-208(%rbp)
	fldt	-32(%rbp)
	fmulp	%st(1)
	fstpt	-32(%rbp)
	movq	-168(%rbp), %rax
	fldt	192(%rax)
	fldt	-80(%rbp)
	faddp	%st(1)
	fstpt	-80(%rbp)
	movq	-168(%rbp), %rax
	fldt	176(%rax)
	fldt	-64(%rbp)
	faddp	%st(1)
	fstpt	-64(%rbp)
	movq	-176(%rbp), %rax
	fldt	192(%rax)
	fldt	-48(%rbp)
	faddp	%st(1)
	fstpt	-48(%rbp)
	movq	-176(%rbp), %rax
	fldt	176(%rax)
	fldt	-32(%rbp)
	faddp	%st(1)
	fstpt	-32(%rbp)
	fldt	-208(%rbp)
	fldt	-80(%rbp)
	fmulp	%st(1)
	fstpt	-80(%rbp)
	fldt	-208(%rbp)
	fldt	-64(%rbp)
	fmulp	%st(1)
	fstpt	-64(%rbp)
	fldt	-208(%rbp)
	fldt	-48(%rbp)
	fmulp	%st(1)
	fstpt	-48(%rbp)
	fldt	-208(%rbp)
	fldt	-32(%rbp)
	fmulp	%st(1)
	fstpt	-32(%rbp)
	movq	-168(%rbp), %rax
	fldt	160(%rax)
	fldt	-80(%rbp)
	faddp	%st(1)
	fstpt	-80(%rbp)
	movq	-168(%rbp), %rax
	fldt	144(%rax)
	fldt	-64(%rbp)
	faddp	%st(1)
	fstpt	-64(%rbp)
	movq	-176(%rbp), %rax
	fldt	160(%rax)
	fldt	-48(%rbp)
	faddp	%st(1)
	fstpt	-48(%rbp)
	movq	-176(%rbp), %rax
	fldt	144(%rax)
	fldt	-32(%rbp)
	faddp	%st(1)
	fstpt	-32(%rbp)
	fldt	-208(%rbp)
	fldt	-80(%rbp)
	fmulp	%st(1)
	fstpt	-80(%rbp)
	fldt	-208(%rbp)
	fldt	-64(%rbp)
	fmulp	%st(1)
	fstpt	-64(%rbp)
	fldt	-208(%rbp)
	fldt	-48(%rbp)
	fmulp	%st(1)
	fstpt	-48(%rbp)
	fldt	-208(%rbp)
	fldt	-32(%rbp)
	fmulp	%st(1)
	fstpt	-32(%rbp)
	movq	-168(%rbp), %rax
	fldt	128(%rax)
	fldt	-80(%rbp)
	faddp	%st(1)
	fstpt	-80(%rbp)
	movq	-168(%rbp), %rax
	fldt	112(%rax)
	fldt	-64(%rbp)
	faddp	%st(1)
	fstpt	-64(%rbp)
	movq	-176(%rbp), %rax
	fldt	128(%rax)
	fldt	-48(%rbp)
	faddp	%st(1)
	fstpt	-48(%rbp)
	movq	-176(%rbp), %rax
	fldt	112(%rax)
	fldt	-32(%rbp)
	faddp	%st(1)
	fstpt	-32(%rbp)
	fldt	-208(%rbp)
	fldt	-80(%rbp)
	fmulp	%st(1)
	fstpt	-80(%rbp)
	fldt	-208(%rbp)
	fldt	-64(%rbp)
	fmulp	%st(1)
	fstpt	-64(%rbp)
	fldt	-208(%rbp)
	fldt	-48(%rbp)
	fmulp	%st(1)
	fstpt	-48(%rbp)
	fldt	-208(%rbp)
	fldt	-32(%rbp)
	fmulp	%st(1)
	fstpt	-32(%rbp)
	movq	-168(%rbp), %rax
	fldt	96(%rax)
	fldt	-80(%rbp)
	faddp	%st(1)
	fstpt	-80(%rbp)
	movq	-168(%rbp), %rax
	fldt	80(%rax)
	fldt	-64(%rbp)
	faddp	%st(1)
	fstpt	-64(%rbp)
	movq	-176(%rbp), %rax
	fldt	96(%rax)
	fldt	-48(%rbp)
	faddp	%st(1)
	fstpt	-48(%rbp)
	movq	-176(%rbp), %rax
	fldt	80(%rax)
	fldt	-32(%rbp)
	faddp	%st(1)
	fstpt	-32(%rbp)
	fldt	-208(%rbp)
	fldt	-80(%rbp)
	fmulp	%st(1)
	fstpt	-80(%rbp)
	fldt	-208(%rbp)
	fldt	-64(%rbp)
	fmulp	%st(1)
	fstpt	-64(%rbp)
	fldt	-208(%rbp)
	fldt	-48(%rbp)
	fmulp	%st(1)
	fstpt	-48(%rbp)
	fldt	-208(%rbp)
	fldt	-32(%rbp)
	fmulp	%st(1)
	fstpt	-32(%rbp)
	movq	-168(%rbp), %rax
	fldt	64(%rax)
	fldt	-80(%rbp)
	faddp	%st(1)
	fstpt	-80(%rbp)
	movq	-168(%rbp), %rax
	fldt	48(%rax)
	fldt	-64(%rbp)
	faddp	%st(1)
	fstpt	-64(%rbp)
	movq	-176(%rbp), %rax
	fldt	64(%rax)
	fldt	-48(%rbp)
	faddp	%st(1)
	fstpt	-48(%rbp)
	movq	-176(%rbp), %rax
	fldt	48(%rax)
	fldt	-32(%rbp)
	faddp	%st(1)
	fstpt	-32(%rbp)
	fldt	-208(%rbp)
	fldt	-80(%rbp)
	fmulp	%st(1)
	fstpt	-80(%rbp)
	fldt	-208(%rbp)
	fldt	-64(%rbp)
	fmulp	%st(1)
	fstpt	-64(%rbp)
	fldt	-208(%rbp)
	fldt	-48(%rbp)
	fmulp	%st(1)
	fstpt	-48(%rbp)
	fldt	-208(%rbp)
	fldt	-32(%rbp)
	fmulp	%st(1)
	fstpt	-32(%rbp)
	movq	-168(%rbp), %rax
	fldt	32(%rax)
	fldt	-80(%rbp)
	faddp	%st(1)
	fstpt	-80(%rbp)
	movq	-168(%rbp), %rax
	fldt	16(%rax)
	fldt	-64(%rbp)
	faddp	%st(1)
	fstpt	-64(%rbp)
	movq	-176(%rbp), %rax
	fldt	32(%rax)
	fldt	-48(%rbp)
	faddp	%st(1)
	fstpt	-48(%rbp)
	movq	-176(%rbp), %rax
	fldt	16(%rax)
	fldt	-32(%rbp)
	faddp	%st(1)
	fstpt	-32(%rbp)
	fldt	-208(%rbp)
	fldt	-80(%rbp)
	fmulp	%st(1)
	fstpt	-80(%rbp)
	fldt	-208(%rbp)
	fldt	-48(%rbp)
	fmulp	%st(1)
	fstpt	-48(%rbp)
	movq	-168(%rbp), %rax
	fldt	(%rax)
	fldt	-80(%rbp)
	faddp	%st(1)
	fstpt	-80(%rbp)
	movq	-176(%rbp), %rax
	fldt	(%rax)
	fldt	-48(%rbp)
	faddp	%st(1)
	fstpt	-48(%rbp)
	movq	-184(%rbp), %rax
	fldt	(%rax)
	fldt	-64(%rbp)
	fmulp	%st(1)
	fstpt	-64(%rbp)
	movq	-184(%rbp), %rax
	fldt	(%rax)
	fldt	-32(%rbp)
	fmulp	%st(1)
	fld	%st(0)
	fstpt	-32(%rbp)
	fldt	-80(%rbp)
	fldt	-64(%rbp)
	faddp	%st(1)
	fldt	-48(%rbp)
	faddp	%st(2)
	fdivp	%st(1)
	fstpt	-160(%rbp)
	jmp	LBB524_3
LBB524_2:
	movq	-184(%rbp), %rax
	fldt	(%rax)
	fld1
	fdiv	%st(0), %st(1)
	fxch	%st(1)
	fstpt	-224(%rbp)
	movq	-184(%rbp), %rax
	fldt	(%rax)
	fmul	%st(0), %st(0)
	fdivrp	%st(1)
	fld	%st(0)
	fstpt	-240(%rbp)
	movq	-168(%rbp), %rax
	fldt	(%rax)
	fmulp	%st(1)
	fldt	32(%rax)
	faddp	%st(1)
	fstpt	-144(%rbp)
	movq	-168(%rbp), %rax
	fldt	16(%rax)
	fldt	-240(%rbp)
	fmulp	%st(1)
	fldt	48(%rax)
	faddp	%st(1)
	fstpt	-128(%rbp)
	movq	-176(%rbp), %rax
	fldt	(%rax)
	fldt	-240(%rbp)
	fmulp	%st(1)
	fldt	32(%rax)
	faddp	%st(1)
	fstpt	-112(%rbp)
	movq	-176(%rbp), %rax
	fldt	16(%rax)
	fldt	-240(%rbp)
	fmulp	%st(1)
	fldt	48(%rax)
	faddp	%st(1)
	fstpt	-96(%rbp)
	fldt	-240(%rbp)
	fldt	-144(%rbp)
	fmulp	%st(1)
	fstpt	-144(%rbp)
	fldt	-240(%rbp)
	fldt	-128(%rbp)
	fmulp	%st(1)
	fstpt	-128(%rbp)
	fldt	-240(%rbp)
	fldt	-112(%rbp)
	fmulp	%st(1)
	fstpt	-112(%rbp)
	fldt	-240(%rbp)
	fldt	-96(%rbp)
	fmulp	%st(1)
	fstpt	-96(%rbp)
	movq	-168(%rbp), %rax
	fldt	64(%rax)
	fldt	-144(%rbp)
	faddp	%st(1)
	fstpt	-144(%rbp)
	movq	-168(%rbp), %rax
	fldt	80(%rax)
	fldt	-128(%rbp)
	faddp	%st(1)
	fstpt	-128(%rbp)
	movq	-176(%rbp), %rax
	fldt	64(%rax)
	fldt	-112(%rbp)
	faddp	%st(1)
	fstpt	-112(%rbp)
	movq	-176(%rbp), %rax
	fldt	80(%rax)
	fldt	-96(%rbp)
	faddp	%st(1)
	fstpt	-96(%rbp)
	fldt	-240(%rbp)
	fldt	-144(%rbp)
	fmulp	%st(1)
	fstpt	-144(%rbp)
	fldt	-240(%rbp)
	fldt	-128(%rbp)
	fmulp	%st(1)
	fstpt	-128(%rbp)
	fldt	-240(%rbp)
	fldt	-112(%rbp)
	fmulp	%st(1)
	fstpt	-112(%rbp)
	fldt	-240(%rbp)
	fldt	-96(%rbp)
	fmulp	%st(1)
	fstpt	-96(%rbp)
	movq	-168(%rbp), %rax
	fldt	96(%rax)
	fldt	-144(%rbp)
	faddp	%st(1)
	fstpt	-144(%rbp)
	movq	-168(%rbp), %rax
	fldt	112(%rax)
	fldt	-128(%rbp)
	faddp	%st(1)
	fstpt	-128(%rbp)
	movq	-176(%rbp), %rax
	fldt	96(%rax)
	fldt	-112(%rbp)
	faddp	%st(1)
	fstpt	-112(%rbp)
	movq	-176(%rbp), %rax
	fldt	112(%rax)
	fldt	-96(%rbp)
	faddp	%st(1)
	fstpt	-96(%rbp)
	fldt	-240(%rbp)
	fldt	-144(%rbp)
	fmulp	%st(1)
	fstpt	-144(%rbp)
	fldt	-240(%rbp)
	fldt	-128(%rbp)
	fmulp	%st(1)
	fstpt	-128(%rbp)
	fldt	-240(%rbp)
	fldt	-112(%rbp)
	fmulp	%st(1)
	fstpt	-112(%rbp)
	fldt	-240(%rbp)
	fldt	-96(%rbp)
	fmulp	%st(1)
	fstpt	-96(%rbp)
	movq	-168(%rbp), %rax
	fldt	128(%rax)
	fldt	-144(%rbp)
	faddp	%st(1)
	fstpt	-144(%rbp)
	movq	-168(%rbp), %rax
	fldt	144(%rax)
	fldt	-128(%rbp)
	faddp	%st(1)
	fstpt	-128(%rbp)
	movq	-176(%rbp), %rax
	fldt	128(%rax)
	fldt	-112(%rbp)
	faddp	%st(1)
	fstpt	-112(%rbp)
	movq	-176(%rbp), %rax
	fldt	144(%rax)
	fldt	-96(%rbp)
	faddp	%st(1)
	fstpt	-96(%rbp)
	fldt	-240(%rbp)
	fldt	-144(%rbp)
	fmulp	%st(1)
	fstpt	-144(%rbp)
	fldt	-240(%rbp)
	fldt	-128(%rbp)
	fmulp	%st(1)
	fstpt	-128(%rbp)
	fldt	-240(%rbp)
	fldt	-112(%rbp)
	fmulp	%st(1)
	fstpt	-112(%rbp)
	fldt	-240(%rbp)
	fldt	-96(%rbp)
	fmulp	%st(1)
	fstpt	-96(%rbp)
	movq	-168(%rbp), %rax
	fldt	160(%rax)
	fldt	-144(%rbp)
	faddp	%st(1)
	fstpt	-144(%rbp)
	movq	-168(%rbp), %rax
	fldt	176(%rax)
	fldt	-128(%rbp)
	faddp	%st(1)
	fstpt	-128(%rbp)
	movq	-176(%rbp), %rax
	fldt	160(%rax)
	fldt	-112(%rbp)
	faddp	%st(1)
	fstpt	-112(%rbp)
	movq	-176(%rbp), %rax
	fldt	176(%rax)
	fldt	-96(%rbp)
	faddp	%st(1)
	fstpt	-96(%rbp)
	fldt	-240(%rbp)
	fldt	-144(%rbp)
	fmulp	%st(1)
	fstpt	-144(%rbp)
	fldt	-240(%rbp)
	fldt	-128(%rbp)
	fmulp	%st(1)
	fstpt	-128(%rbp)
	fldt	-240(%rbp)
	fldt	-112(%rbp)
	fmulp	%st(1)
	fstpt	-112(%rbp)
	fldt	-240(%rbp)
	fldt	-96(%rbp)
	fmulp	%st(1)
	fstpt	-96(%rbp)
	movq	-168(%rbp), %rax
	fldt	192(%rax)
	fldt	-144(%rbp)
	faddp	%st(1)
	fstpt	-144(%rbp)
	movq	-168(%rbp), %rax
	fldt	208(%rax)
	fldt	-128(%rbp)
	faddp	%st(1)
	fstpt	-128(%rbp)
	movq	-176(%rbp), %rax
	fldt	192(%rax)
	fldt	-112(%rbp)
	faddp	%st(1)
	fstpt	-112(%rbp)
	movq	-176(%rbp), %rax
	fldt	208(%rax)
	fldt	-96(%rbp)
	faddp	%st(1)
	fstpt	-96(%rbp)
	fldt	-240(%rbp)
	fldt	-144(%rbp)
	fmulp	%st(1)
	fstpt	-144(%rbp)
	fldt	-240(%rbp)
	fldt	-128(%rbp)
	fmulp	%st(1)
	fstpt	-128(%rbp)
	fldt	-240(%rbp)
	fldt	-112(%rbp)
	fmulp	%st(1)
	fstpt	-112(%rbp)
	fldt	-240(%rbp)
	fldt	-96(%rbp)
	fmulp	%st(1)
	fstpt	-96(%rbp)
	movq	-168(%rbp), %rax
	fldt	224(%rax)
	fldt	-144(%rbp)
	faddp	%st(1)
	fstpt	-144(%rbp)
	movq	-168(%rbp), %rax
	fldt	240(%rax)
	fldt	-128(%rbp)
	faddp	%st(1)
	fstpt	-128(%rbp)
	movq	-176(%rbp), %rax
	fldt	224(%rax)
	fldt	-112(%rbp)
	faddp	%st(1)
	fstpt	-112(%rbp)
	movq	-176(%rbp), %rax
	fldt	240(%rax)
	fldt	-96(%rbp)
	faddp	%st(1)
	fstpt	-96(%rbp)
	fldt	-240(%rbp)
	fldt	-144(%rbp)
	fmulp	%st(1)
	fstpt	-144(%rbp)
	fldt	-240(%rbp)
	fldt	-112(%rbp)
	fmulp	%st(1)
	fstpt	-112(%rbp)
	movq	-168(%rbp), %rax
	fldt	256(%rax)
	fldt	-144(%rbp)
	faddp	%st(1)
	fstpt	-144(%rbp)
	movq	-176(%rbp), %rax
	fldt	256(%rax)
	fldt	-112(%rbp)
	faddp	%st(1)
	fstpt	-112(%rbp)
	fldt	-224(%rbp)
	fldt	-128(%rbp)
	fmulp	%st(1)
	fstpt	-128(%rbp)
	fldt	-224(%rbp)
	fldt	-96(%rbp)
	fmulp	%st(1)
	fld	%st(0)
	fstpt	-96(%rbp)
	fldt	-144(%rbp)
	fldt	-128(%rbp)
	faddp	%st(1)
	fldt	-112(%rbp)
	faddp	%st(2)
	fdivp	%st(1)
	fstpt	-160(%rbp)
LBB524_3:
	movq	___stack_chk_guard@GOTPCREL(%rip), %rax
	fldt	-160(%rbp)
	movq	(%rax), %rax
	cmpq	-8(%rbp), %rax
	fstpt	-260(%rbp)              ## 10-byte Folded Spill
	jne	LBB524_5
## BB#4:                                ## %SP_return
	fldt	-260(%rbp)              ## 10-byte Folded Reload
	addq	$272, %rsp              ## imm = 0x110
	popq	%rbp
	retq
LBB524_5:                               ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.globl	__ZN4arma3ColIdED2Ev
	.weak_def_can_be_hidden	__ZN4arma3ColIdED2Ev
	.align	4, 0x90
__ZN4arma3ColIdED2Ev:                   ## @_ZN4arma3ColIdED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2025:
	.cfi_def_cfa_offset 16
Ltmp2026:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2027:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma3MatIdED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma3ColINSt3__17complexIdEEED2Ev
	.weak_def_can_be_hidden	__ZN4arma3ColINSt3__17complexIdEEED2Ev
	.align	4, 0x90
__ZN4arma3ColINSt3__17complexIdEEED2Ev: ## @_ZN4arma3ColINSt3__17complexIdEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2028:
	.cfi_def_cfa_offset 16
Ltmp2029:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2030:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma3MatINSt3__17complexIdEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev: ## @_ZN5boost7numeric6odeint12runge_kutta4INSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2031:
	.cfi_def_cfa_offset 16
Ltmp2032:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2033:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev
	.weak_def_can_be_hidden	__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev
	.align	4, 0x90
__ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev: ## @_ZN5boost7numeric6odeint19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS3_9allocatorIdEEEEdS7_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2034:
	.cfi_def_cfa_offset 16
Ltmp2035:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2036:
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	movq	%rdi, %rax
	addq	$176, %rax
	movq	%rax, %rcx
	addq	$72, %rcx
	movq	%rdi, -16(%rbp)         ## 8-byte Spill
	movq	%rax, -24(%rbp)         ## 8-byte Spill
	movq	%rcx, -32(%rbp)         ## 8-byte Spill
LBB528_1:                               ## =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rax         ## 8-byte Reload
	addq	$-24, %rax
	movq	%rax, %rdi
	movq	%rax, -40(%rbp)         ## 8-byte Spill
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED1Ev
	movq	-40(%rbp), %rax         ## 8-byte Reload
	movq	-24(%rbp), %rdi         ## 8-byte Reload
	cmpq	%rdi, %rax
	movq	%rax, -32(%rbp)         ## 8-byte Spill
	jne	LBB528_1
## BB#2:
	movq	-16(%rbp), %rax         ## 8-byte Reload
	addq	$152, %rax
	movq	%rax, %rdi
	callq	__ZN5boost7numeric6odeint13state_wrapperINSt3__16vectorIdNS3_9allocatorIdEEEEvED1Ev
	movq	-16(%rbp), %rax         ## 8-byte Reload
	movq	%rax, %rdi
	callq	__ZN5boost7numeric6odeint21explicit_stepper_baseINS1_19explicit_generic_rkILm4ELm4ENSt3__16vectorIdNS4_9allocatorIdEEEEdS8_dNS1_13range_algebraENS1_18default_operationsENS1_17initially_resizerEEELt4ES8_dS8_dS9_SA_SB_ED2Ev
	addq	$48, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev
	.weak_def_can_be_hidden	__ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev
	.align	4, 0x90
__ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev: ## @_ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2037:
	.cfi_def_cfa_offset 16
Ltmp2038:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2039:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma22gmm_seed_random_spreadC2Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_random_spreadC2Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_random_spreadC2Ev:  ## @_ZN4arma22gmm_seed_random_spreadC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2040:
	.cfi_def_cfa_offset 16
Ltmp2041:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2042:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$5, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_seed_modeC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma13gmm_seed_modeC2Ej
	.weak_def_can_be_hidden	__ZN4arma13gmm_seed_modeC2Ej
	.align	4, 0x90
__ZN4arma13gmm_seed_modeC2Ej:           ## @_ZN4arma13gmm_seed_modeC2Ej
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2043:
	.cfi_def_cfa_offset 16
Ltmp2044:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2045:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	%esi, (%rdi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma22gmm_seed_random_subsetC2Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_random_subsetC2Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_random_subsetC2Ev:  ## @_ZN4arma22gmm_seed_random_subsetC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2046:
	.cfi_def_cfa_offset 16
Ltmp2047:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2048:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$4, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_seed_modeC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma22gmm_seed_static_spreadC2Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_static_spreadC2Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_static_spreadC2Ev:  ## @_ZN4arma22gmm_seed_static_spreadC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2049:
	.cfi_def_cfa_offset 16
Ltmp2050:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2051:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$3, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_seed_modeC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma22gmm_seed_static_subsetC2Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_static_subsetC2Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_static_subsetC2Ev:  ## @_ZN4arma22gmm_seed_static_subsetC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2052:
	.cfi_def_cfa_offset 16
Ltmp2053:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2054:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_seed_modeC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma22gmm_seed_keep_existingC2Ev
	.weak_def_can_be_hidden	__ZN4arma22gmm_seed_keep_existingC2Ev
	.align	4, 0x90
__ZN4arma22gmm_seed_keep_existingC2Ev:  ## @_ZN4arma22gmm_seed_keep_existingC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2055:
	.cfi_def_cfa_offset 16
Ltmp2056:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2057:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_seed_modeC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma13gmm_dist_probC2Ev
	.weak_def_can_be_hidden	__ZN4arma13gmm_dist_probC2Ev
	.align	4, 0x90
__ZN4arma13gmm_dist_probC2Ev:           ## @_ZN4arma13gmm_dist_probC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2058:
	.cfi_def_cfa_offset 16
Ltmp2059:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2060:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$3, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_dist_modeC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma13gmm_dist_modeC2Ej
	.weak_def_can_be_hidden	__ZN4arma13gmm_dist_modeC2Ej
	.align	4, 0x90
__ZN4arma13gmm_dist_modeC2Ej:           ## @_ZN4arma13gmm_dist_modeC2Ej
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2061:
	.cfi_def_cfa_offset 16
Ltmp2062:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2063:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	-8(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	%esi, (%rdi)
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma13gmm_dist_mahaC2Ev
	.weak_def_can_be_hidden	__ZN4arma13gmm_dist_mahaC2Ev
	.align	4, 0x90
__ZN4arma13gmm_dist_mahaC2Ev:           ## @_ZN4arma13gmm_dist_mahaC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2064:
	.cfi_def_cfa_offset 16
Ltmp2065:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2066:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_dist_modeC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN4arma13gmm_dist_euclC2Ev
	.weak_def_can_be_hidden	__ZN4arma13gmm_dist_euclC2Ev
	.align	4, 0x90
__ZN4arma13gmm_dist_euclC2Ev:           ## @_ZN4arma13gmm_dist_euclC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2067:
	.cfi_def_cfa_offset 16
Ltmp2068:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2069:
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1, %esi
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	__ZN4arma13gmm_dist_modeC2Ej
	addq	$16, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.globl	__ZN5boost6fusion11unused_typeC2Ev
	.weak_def_can_be_hidden	__ZN5boost6fusion11unused_typeC2Ev
	.align	4, 0x90
__ZN5boost6fusion11unused_typeC2Ev:     ## @_ZN5boost6fusion11unused_typeC2Ev
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2070:
	.cfi_def_cfa_offset 16
Ltmp2071:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2072:
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__StaticInit,regular,pure_instructions
	.align	4, 0x90
__GLOBAL__sub_I_fid_sim.cxx:            ## @_GLOBAL__sub_I_fid_sim.cxx
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2073:
	.cfi_def_cfa_offset 16
Ltmp2074:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2075:
	.cfi_def_cfa_register %rbp
	callq	___cxx_global_var_init
	callq	___cxx_global_var_init1
	callq	___cxx_global_var_init2
	callq	___cxx_global_var_init3
	callq	___cxx_global_var_init4
	callq	___cxx_global_var_init5
	callq	___cxx_global_var_init6
	callq	___cxx_global_var_init7
	callq	___cxx_global_var_init8
	callq	___cxx_global_var_init9
	callq	___cxx_global_var_init10
	callq	___cxx_global_var_init11
	callq	___cxx_global_var_init12
	callq	___cxx_global_var_init13
	callq	___cxx_global_var_init14
	callq	___cxx_global_var_init15
	callq	___cxx_global_var_init16
	callq	___cxx_global_var_init17
	popq	%rbp
	retq
	.cfi_endproc

.zerofill __DATA,__bss,__ZN5boost6fusionL6unusedE,1,0 ## @_ZN5boost6fusionL6unusedE
.zerofill __DATA,__bss,__ZN5boost12_GLOBAL__N_17extentsE,16,3 ## @_ZN5boost12_GLOBAL__N_17extentsE
.zerofill __DATA,__bss,__ZN5boost12_GLOBAL__N_17indicesE,32,3 ## @_ZN5boost12_GLOBAL__N_17indicesE
.zerofill __DATA,__bss,__ZN4arma4fillL4noneE,1,0 ## @_ZN4arma4fillL4noneE
.zerofill __DATA,__bss,__ZN4arma4fillL5zerosE,1,0 ## @_ZN4arma4fillL5zerosE
.zerofill __DATA,__bss,__ZN4arma4fillL4onesE,1,0 ## @_ZN4arma4fillL4onesE
.zerofill __DATA,__bss,__ZN4arma4fillL3eyeE,1,0 ## @_ZN4arma4fillL3eyeE
.zerofill __DATA,__bss,__ZN4arma4fillL5randuE,1,0 ## @_ZN4arma4fillL5randuE
.zerofill __DATA,__bss,__ZN4arma4fillL5randnE,1,0 ## @_ZN4arma4fillL5randnE
.zerofill __DATA,__bss,__ZN4armaL9eucl_distE,4,2 ## @_ZN4armaL9eucl_distE
.zerofill __DATA,__bss,__ZN4armaL9maha_distE,4,2 ## @_ZN4armaL9maha_distE
.zerofill __DATA,__bss,__ZN4armaL9prob_distE,4,2 ## @_ZN4armaL9prob_distE
.zerofill __DATA,__bss,__ZN4armaL13keep_existingE,4,2 ## @_ZN4armaL13keep_existingE
.zerofill __DATA,__bss,__ZN4armaL13static_subsetE,4,2 ## @_ZN4armaL13static_subsetE
.zerofill __DATA,__bss,__ZN4armaL13static_spreadE,4,2 ## @_ZN4armaL13static_spreadE
.zerofill __DATA,__bss,__ZN4armaL13random_subsetE,4,2 ## @_ZN4armaL13random_subsetE
.zerofill __DATA,__bss,__ZN4armaL13random_spreadE,4,2 ## @_ZN4armaL13random_spreadE
.zerofill __DATA,__bss,__ZL13gVersionCheck,1,0 ## @_ZL13gVersionCheck
	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"Loading dt_integration: "

L_.str18:                               ## @.str18
	.asciz	"sim::dt_int @ "

L_.str19:                               ## @.str19
	.asciz	"WARNING: The given integration step was larger than the "

L_.str20:                               ## @.str20
	.asciz	"sampling time, so the sampling time, "

L_.str21:                               ## @.str21
	.asciz	", will be used instead."

L_.str22:                               ## @.str22
	.asciz	"WARNING: The given integration time step was not an even"

L_.str23:                               ## @.str23
	.asciz	" divisor of the sampling rate, so it has been rounded to "

L_.str24:                               ## @.str24
	.space	1

L_.str25:                               ## @.str25
	.asciz	"t"

L_.str26:                               ## @.str26
	.asciz	"No ROOT file loaded.  Cannot make gradient FIDs."

L_.str27:                               ## @.str27
	.asciz	"Printing Diagnostic Info for FidFactory @"

L_.str28:                               ## @.str28
	.asciz	"The time step, fid length: "

L_.str29:                               ## @.str29
	.asciz	", "

L_.str30:                               ## @.str30
	.asciz	"The sim length, sim-to-fid: "

.zerofill __DATA,__bss,__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b,24,3 ## @_ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b
.zerofill __DATA,__bss,__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b,8,3 ## @_ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE1b
.zerofill __DATA,__bss,__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1,24,3 ## @_ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1
.zerofill __DATA,__bss,__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1,8,3 ## @_ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s1
.zerofill __DATA,__bss,__ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2,24,3 ## @_ZZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2
.zerofill __DATA,__bss,__ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2,8,3 ## @_ZGVZN3fid10FidFactory5BlochERKNSt3__16vectorIdNS1_9allocatorIdEEEERS5_dE2s2
.zerofill __DATA,__bss,__ZZN3fid10FidFactory6BfieldERKdE1a,24,3 ## @_ZZN3fid10FidFactory6BfieldERKdE1a
.zerofill __DATA,__bss,__ZGVZN3fid10FidFactory6BfieldERKdE1a,8,3 ## @_ZGVZN3fid10FidFactory6BfieldERKdE1a
.zerofill __DATA,__bss,__ZZN3fid10FidFactory6BfieldERKdE1b,24,3 ## @_ZZN3fid10FidFactory6BfieldERKdE1b
.zerofill __DATA,__bss,__ZGVZN3fid10FidFactory6BfieldERKdE1b,8,3 ## @_ZGVZN3fid10FidFactory6BfieldERKdE1b
	.section	__DATA,__datacoal_nt,coalesced
	.globl	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE ## @_ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE
	.weak_definition	__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE
__ZN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE:
	.space	1

	.globl	__ZGVN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE ## @_ZGVN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE
	.weak_definition	__ZGVN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE
	.align	3
__ZGVN5boost4math7lanczos19lanczos_initializerINS1_12lanczos17m64EeE11initializerE:
	.quad	0                       ## 0x0

	.section	__TEXT,__cstring,cstring_literals
L_.str32:                               ## @.str32
	.asciz	"conv_to(): given object can't be interpreted as a vector"

L_.str33:                               ## @.str33
	.asciz	"error: "

	.section	__DATA,__datacoal_nt,coalesced
	.globl	__ZZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err1 ## @_ZZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err1
	.weak_definition	__ZZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err1
	.align	3
__ZZN4arma16arma_stream_err1IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err1:
	.quad	__ZNSt3__14coutE

	.section	__TEXT,__cstring,cstring_literals
L_.str34:                               ## @.str34
	.asciz	"Mat::init(): size is fixed and hence cannot be changed"

L_.str35:                               ## @.str35
	.asciz	"Mat::init(): requested size is not compatible with column vector layout"

L_.str36:                               ## @.str36
	.asciz	"Mat::init(): requested size is not compatible with row vector layout"

L_.str37:                               ## @.str37
	.asciz	"Mat::init(): requested size is too large"

L_.str38:                               ## @.str38
	.asciz	"Mat::init(): mismatch between size of auxiliary memory and requested size"

L_.str39:                               ## @.str39
	.asciz	"arma::memory::acquire(): requested size is too large"

L_.str40:                               ## @.str40
	.asciz	"arma::memory::acquire(): out of memory"

	.section	__DATA,__datacoal_nt,coalesced
	.globl	__ZZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err2 ## @_ZZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err2
	.weak_definition	__ZZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err2
	.align	3
__ZZN4arma16arma_stream_err2IcEERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEEPS5_E11stream_err2:
	.quad	__ZNSt3__14coutE

	.section	__TEXT,__cstring,cstring_literals
L_.str41:                               ## @.str41
	.asciz	"element-wise multiplication"

L_.str42:                               ## @.str42
	.asciz	": incompatible matrix dimensions: "

L_.str43:                               ## @.str43
	.asciz	" and "

	.section	__DATA,__datacoal_nt,coalesced
	.globl	__ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE ## @_ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.weak_def_can_be_hidden	__ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.align	4
__ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE:
	.quad	128
	.quad	0
	.quad	__ZTINSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.quad	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.quad	__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.quad	112
	.quad	-16
	.quad	__ZTINSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.quad	__ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.quad	__ZThn16_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.quad	-128
	.quad	-128
	.quad	__ZTINSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.quad	__ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.quad	__ZTv0_n24_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev

	.globl	__ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE ## @_ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.weak_def_can_be_hidden	__ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.align	4
__ZTTNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE:
	.quad	__ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE+24
	.quad	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_14basic_iostreamIcS2_EE+24
	.quad	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_istreamIcS2_EE+24
	.quad	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_istreamIcS2_EE+64
	.quad	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE16_NS_13basic_ostreamIcS2_EE+24
	.quad	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE16_NS_13basic_ostreamIcS2_EE+64
	.quad	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_14basic_iostreamIcS2_EE+104
	.quad	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_14basic_iostreamIcS2_EE+64
	.quad	__ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE+104
	.quad	__ZTVNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE+64

	.globl	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_14basic_iostreamIcS2_EE ## @_ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_14basic_iostreamIcS2_EE
	.weak_def_can_be_hidden	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_14basic_iostreamIcS2_EE
	.align	4
__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_14basic_iostreamIcS2_EE:
	.quad	128
	.quad	0
	.quad	__ZTINSt3__114basic_iostreamIcNS_11char_traitsIcEEEE
	.quad	__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev
	.quad	__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev
	.quad	112
	.quad	-16
	.quad	__ZTINSt3__114basic_iostreamIcNS_11char_traitsIcEEEE
	.quad	__ZThn16_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev
	.quad	__ZThn16_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev
	.quad	-128
	.quad	-128
	.quad	__ZTINSt3__114basic_iostreamIcNS_11char_traitsIcEEEE
	.quad	__ZTv0_n24_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev
	.quad	__ZTv0_n24_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev

	.globl	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_istreamIcS2_EE ## @_ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_istreamIcS2_EE
	.weak_def_can_be_hidden	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_istreamIcS2_EE
	.align	4
__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE0_NS_13basic_istreamIcS2_EE:
	.quad	128
	.quad	0
	.quad	__ZTINSt3__113basic_istreamIcNS_11char_traitsIcEEEE
	.quad	__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev
	.quad	__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev
	.quad	-128
	.quad	-128
	.quad	__ZTINSt3__113basic_istreamIcNS_11char_traitsIcEEEE
	.quad	__ZTv0_n24_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev
	.quad	__ZTv0_n24_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev

	.globl	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE16_NS_13basic_ostreamIcS2_EE ## @_ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE16_NS_13basic_ostreamIcS2_EE
	.weak_def_can_be_hidden	__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE16_NS_13basic_ostreamIcS2_EE
	.align	4
__ZTCNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE16_NS_13basic_ostreamIcS2_EE:
	.quad	112
	.quad	0
	.quad	__ZTINSt3__113basic_ostreamIcNS_11char_traitsIcEEEE
	.quad	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev
	.quad	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev
	.quad	-112
	.quad	-112
	.quad	__ZTINSt3__113basic_ostreamIcNS_11char_traitsIcEEEE
	.quad	__ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev
	.quad	__ZTv0_n24_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev

	.section	__TEXT,__const_coal,coalesced
	.globl	__ZTSNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE ## @_ZTSNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.weak_definition	__ZTSNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.align	4
__ZTSNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE:
	.asciz	"NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE"

	.section	__DATA,__datacoal_nt,coalesced
	.globl	__ZTINSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE ## @_ZTINSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.weak_definition	__ZTINSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.align	4
__ZTINSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE:
	.quad	__ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	__ZTSNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.quad	__ZTINSt3__114basic_iostreamIcNS_11char_traitsIcEEEE

	.globl	__ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE ## @_ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.weak_def_can_be_hidden	__ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.align	4
__ZTVNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE:
	.quad	0
	.quad	__ZTINSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.quad	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	.quad	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev
	.quad	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE
	.quad	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPcl
	.quad	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj
	.quad	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj
	.quad	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv
	.quad	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv
	.quad	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPcl
	.quad	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv
	.quad	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv
	.quad	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi
	.quad	__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKcl
	.quad	__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi

	.section	__TEXT,__const_coal,coalesced
	.globl	__ZTSNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE ## @_ZTSNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.weak_definition	__ZTSNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.align	4
__ZTSNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE:
	.asciz	"NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE"

	.section	__DATA,__datacoal_nt,coalesced
	.globl	__ZTINSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE ## @_ZTINSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.weak_definition	__ZTINSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.align	4
__ZTINSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE:
	.quad	__ZTVN10__cxxabiv120__si_class_type_infoE+16
	.quad	__ZTSNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
	.quad	__ZTINSt3__115basic_streambufIcNS_11char_traitsIcEEEE

	.section	__TEXT,__cstring,cstring_literals
L_.str44:                               ## @.str44
	.asciz	"Mat::init(): requested size is too large; suggest to enable ARMA_64BIT_WORD"

L___func__._ZN3fidmiIdEERNSt3__16vectorIT_NS1_9allocatorIS3_EEEES7_S7_: ## @__func__._ZN3fidmiIdEERNSt3__16vectorIT_NS1_9allocatorIS3_EEEES7_S7_
	.asciz	"operator-"

L_.str45:                               ## @.str45
	.asciz	"/usr/local/include/fid_math.h"

L_.str46:                               ## @.str46
	.asciz	"a.size() == b.size()"

L_.str47:                               ## @.str47
	.asciz	"out of range"

L___func__._ZNK5boost5arrayIdLm4EEixEm: ## @__func__._ZNK5boost5arrayIdLm4EEixEm
	.asciz	"operator[]"

L_.str48:                               ## @.str48
	.asciz	"/usr/local/include/boost/array.hpp"

L_.str49:                               ## @.str49
	.asciz	"(i < N)&&(\"out of range\")"

	.section	__DATA,__datacoal_nt,coalesced
	.globl	__ZZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen ## @_ZZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen
	.weak_definition	__ZZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen
	.align	2
__ZZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen:
	.space	4

	.globl	__ZGVZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen ## @_ZGVZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen
	.weak_definition	__ZGVZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen
	.align	3
__ZGVZN3fid8addnoiseIdEEvRNSt3__16vectorIT_NS1_9allocatorIS3_EEEES3_E3gen:
	.quad	0                       ## 0x0

	.section	__TEXT,__const_coal,coalesced
	.globl	__ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_E1d ## @_ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_E1d
	.weak_def_can_be_hidden	__ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_E1d
	.align	4
__ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_2IeEET_RKS4_E1d:
	.quad	-4862970534671067739    ## x86_fp80 23.5640908505226132717
	.short	16387
	.space	6
	.quad	-5631853887913169085    ## x86_fp80 -88.9211633894630879768
	.short	49157
	.space	6
	.quad	-8549829370103422998    ## x86_fp80 137.347282208684759702
	.short	16390
	.space	6
	.quad	-2300072085647091077    ## x86_fp80 -112.040043826356215249
	.short	49157
	.space	6
	.quad	-3462312874161755899    ## x86_fp80 51.9876891520297386325
	.short	16388
	.space	6
	.quad	-2553120565945017003    ## x86_fp80 -13.785520908627993582
	.short	49154
	.space	6
	.quad	-33470982268998247      ## x86_fp80 1.9963710688308728302
	.short	16383
	.space	6
	.quad	-7942977075002736077    ## x86_fp80 -0.142352587490993450628
	.short	49148
	.space	6
	.quad	-8769815544939012494    ## x86_fp80 0.00409833864604686512265
	.short	16375
	.space	6
	.quad	-8765404264983197355    ## x86_fp80 -3.20328663732651100088E-5
	.short	49136
	.space	6
	.quad	-2096423523213706446    ## x86_fp80 2.64153675164013864621E-8
	.short	16357
	.space	6
	.quad	-5826417647556615995    ## x86_fp80 -7.77787666306223561775E-14
	.short	49107
	.space	6
	.quad	-114188682283286187     ## x86_fp80 7.0614434770971016367E-15
	.short	16335
	.space	6
	.quad	-463027378136981672     ## x86_fp80 -3.46353784953798845559E-15
	.short	49102
	.space	6
	.quad	-2413807386074558269    ## x86_fp80 7.71957821579523403611E-16
	.short	16332
	.space	6
	.quad	-6153733726129208940    ## x86_fp80 -7.39858647970847632939E-17
	.short	49097
	.space	6

	.globl	__ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_E1d ## @_ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_E1d
	.weak_def_can_be_hidden	__ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_E1d
	.align	4
__ZZN5boost4math7lanczos12lanczos17m6418lanczos_sum_near_1IeEET_RKS4_E1d:
	.quad	-8085104039395251484    ## x86_fp80 4.49364505428653636561
	.short	16385
	.space	6
	.quad	-8671604728012820339    ## x86_fp80 -16.9571637039246854387
	.short	49155
	.space	6
	.quad	-3348101960107604455    ## x86_fp80 26.1919689298373752784
	.short	16387
	.space	6
	.quad	-6130136879719782058    ## x86_fp80 -21.3659076437988814483
	.short	49155
	.space	6
	.quad	-7016688812375087855    ## x86_fp80 9.91399259677455659076
	.short	16386
	.space	6
	.quad	-6323161097662021000    ## x86_fp80 -2.62888300018780199201
	.short	49152
	.space	6
	.quad	-4401183973733259815    ## x86_fp80 0.380705669354250360645
	.short	16381
	.space	6
	.quad	-2422293676016336659    ## x86_fp80 -0.0271464748969768580729
	.short	49145
	.space	6
	.quad	-3683710846639948081    ## x86_fp80 7.81548471546120675731E-4
	.short	16372
	.space	6
	.quad	-3676981038481503506    ## x86_fp80 -6.10863081737150105248E-6
	.short	49133
	.space	6
	.quad	-5974794692118082874    ## x86_fp80 5.03738023886483682402E-9
	.short	16355
	.space	6
	.quad	-8820017069793581899    ## x86_fp80 -1.4832321442626388145E-14
	.short	49105
	.space	6
	.quad	-4462755064383599049    ## x86_fp80 1.34660915875214246091E-15
	.short	16333
	.space	6
	.quad	-4728847618568766455    ## x86_fp80 -6.6049268892397880533E-16
	.short	49100
	.space	6
	.quad	-6216893644240123613    ## x86_fp80 1.47211469734326674921E-16
	.short	16330
	.space	6
	.quad	-9069692270419210913    ## x86_fp80 -1.41090194203337465157E-17
	.short	49095
	.space	6

	.globl	__ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E3num ## @_ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E3num
	.weak_definition	__ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E3num
	.align	4
__ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E3num:
	.quad	-7055456244706973308    ## x86_fp80 2715894658327.71737766
	.short	16424
	.space	6
	.quad	-3388439726678974482    ## x86_fp80 3590179526097.91210508
	.short	16424
	.space	6
	.quad	-9118752068562835339    ## x86_fp80 2223966599737.8149693
	.short	16424
	.space	6
	.quad	-4069662593764766546    ## x86_fp80 856940834518.956248164
	.short	16422
	.space	6
	.quad	-3019364376370017030    ## x86_fp80 229885871668.749072939
	.short	16420
	.space	6
	.quad	-6225905416828822552    ## x86_fp80 45526171687.5461081564
	.short	16418
	.space	6
	.quad	-3661560291371215853    ## x86_fp80 6884887713.16517878463
	.short	16415
	.space	6
	.quad	-4513035290144564621    ## x86_fp80 811048596.140753186482
	.short	16412
	.space	6
	.quad	-8109422176892892874    ## x86_fp80 75213915.9654082231427
	.short	16409
	.space	6
	.quad	-6331785280690111527    ## x86_fp80 5509245.41722426515162
	.short	16405
	.space	6
	.quad	-7269600150631091538    ## x86_fp80 317673.536843541912674
	.short	16401
	.space	6
	.quad	-2382089065239812068    ## x86_fp80 14268.2798984503552013
	.short	16396
	.space	6
	.quad	-815624517148414243     ## x86_fp80 489.361872040326367023
	.short	16391
	.space	6
	.quad	-4162723050234120805    ## x86_fp80 12.389413300384544493
	.short	16386
	.space	6
	.quad	-2334417831095905682    ## x86_fp80 0.218362738950461496393
	.short	16380
	.space	6
	.quad	-7142581562355498717    ## x86_fp80 0.00239374952205844918674
	.short	16374
	.space	6
	.quad	-3582500518549902787    ## x86_fp80 1.22954140890943521281E-5
	.short	16366
	.space	6

	.globl	__ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E5denom ## @_ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E5denom
	.weak_definition	__ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E5denom
	.align	4
__ZZN5boost4math7lanczos12lanczos17m6423lanczos_sum_expG_scaledIeEET_RKS4_E5denom:
	.quad	0                       ## x86_fp80 0
	.short	0
	.space	6
	.quad	-7477176408909807616    ## x86_fp80 1307674368000
	.short	16423
	.space	6
	.quad	-246975339446665216     ## x86_fp80 4339163001600
	.short	16424
	.space	6
	.quad	-5516087331364274176    ## x86_fp80 6165817614720
	.short	16425
	.space	6
	.quad	-7841455419443642368    ## x86_fp80 5056995703824
	.short	16425
	.space	6
	.quad	-7093546031006089216    ## x86_fp80 2706813345600
	.short	16424
	.space	6
	.quad	-1507257044053262336    ## x86_fp80 1009672107080
	.short	16422
	.space	6
	.quad	-139230509422084096     ## x86_fp80 272803210680
	.short	16420
	.space	6
	.quad	-3781811900354920448    ## x86_fp80 54631129553
	.short	16418
	.space	6
	.quad	-820997154842607616     ## x86_fp80 8207628000
	.short	16415
	.space	6
	.quad	-2502180670281875456    ## x86_fp80 928095740
	.short	16412
	.space	6
	.quad	-7649748796158509056    ## x86_fp80 78558480
	.short	16409
	.space	6
	.quad	-7672361352295350272    ## x86_fp80 4899622
	.short	16405
	.space	6
	.quad	-3078210345307734016    ## x86_fp80 218400
	.short	16400
	.space	6
	.quad	-3629901299660619776    ## x86_fp80 6580
	.short	16395
	.space	6
	.quad	-1152921504606846976    ## x86_fp80 120
	.short	16389
	.space	6
	.quad	-9223372036854775808    ## x86_fp80 1
	.short	16383
	.space	6

	.globl	__ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E3num ## @_ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E3num
	.weak_definition	__ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E3num
	.align	4
__ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E3num:
	.quad	-728949020292208601     ## x86_fp80 553681095419291969.219
	.short	16441
	.space	6
	.quad	-6736042251506879340    ## x86_fp80 731918863887667017.25
	.short	16442
	.space	6
	.quad	-3938160576563716753    ## x86_fp80 453393234285807339.469
	.short	16441
	.space	6
	.quad	-7265822875344573033    ## x86_fp80 174701893724452790.359
	.short	16440
	.space	6
	.quad	-6449015818929462316    ## x86_fp80 46866125995234723.8281
	.short	16438
	.space	6
	.quad	-8942712661553939283    ## x86_fp80 9281280675933215.16894
	.short	16436
	.space	6
	.quad	-6948445548778073694    ## x86_fp80 1403600894156674.55103
	.short	16433
	.space	6
	.quad	-7610629655958865148    ## x86_fp80 165345984157572.73053
	.short	16430
	.space	6
	.quad	-2368267827794343029    ## x86_fp80 15333629842677.3153181
	.short	16426
	.space	6
	.quad	-9025054436967681350    ## x86_fp80 1123152927963.95662618
	.short	16423
	.space	6
	.quad	-1062024427924501522    ## x86_fp80 64763127437.9232901856
	.short	16418
	.space	6
	.quad	-5953412796483650140    ## x86_fp80 2908830362.65752778295
	.short	16414
	.space	6
	.quad	-4735188033921506646    ## x86_fp80 99764700.5699985672981
	.short	16409
	.space	6
	.quad	-7338195118064290886    ## x86_fp80 2525791.60488613995994
	.short	16404
	.space	6
	.quad	-5916339325547609352    ## x86_fp80 44516.9403497016782865
	.short	16398
	.space	6
	.quad	-864462102327606693     ## x86_fp80 488.006356752000573035
	.short	16391
	.space	6
	.quad	-6886961506198999885    ## x86_fp80 2.50662827463100050247
	.short	16384
	.space	6

	.globl	__ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E5denom ## @_ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E5denom
	.weak_definition	__ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E5denom
	.align	4
__ZZN5boost4math7lanczos12lanczos17m6411lanczos_sumIeEET_RKS4_E5denom:
	.quad	0                       ## x86_fp80 0
	.short	0
	.space	6
	.quad	-7477176408909807616    ## x86_fp80 1307674368000
	.short	16423
	.space	6
	.quad	-246975339446665216     ## x86_fp80 4339163001600
	.short	16424
	.space	6
	.quad	-5516087331364274176    ## x86_fp80 6165817614720
	.short	16425
	.space	6
	.quad	-7841455419443642368    ## x86_fp80 5056995703824
	.short	16425
	.space	6
	.quad	-7093546031006089216    ## x86_fp80 2706813345600
	.short	16424
	.space	6
	.quad	-1507257044053262336    ## x86_fp80 1009672107080
	.short	16422
	.space	6
	.quad	-139230509422084096     ## x86_fp80 272803210680
	.short	16420
	.space	6
	.quad	-3781811900354920448    ## x86_fp80 54631129553
	.short	16418
	.space	6
	.quad	-820997154842607616     ## x86_fp80 8207628000
	.short	16415
	.space	6
	.quad	-2502180670281875456    ## x86_fp80 928095740
	.short	16412
	.space	6
	.quad	-7649748796158509056    ## x86_fp80 78558480
	.short	16409
	.space	6
	.quad	-7672361352295350272    ## x86_fp80 4899622
	.short	16405
	.space	6
	.quad	-3078210345307734016    ## x86_fp80 218400
	.short	16400
	.space	6
	.quad	-3629901299660619776    ## x86_fp80 6580
	.short	16395
	.space	6
	.quad	-1152921504606846976    ## x86_fp80 120
	.short	16389
	.space	6
	.quad	-9223372036854775808    ## x86_fp80 1
	.short	16383
	.space	6

	.section	__DATA,__mod_init_func,mod_init_funcs
	.align	3
	.quad	___cxx_global_var_init31
	.quad	__GLOBAL__sub_I_fid_sim.cxx

.subsections_via_symbols
